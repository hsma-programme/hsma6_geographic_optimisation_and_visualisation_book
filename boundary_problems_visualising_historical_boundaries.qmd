---
title: "Loading and Visualising the Historical Boundaries"
format: html
---

Let's imagine we've been told that the historical boundaries have been based on groups of LSOAs. We've been given a list of the LSOAs that belong to each dispatcher, but we only have a standard file of all LSOAs in our region. How can we turn our lists of LSOAs and this file into something to help us visualise the boundaries, and later start to alter the boundaries to try out different solutions?

:::{.callout-note}
There are other ways in which you may get the boundaries.

- You may be able to find a shapefile, geojson or geopackage file defining the boundaries.
- You may draw the boundaries in another tool, like
:::



## Our region

We're going to work with our Birmingham region again. We first worked with this in the section of the book covering travel times; we may return to this travel time data in a later chapter of this part.

To start with, let's just visualise our wider region.

```{python}
import geopandas

lsoa_geojson_path = 'https://github.com/hsma-programme/h6_3c_interactive_plots_travel/raw/main/h6_3c_interactive_plots_travel/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson'

lsoa_boundaries = geopandas.read_file(lsoa_geojson_path)

```

Let's now filter this down to just our region.

```{python}
xmin, xmax = 370000, 420000
ymin, ymax = 250000, 310000

bham_region = lsoa_boundaries.cx[xmin:xmax, ymin:ymax]

bham_region.plot(
    figsize=(10,7),
    edgecolor='black',
    color="cyan"
    )
```

:::{.callout-tip}
There are other ways you could conduct this initial filtering - for example, using a list of LSOAs you need to cover, or a filter
:::

Straight away we can see that there are a very large number of LSOAs in our problem, with a lot of variation in the area of each LSOA.

We'll start with the split of our LSOAs by their overarching dispatch center.

We've been told that our dispatch centres are split based on the wider region name. Here, we'd visualised these names.

```{python}
import matplotlib.pyplot as plt

bham_region.head()

bham_region["region"] = bham_region["LSOA11NM"].str[:-5]

fig, ax = plt.subplots(figsize=(10,7))

ax = bham_region.plot(
    ax=ax,
    edgecolor='black',
    column="region",
    legend=True,
    cmap="tab20",
    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}
    )

# Add a dark background to our plotted region
ax.set_facecolor('black')
fig.patch.set_facecolor('black')

# Add a label per region for easier crossreferencing
# particularly where colours aren't very distinct
one_row_per_region = bham_region.groupby('region').head(1)

for x, y, label in zip(one_row_per_region.geometry.centroid.x, one_row_per_region.geometry.centroid.y, one_row_per_region.region):
    ax.annotate(label, xy=(x, y), xytext=(0, 0), textcoords="offset points", color="white",
    fontweight="bold")

ax.axis('off')

```


We've been told that the regions are as follows:

**Centre 1**

- *Dispatcher 1*: Telford and Wrekin; Shropshire
- *Dispatcher 2*: Cannock Chase; Lichfield; Tamworth
- *Dispatcher 3*: South Staffordshire; Walsall
- *Dispatcher 4*: Wolverhampton
- *Dispatcher 5*: Dudley; Sandwell
- *Dispatcher 6*: Birmingham
- *Dispatcher 7*: Solihull; North Warwickshire

**Centre 2**

- *Dispatcher 1*: Bromsgrove
- *Dispatcher 2*: Wyre Forest
- *Dispatcher 3*: Wychavon; Worcester
- *Dispatcher 4*: Malvern Hills; Herefordshire
- *Dispatcher 5*: Redditch; Stratford-on-Avon; Warwick

This information has been given to us in a dataframe; let's import and inspect this, then join it to our other data.


```{python}
import pandas as pd

boundary_allocations_df = pd.read_csv("boundary_allocations.csv")
boundary_allocations_df.head()
```

If we join this to our boundary data, with the geodataframe on the **left** of the merge, we can then access the data about the dispatchers and centers as variables we can plot.

First, let's do the join and view the resulting dataframer which will have the additional columns. As the original dataframe only contains separate columns for center and dispatcher, we will first create an additional column that joins the two together.

```{python}
bham_region = pd.merge(
    bham_region,
    boundary_allocations_df,
    left_on="region",
    right_on="Region",
    how="left"
)

bham_region["centre_dispatcher"] = bham_region["Centre"].astype("str") + '-' + bham_region["Dispatcher"].astype("str")

bham_region.head()
```

Let's first just visualise the split across our dispatching centres by plotting the center column.

```{python}
ax = bham_region.plot(
    edgecolor='black',
    column="Centre",
    legend=True,
    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}
    )

ax.axis('off')

```

Then we'll visualise the split per dispatcher, using our new column to avoid issues with dispatcher numbers being duplicated across centres.

```{python}
ax = bham_region.plot(
    edgecolor='black',
    column="centre_dispatcher",
    legend=True,
    cmap="tab20",
    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}
    )

ax.axis('off')

```

Finally, let's demonstrate how we could overlay the plot by dispatcher with something that highlights the per-centre boundary as well.

To do this, we will have to merge all of the polygons into a single large polygon. This will give us a brand new dataframe with just two rows referencing the two large polygons; we will view this at the end.

*GenAI Alert - This code was modified from a suggested approach provided by ChatGPT*

```{python}
# Group by the specified column
grouped_centre_gdf = bham_region.groupby('Centre')

# Create a new GeoDataFrame for the boundaries of each group
boundary_list = []

for group_name, group in grouped_centre_gdf:
    # Combine the polygons in each group into one geometry
    combined_geometry = group.unary_union

    # Get the boundary of the combined geometry
    boundary = combined_geometry.boundary

    # Add the boundary geometry and the group name to the list
    boundary_list.append({'group': group_name, 'boundary': boundary})

# Create a GeoDataFrame from the list of boundaries
grouped_centre_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)

grouped_centre_gdf_boundary.head()
```

Finally, we'll repeat our per-dispatcher

```{python}
ax = bham_region.plot(
    edgecolor='black',
    column="centre_dispatcher",
    legend=True,
    cmap="tab20",
    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}
    )

grouped_centre_gdf_boundary.plot(
    edgecolor='red',
    ax=ax,
    linewidth=2
)

ax.axis('off')

```


## Bringing in historical demand data

Finally, let's bring in some historical demand data to see if we can spot any obvious issues.

First, so we can overlay both the centre boundaries and the per-dispatcher boundaries, we'll repeat our earlier process to create a geodataframe with a single row and a single polygon per dispatcher.

```{python}
# Group by the specified column
grouped_dispatcher_gdf = bham_region.groupby("centre_dispatcher")

# Create a new GeoDataFrame for the boundaries of each group
boundary_list = []

for group_name, group in grouped_dispatcher_gdf:
    # Combine the polygons in each group into one geometry
    combined_geometry = group.unary_union

    # Get the boundary of the combined geometry
    boundary = combined_geometry.boundary

    # Add the boundary geometry and the group name to the list
    boundary_list.append({'group': group_name, 'boundary': boundary})

# Create a GeoDataFrame from the list of boundaries
grouped_dispatcher_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)

grouped_dispatcher_gdf_boundary.head()
```



```{python}
#| echo: false
#| eval: false
# Generate a 'demand' dataset
import pandas as pd
import random
pop = pd.read_csv("pop_table_SAPE20DT1_mid2017_population_estimates.csv")
pop["All Ages"] = pop["All Ages"].str.replace(",", "").astype('int')
pop['demand'] = pop["All Ages"].apply(lambda x: x * random.uniform(0.03, 0.17))
pop['demand'] = pop['demand'].astype('int')
full_df = bham_region.merge(pop, left_on="LSOA11CD", right_on="Area Codes", how="left")
#full_df[["LSOA11CD", "All Ages", "demand"]].rename(columns={"All Ages": "population"}).to_csv("demand_pop_bham.csv",  index=False)
```

```{python}
demand = pd.read_csv("demand_pop_bham.csv")

bham_region = bham_region.merge(demand, on="LSOA11CD")

ax = bham_region.plot(
    edgecolor='black',
    column="demand",
    cmap="Blues",
    legend=True,
    linewidth=0.3
    )

grouped_dispatcher_gdf_boundary.plot(
    edgecolor='purple',
    ax=ax,
    linewidth=1.5
)

grouped_centre_gdf_boundary.plot(
    edgecolor='red',
    ax=ax,
    linewidth=2.5
)

ax.axis('off')
```

## Looking at the current balance of incidents across the region

The demand dataset provided gives us the total number of incidents our dispatchers have dealt with per region per year. Let's do a bit of merging and exploratory data analysis to see how this varied historically, and so we can start to think about what would be a target level of demand for each region.

First let's look at the per-centre rates.

```{python}
grouped_by_centre = bham_region.groupby('Centre')[['demand']].sum()
grouped_by_centre['difference_from_average'] = (grouped_by_centre['demand'] - grouped_by_centre['demand'].mean()).astype('int')
grouped_by_centre
```

And now by dispatcher

```{python}
grouped_by_dispatcher = bham_region.groupby('centre_dispatcher')[['demand']].sum()
mean_demand = grouped_by_dispatcher['demand'].mean()
print(f"The demand, averaged across {len(bham_region['centre_dispatcher'].unique())} regions, is {mean_demand:.0f} incidents per year")
```

```{python}
grouped_by_dispatcher['difference_from_mean'] = (grouped_by_dispatcher['demand'] - mean_demand).astype('int')
grouped_by_dispatcher
```

```{python}
print(f"The average difference from the mean across all regions is {abs(grouped_by_dispatcher['difference_from_mean']).mean():.1f}")
```

```{python}
import plotly.express as px

px.bar(grouped_by_dispatcher.reset_index(), x="centre_dispatcher", y="difference_from_mean")
```

No wonder our dispatchers are struggling - there are huge discrepancies in the demand they have been responsible for.

So what are we going to do about it?

Unlike in our travel time location work in the location allocation chapter, where we initially focussed on minimize the average travel time or population-weighted travel time, here we instead want to minimize the **difference** between the demand for each region going forward - so let's move onto the next chapter and explore how we will do that.
