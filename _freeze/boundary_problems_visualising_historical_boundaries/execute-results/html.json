{
  "hash": "47f8eb1b2cd064e64182e34e6478e80b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Loading and Visualising the Historical Boundaries\"\nformat: html\n---\n\nLet's imagine we've been told that the historical boundaries have been based on groups of LSOAs. We've been given a list of the LSOAs that belong to each dispatcher, but we only have a standard file of all LSOAs in our region. How can we turn our lists of LSOAs and this file into something to help us visualise the boundaries, and later start to alter the boundaries to try out different solutions?\n\n:::{.callout-note}\nThere are other ways in which you may get the boundaries.\n\n- You may be able to find a shapefile, geojson or geopackage file defining the boundaries.\n- You may draw the boundaries in another tool, like\n:::\n\n\n\n## Our region\n\nWe're going to work with our Birmingham region again. We first worked with this in the section of the book covering travel times; we may return to this travel time data in a later chapter of this part.\n\nTo start with, let's just visualise our wider region.\n\n::: {#7d3884a9 .cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas\n\nlsoa_geojson_path = 'https://github.com/hsma-programme/h6_3c_interactive_plots_travel/raw/main/h6_3c_interactive_plots_travel/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson'\n\nlsoa_boundaries = geopandas.read_file(lsoa_geojson_path)\n```\n:::\n\n\nLet's now filter this down to just our region.\n\n::: {#d213b6b5 .cell execution_count=2}\n``` {.python .cell-code}\nxmin, xmax = 370000, 420000\nymin, ymax = 250000, 310000\n\nbham_region = lsoa_boundaries.cx[xmin:xmax, ymin:ymax]\n\nbham_region.plot(\n    figsize=(10,7),\n    edgecolor='black',\n    color=\"cyan\"\n    )\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_visualising_historical_boundaries_files/figure-html/cell-3-output-1.png){width=579 height=559}\n:::\n:::\n\n\n:::{.callout-tip}\nThere are other ways you could conduct this initial filtering - for example, using a list of LSOAs you need to cover, or a filter\n:::\n\nStraight away we can see that there are a very large number of LSOAs in our problem, with a lot of variation in the area of each LSOA.\n\nWe'll start with the split of our LSOAs by their overarching dispatch center.\n\nWe've been told that our dispatch centres are split based on the wider region name. Here, we'd visualised these names.\n\n::: {#9588e5d3 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nbham_region.head()\n\nbham_region[\"region\"] = bham_region[\"LSOA11NM\"].str[:-5]\n\nfig, ax = plt.subplots(figsize=(10,7))\n\nax = bham_region.plot(\n    ax=ax,\n    edgecolor='black',\n    column=\"region\",\n    legend=True,\n    cmap=\"tab20\",\n    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}\n    )\n\n# Add a dark background to our plotted region\nax.set_facecolor('black')\nfig.patch.set_facecolor('black')\n\n# Add a label per region for easier crossreferencing\n# particularly where colours aren't very distinct\none_row_per_region = bham_region.groupby('region').head(1)\n\nfor x, y, label in zip(one_row_per_region.geometry.centroid.x, one_row_per_region.geometry.centroid.y, one_row_per_region.region):\n    ax.annotate(label, xy=(x, y), xytext=(0, 0), textcoords=\"offset points\", color=\"white\",\n    fontweight=\"bold\")\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/sammi/.local/lib/python3.10/site-packages/geopandas/geodataframe.py:1528: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_visualising_historical_boundaries_files/figure-html/cell-4-output-2.png){width=794 height=537}\n:::\n:::\n\n\nWe've been told that the regions are as follows:\n\n**Centre 1**\n\n- *Dispatcher 1*: Telford and Wrekin; Shropshire\n- *Dispatcher 2*: Cannock Chase; Lichfield; Tamworth\n- *Dispatcher 3*: South Staffordshire; Walsall\n- *Dispatcher 4*: Wolverhampton\n- *Dispatcher 5*: Dudley; Sandwell\n- *Dispatcher 6*: Birmingham\n- *Dispatcher 7*: Solihull; North Warwickshire\n\n**Centre 2**\n\n- *Dispatcher 1*: Bromsgrove\n- *Dispatcher 2*: Wyre Forest\n- *Dispatcher 3*: Wychavon; Worcester\n- *Dispatcher 4*: Malvern Hills; Herefordshire\n- *Dispatcher 5*: Redditch; Stratford-on-Avon; Warwick\n\nThis information has been given to us in a dataframe; let's import and inspect this, then join it to our other data.\n\n::: {#35c92ff2 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\n\nboundary_allocations_df = pd.read_csv(\"boundary_allocations.csv\")\nboundary_allocations_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Region</th>\n      <th>Centre</th>\n      <th>Dispatcher</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Telford and Wrekin</td>\n      <td>Centre 1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Shropshire</td>\n      <td>Centre 1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Cannock Chase</td>\n      <td>Centre 1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lichfield</td>\n      <td>Centre 1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Tamworth</td>\n      <td>Centre 1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf we join this to our boundary data, with the geodataframe on the **left** of the merge, we can then access the data about the dispatchers and centers as variables we can plot.\n\nFirst, let's do the join and view the resulting dataframer which will have the additional columns. As the original dataframe only contains separate columns for center and dispatcher, we will first create an additional column that joins the two together.\n\n::: {#68249ca0 .cell execution_count=5}\n``` {.python .cell-code}\nbham_region = pd.merge(\n    bham_region,\n    boundary_allocations_df,\n    left_on=\"region\",\n    right_on=\"Region\",\n    how=\"left\"\n)\n\nbham_region[\"centre_dispatcher\"] = bham_region[\"Centre\"].astype(\"str\") + '-' + bham_region[\"Dispatcher\"].astype(\"str\")\n\nbham_region.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FID</th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>BNG_E</th>\n      <th>BNG_N</th>\n      <th>LONG</th>\n      <th>LAT</th>\n      <th>GlobalID</th>\n      <th>geometry</th>\n      <th>region</th>\n      <th>Region</th>\n      <th>Centre</th>\n      <th>Dispatcher</th>\n      <th>centre_dispatcher</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8649</td>\n      <td>E01008881</td>\n      <td>Birmingham 067A</td>\n      <td>Birmingham 067A</td>\n      <td>412690</td>\n      <td>285438</td>\n      <td>-1.81463</td>\n      <td>52.46675</td>\n      <td>f79cd8fb-0cf2-4c84-b07c-55bffcf379bb</td>\n      <td>POLYGON ((413040.413 285809.794, 413145.440 28...</td>\n      <td>Birmingham</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8650</td>\n      <td>E01008882</td>\n      <td>Birmingham 066A</td>\n      <td>Birmingham 066A</td>\n      <td>411772</td>\n      <td>285390</td>\n      <td>-1.82814</td>\n      <td>52.46634</td>\n      <td>e7835311-f105-4c92-acae-ecd5255ce534</td>\n      <td>POLYGON ((412233.657 285480.231, 412255.373 28...</td>\n      <td>Birmingham</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8651</td>\n      <td>E01008883</td>\n      <td>Birmingham 078A</td>\n      <td>Birmingham 078A</td>\n      <td>412121</td>\n      <td>285001</td>\n      <td>-1.82302</td>\n      <td>52.46283</td>\n      <td>29dbcbc2-4a29-4bb1-addb-42b37d91c647</td>\n      <td>POLYGON ((412775.838 285204.808, 412575.845 28...</td>\n      <td>Birmingham</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8652</td>\n      <td>E01008884</td>\n      <td>Birmingham 078B</td>\n      <td>Birmingham 078B</td>\n      <td>411241</td>\n      <td>284712</td>\n      <td>-1.83598</td>\n      <td>52.46025</td>\n      <td>df5a2350-a102-4ecc-b028-5a0bbeded198</td>\n      <td>POLYGON ((411803.096 284902.674, 411563.054 28...</td>\n      <td>Birmingham</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8653</td>\n      <td>E01008885</td>\n      <td>Birmingham 076A</td>\n      <td>Birmingham 076A</td>\n      <td>413207</td>\n      <td>284818</td>\n      <td>-1.80704</td>\n      <td>52.46116</td>\n      <td>13a855fc-fa09-42a5-a05e-947fcd141ce4</td>\n      <td>POLYGON ((413417.353 284803.764, 413034.282 28...</td>\n      <td>Birmingham</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's first just visualise the split across our dispatching centres by plotting the center column.\n\n::: {#830da0f3 .cell execution_count=6}\n``` {.python .cell-code}\nax = bham_region.plot(\n    edgecolor='black',\n    column=\"Centre\",\n    legend=True,\n    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_visualising_historical_boundaries_files/figure-html/cell-7-output-1.png){width=553 height=389}\n:::\n:::\n\n\nThen we'll visualise the split per dispatcher, using our new column to avoid issues with dispatcher numbers being duplicated across centres.\n\n::: {#00b84a17 .cell execution_count=7}\n``` {.python .cell-code}\nax = bham_region.plot(\n    edgecolor='black',\n    column=\"centre_dispatcher\",\n    legend=True,\n    cmap=\"tab20\",\n    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_visualising_historical_boundaries_files/figure-html/cell-8-output-1.png){width=566 height=389}\n:::\n:::\n\n\nFinally, let's demonstrate how we could overlay the plot by dispatcher with something that highlights the per-centre boundary as well.\n\nTo do this, we will have to merge all of the polygons into a single large polygon. This will give us a brand new dataframe with just two rows referencing the two large polygons; we will view this at the end.\n\n*GenAI Alert - This code was modified from a suggested approach provided by ChatGPT*\n\n::: {#dff0b5ef .cell execution_count=8}\n``` {.python .cell-code}\n# Group by the specified column\ngrouped_centre_gdf = bham_region.groupby('Centre')\n\n# Create a new GeoDataFrame for the boundaries of each group\nboundary_list = []\n\nfor group_name, group in grouped_centre_gdf:\n    # Combine the polygons in each group into one geometry\n    combined_geometry = group.unary_union\n\n    # Get the boundary of the combined geometry\n    boundary = combined_geometry.boundary\n\n    # Add the boundary geometry and the group name to the list\n    boundary_list.append({'group': group_name, 'boundary': boundary})\n\n# Create a GeoDataFrame from the list of boundaries\ngrouped_centre_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)\n\ngrouped_centre_gdf_boundary.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>group</th>\n      <th>boundary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 1</td>\n      <td>MULTILINESTRING ((366838.095 273147.999, 36728...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 2</td>\n      <td>MULTILINESTRING ((376328.508 242672.351, 37647...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFinally, we'll repeat our per-dispatcher\n\n::: {#f05e5bc0 .cell execution_count=9}\n``` {.python .cell-code}\nax = bham_region.plot(\n    edgecolor='black',\n    column=\"centre_dispatcher\",\n    legend=True,\n    cmap=\"tab20\",\n    legend_kwds={'loc':'center left', 'bbox_to_anchor':(1.2, 0.5)}\n    )\n\ngrouped_centre_gdf_boundary.plot(\n    edgecolor='red',\n    ax=ax,\n    linewidth=2\n)\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_visualising_historical_boundaries_files/figure-html/cell-10-output-1.png){width=566 height=389}\n:::\n:::\n\n\n## Bringing in historical demand data\n\nFinally, let's bring in some historical demand data to see if we can spot any obvious issues.\n\nFirst, so we can overlay both the centre boundaries and the per-dispatcher boundaries, we'll repeat our earlier process to create a geodataframe with a single row and a single polygon per dispatcher.\n\n::: {#0bcc3c23 .cell execution_count=10}\n``` {.python .cell-code}\n# Group by the specified column\ngrouped_dispatcher_gdf = bham_region.groupby(\"centre_dispatcher\")\n\n# Create a new GeoDataFrame for the boundaries of each group\nboundary_list = []\n\nfor group_name, group in grouped_dispatcher_gdf:\n    # Combine the polygons in each group into one geometry\n    combined_geometry = group.unary_union\n\n    # Get the boundary of the combined geometry\n    boundary = combined_geometry.boundary\n\n    # Add the boundary geometry and the group name to the list\n    boundary_list.append({'group': group_name, 'boundary': boundary})\n\n# Create a GeoDataFrame from the list of boundaries\ngrouped_dispatcher_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)\n\ngrouped_dispatcher_gdf_boundary.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>group</th>\n      <th>boundary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 1-1</td>\n      <td>MULTILINESTRING ((368935.969 274516.594, 36824...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 1-2</td>\n      <td>LINESTRING (412258.535 300984.197, 411756.668 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Centre 1-3</td>\n      <td>LINESTRING (381775.908 282326.500, 380577.001 ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Centre 1-4</td>\n      <td>LINESTRING (388885.341 295185.385, 388630.406 ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Centre 1-5</td>\n      <td>LINESTRING (388258.095 285110.427, 388666.258 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\n\n::: {#04795a71 .cell execution_count=12}\n``` {.python .cell-code}\ndemand = pd.read_csv(\"demand_pop_bham.csv\")\n\nbham_region = bham_region.merge(demand, on=\"LSOA11CD\")\n\nax = bham_region.plot(\n    edgecolor='black',\n    column=\"demand\",\n    cmap=\"Blues\",\n    legend=True,\n    linewidth=0.3\n    )\n\ngrouped_dispatcher_gdf_boundary.plot(\n    edgecolor='purple',\n    ax=ax,\n    linewidth=1.5\n)\n\ngrouped_centre_gdf_boundary.plot(\n    edgecolor='red',\n    ax=ax,\n    linewidth=2.5\n)\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_visualising_historical_boundaries_files/figure-html/cell-13-output-1.png){width=450 height=389}\n:::\n:::\n\n\n## Looking at the current balance of incidents across the region\n\nThe demand dataset provided gives us the total number of incidents our dispatchers have dealt with per region per year. Let's do a bit of merging and exploratory data analysis to see how this varied historically, and so we can start to think about what would be a target level of demand for each region.\n\nFirst let's look at the per-centre rates.\n\n::: {#004ccd5d .cell execution_count=13}\n``` {.python .cell-code}\ngrouped_by_centre = bham_region.groupby('Centre')[['demand']].sum()\ngrouped_by_centre['difference_from_average'] = (grouped_by_centre['demand'] - grouped_by_centre['demand'].mean()).astype('int')\ngrouped_by_centre\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>demand</th>\n      <th>difference_from_average</th>\n    </tr>\n    <tr>\n      <th>Centre</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Centre 1</th>\n      <td>277146</td>\n      <td>110663</td>\n    </tr>\n    <tr>\n      <th>Centre 2</th>\n      <td>55820</td>\n      <td>-110663</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd now by dispatcher\n\n::: {#17415d85 .cell execution_count=14}\n``` {.python .cell-code}\ngrouped_by_dispatcher = bham_region.groupby('centre_dispatcher')[['demand']].sum()\nmean_demand = grouped_by_dispatcher['demand'].mean()\nprint(f\"The demand, averaged across {len(bham_region['centre_dispatcher'].unique())} regions, is {mean_demand:.0f} incidents per year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe demand, averaged across 12 regions, is 27747 incidents per year\n```\n:::\n:::\n\n\n::: {#b376a821 .cell execution_count=15}\n``` {.python .cell-code}\ngrouped_by_dispatcher['difference_from_mean'] = (grouped_by_dispatcher['demand'] - mean_demand).astype('int')\ngrouped_by_dispatcher\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>demand</th>\n      <th>difference_from_mean</th>\n    </tr>\n    <tr>\n      <th>centre_dispatcher</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Centre 1-1</th>\n      <td>7600</td>\n      <td>-20147</td>\n    </tr>\n    <tr>\n      <th>Centre 1-2</th>\n      <td>12825</td>\n      <td>-14922</td>\n    </tr>\n    <tr>\n      <th>Centre 1-3</th>\n      <td>36084</td>\n      <td>8336</td>\n    </tr>\n    <tr>\n      <th>Centre 1-4</th>\n      <td>26690</td>\n      <td>-1057</td>\n    </tr>\n    <tr>\n      <th>Centre 1-5</th>\n      <td>63379</td>\n      <td>35631</td>\n    </tr>\n    <tr>\n      <th>Centre 1-6</th>\n      <td>109387</td>\n      <td>81639</td>\n    </tr>\n    <tr>\n      <th>Centre 1-7</th>\n      <td>21181</td>\n      <td>-6566</td>\n    </tr>\n    <tr>\n      <th>Centre 2-1</th>\n      <td>9630</td>\n      <td>-18117</td>\n    </tr>\n    <tr>\n      <th>Centre 2-2</th>\n      <td>9429</td>\n      <td>-18318</td>\n    </tr>\n    <tr>\n      <th>Centre 2-3</th>\n      <td>16699</td>\n      <td>-11048</td>\n    </tr>\n    <tr>\n      <th>Centre 2-4</th>\n      <td>4217</td>\n      <td>-23530</td>\n    </tr>\n    <tr>\n      <th>Centre 2-5</th>\n      <td>15845</td>\n      <td>-11902</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#72e92db3 .cell execution_count=16}\n``` {.python .cell-code}\nprint(f\"The average difference from the mean across all regions is {abs(grouped_by_dispatcher['difference_from_mean']).mean():.1f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe average difference from the mean across all regions is 20934.4\n```\n:::\n:::\n\n\n::: {#7582224d .cell execution_count=17}\n``` {.python .cell-code}\nimport plotly.express as px\n\npx.bar(grouped_by_dispatcher.reset_index(), x=\"centre_dispatcher\", y=\"difference_from_mean\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"6260ff59-417e-4188-bc49-74ed76f245be\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"6260ff59-417e-4188-bc49-74ed76f245be\")) {                    Plotly.newPlot(                        \"6260ff59-417e-4188-bc49-74ed76f245be\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"centre_dispatcher=%{x}\\u003cbr\\u003edifference_from_mean=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"Centre 1-1\",\"Centre 1-2\",\"Centre 1-3\",\"Centre 1-4\",\"Centre 1-5\",\"Centre 1-6\",\"Centre 1-7\",\"Centre 2-1\",\"Centre 2-2\",\"Centre 2-3\",\"Centre 2-4\",\"Centre 2-5\"],\"xaxis\":\"x\",\"y\":[-20147,-14922,8336,-1057,35631,81639,-6566,-18117,-18318,-11048,-23530,-11902],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"centre_dispatcher\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"difference_from_mean\"}},\"legend\":{\"tracegroupgap\":0},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('6260ff59-417e-4188-bc49-74ed76f245be');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nNo wonder our dispatchers are struggling - there are huge discrepancies in the demand they have been responsible for.\n\nSo what are we going to do about it?\n\nUnlike in our travel time location work in the location allocation chapter, where we initially focussed on minimize the average travel time or population-weighted travel time, here we instead want to minimize the **difference** between the demand for each region going forward - so let's move onto the next chapter and explore how we will do that.\n\n",
    "supporting": [
      "boundary_problems_visualising_historical_boundaries_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}