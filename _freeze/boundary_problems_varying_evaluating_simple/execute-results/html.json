{
  "hash": "fc5c39b06f1972de4f938be84ca4e823",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Boundary Problems - Creating and Evaluating Simple Solutions\"\nformat: html\n---\n\n\n\n\n## Generating and representing new boundaries\n\nWhen we come to modifying our existing boundaries, we are going to generate a large set of random new boundaries and test them.\n\n::: callout-note\nRemember - in our problem statement, we specified that boundaries in our problem cannot cross through the middle of an LSOA. You would need to apply a different approach if this is not true in your case.\n:::\n\n::: callout-tip\nIf you have a series of pre-selected solutions to try, the code in the following sections can be adapted to use those solutions rather than the randomly-generated solutions.\n:::\n\nFirst, we will define the LSOAs that each LSOA has a continuous boundary with. These will form part of a possible series of solutions. To do this, we'll be using the `.touches` method in geopandas.\n\nIn this case, a solution must meet a criteria\n\n-   every polygon must be assigned to a dispatcher\n-   no polygon can be assigned to more than one dispatcher\n-   dispatcher boundaries must be continuous; regions belonging to a dispatcher cannot be entirely separated from the rest of their dispatch area\n\nAt this point, we are not trying to do anything to balance our objectives like equalising the number of calls they are going to; instead, we are simply coming up with possibilities. We'll actually test them out in the next chapter.\n\n### The Process\n\nTo create a solution that scales well to any number of dispatchers, we will have the dispatchers start with a single randomly-selected patch from their existing location (though we will also code in an option to always start from a single specified point).\n\nThen, on each 'turn', they will randomly choose another patch from the patches that share a boundary with the first patch. There is a small (adjustable) possibility on each turn that they will not opt to take a turn; this will be part of our strategy to ensure that not every dispatcher ends up with solutions containing exactly the same number of regions.\n\nOn each subsequent turn, they will randomly select another region that touches any part of their existing region. If the region that is selected is a region that they already have in their 'patch', or a region that is already 'owned' by another 'player', then their 'go' ends without them gaining any additional territory. However, if they have randomly selected an 'unowned' spot, this is then added to their\n\n\n\n\n\nHere's an example of one of our 'walks' building up. This only shows the first few steps, but eventually it would continue until the whole patch was covered, following the same pattern.\n\nHere, player 1's patches are red, and player 2's are purple. Light blue patches are those not yet owned by either player.\n\n![](images/walk.gif)\n\nThis just showed us building up two patches, but more patches could be built with a larger number of 'players', with a third player being represented in yellow here.\n\n\n\n![](images/walk_2.gif)\n\n::: callout-tip\nRemember - due to the randomness we will introduce in multiple ways, each generated solution will be slightly different.\n:::\n\n::: callout-tip\nAgain, this is not the only way we can start to generate solutions here!\n\nThis is one of many approaches you could take.\n:::\n\n::: callout-note\nWhen we come to apply a evolutionary or genetic algorithm approach to this problem in a later chapter, we will need to change how we represent our solutions; for now, however, we can just put together lists of LSOAs that will belong to each dispatcher.\n:::\n\nLet's write and apply this function to generate a series of randomly generated solutions for our problem, which we will subsequently move on to evaluating.\n\n### Our starting dataframe\n\nTo start with, let's load our boundary data back in. Head back to the previous chapter if any of this feels unfamiliar!\n\n::: {#e12badb4 .cell execution_count=4}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas\n\nlsoa_geojson_path = 'https://github.com/hsma-programme/h6_3c_interactive_plots_travel/raw/main/h6_3c_interactive_plots_travel/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson'\n\nlsoa_boundaries = geopandas.read_file(lsoa_geojson_path)\n\nxmin, xmax = 370000, 420000\nymin, ymax = 250000, 310000\n\nbham_region = lsoa_boundaries.cx[xmin:xmax, ymin:ymax]\n\nbham_region[\"region\"] = bham_region[\"LSOA11NM\"].str[:-5]\n\nbham_region.plot(\n    figsize=(10,7),\n    edgecolor='black',\n    color=\"cyan\"\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/sammi/.local/lib/python3.10/site-packages/geopandas/geodataframe.py:1528: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_varying_evaluating_simple_files/figure-html/cell-5-output-2.png){width=579 height=559}\n:::\n:::\n\n\n### Getting the Neighbours\n\nBefore we start worrying about the allocations, we first want to generate a column that contains a list of all of the neighbours of a given cell. This will be a lot more efficient than trying to calculate the neighbours from scratch each time we want to pick a new one - and it's not like the neighbours will change.\n\n*GenAI Alert - This code was modified from a suggested approach provided by ChatGPT*\n\n::: {#918f7026 .cell execution_count=5}\n``` {.python .cell-code}\ndef add_neighbors_column(gdf):\n    \"\"\"\n    Adds a column to the GeoDataFrame containing lists of indices of neighboring polygons\n    based on the 'touches' method.\n    \"\"\"\n    gdf = gdf.copy()\n    neighbors = []\n    for idx, geom in gdf.geometry.items():\n        touching = gdf[gdf.geometry.touches(geom)][\"LSOA11CD\"].tolist()\n        neighbors.append(touching)\n\n    gdf[\"neighbors\"] = neighbors\n    return gdf\n\nbham_region = add_neighbors_column(bham_region)\n\nbham_region[['LSOA11CD', 'LSOA11NM', 'LSOA11NMW', 'geometry', 'neighbors']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>geometry</th>\n      <th>neighbors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8648</th>\n      <td>E01008881</td>\n      <td>Birmingham 067A</td>\n      <td>Birmingham 067A</td>\n      <td>POLYGON ((413040.413 285809.794, 413145.440 28...</td>\n      <td>[E01008882, E01008883, E01008885, E01008886, E...</td>\n    </tr>\n    <tr>\n      <th>8649</th>\n      <td>E01008882</td>\n      <td>Birmingham 066A</td>\n      <td>Birmingham 066A</td>\n      <td>POLYGON ((412233.657 285480.231, 412255.373 28...</td>\n      <td>[E01008881, E01008883, E01008884, E01008898, E...</td>\n    </tr>\n    <tr>\n      <th>8650</th>\n      <td>E01008883</td>\n      <td>Birmingham 078A</td>\n      <td>Birmingham 078A</td>\n      <td>POLYGON ((412775.838 285204.808, 412575.845 28...</td>\n      <td>[E01008881, E01008882, E01008884, E01008886, E...</td>\n    </tr>\n    <tr>\n      <th>8651</th>\n      <td>E01008884</td>\n      <td>Birmingham 078B</td>\n      <td>Birmingham 078B</td>\n      <td>POLYGON ((411803.096 284902.674, 411563.054 28...</td>\n      <td>[E01008882, E01008883, E01008887, E01008889, E...</td>\n    </tr>\n    <tr>\n      <th>8652</th>\n      <td>E01008885</td>\n      <td>Birmingham 076A</td>\n      <td>Birmingham 076A</td>\n      <td>POLYGON ((413417.353 284803.764, 413034.282 28...</td>\n      <td>[E01008881, E01008886, E01008888, E01009521]</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#5632cf9b .cell execution_count=6}\n``` {.python .cell-code}\nboundary_allocations_df = pd.read_csv(\"boundary_allocations.csv\")\nboundary_allocations_df.head()\n\n\nbham_region = pd.merge(\n    bham_region,\n    boundary_allocations_df,\n    left_on=\"region\",\n    right_on=\"Region\",\n    how=\"left\"\n)\n\nbham_region[\"centre_dispatcher\"] = bham_region[\"Centre\"].astype(\"str\") + '-' + bham_region[\"Dispatcher\"].astype(\"str\")\n\nbham_region\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FID</th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>BNG_E</th>\n      <th>BNG_N</th>\n      <th>LONG</th>\n      <th>LAT</th>\n      <th>GlobalID</th>\n      <th>geometry</th>\n      <th>region</th>\n      <th>neighbors</th>\n      <th>Region</th>\n      <th>Centre</th>\n      <th>Dispatcher</th>\n      <th>centre_dispatcher</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8649</td>\n      <td>E01008881</td>\n      <td>Birmingham 067A</td>\n      <td>Birmingham 067A</td>\n      <td>412690</td>\n      <td>285438</td>\n      <td>-1.81463</td>\n      <td>52.46675</td>\n      <td>f79cd8fb-0cf2-4c84-b07c-55bffcf379bb</td>\n      <td>POLYGON ((413040.413 285809.794, 413145.440 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008882, E01008883, E01008885, E01008886, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8650</td>\n      <td>E01008882</td>\n      <td>Birmingham 066A</td>\n      <td>Birmingham 066A</td>\n      <td>411772</td>\n      <td>285390</td>\n      <td>-1.82814</td>\n      <td>52.46634</td>\n      <td>e7835311-f105-4c92-acae-ecd5255ce534</td>\n      <td>POLYGON ((412233.657 285480.231, 412255.373 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008881, E01008883, E01008884, E01008898, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8651</td>\n      <td>E01008883</td>\n      <td>Birmingham 078A</td>\n      <td>Birmingham 078A</td>\n      <td>412121</td>\n      <td>285001</td>\n      <td>-1.82302</td>\n      <td>52.46283</td>\n      <td>29dbcbc2-4a29-4bb1-addb-42b37d91c647</td>\n      <td>POLYGON ((412775.838 285204.808, 412575.845 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008881, E01008882, E01008884, E01008886, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8652</td>\n      <td>E01008884</td>\n      <td>Birmingham 078B</td>\n      <td>Birmingham 078B</td>\n      <td>411241</td>\n      <td>284712</td>\n      <td>-1.83598</td>\n      <td>52.46025</td>\n      <td>df5a2350-a102-4ecc-b028-5a0bbeded198</td>\n      <td>POLYGON ((411803.096 284902.674, 411563.054 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008882, E01008883, E01008887, E01008889, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8653</td>\n      <td>E01008885</td>\n      <td>Birmingham 076A</td>\n      <td>Birmingham 076A</td>\n      <td>413207</td>\n      <td>284818</td>\n      <td>-1.80704</td>\n      <td>52.46116</td>\n      <td>13a855fc-fa09-42a5-a05e-947fcd141ce4</td>\n      <td>POLYGON ((413417.353 284803.764, 413034.282 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008881, E01008886, E01008888, E01009521]</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2006</th>\n      <td>32722</td>\n      <td>E01033646</td>\n      <td>Birmingham 031I</td>\n      <td>Birmingham 031I</td>\n      <td>410257</td>\n      <td>291057</td>\n      <td>-1.85027</td>\n      <td>52.51731</td>\n      <td>c7a17445-f800-41bc-86fb-cbeb9cde5d3f</td>\n      <td>POLYGON ((410651.278 291571.301, 410562.002 29...</td>\n      <td>Birmingham</td>\n      <td>[E01009000, E01009007, E01009013, E01009401, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>32723</td>\n      <td>E01033647</td>\n      <td>Birmingham 058E</td>\n      <td>Birmingham 058E</td>\n      <td>410473</td>\n      <td>286828</td>\n      <td>-1.84722</td>\n      <td>52.47929</td>\n      <td>7d745c12-8e35-404d-b96d-f2b3c3e92896</td>\n      <td>POLYGON ((410665.117 286998.178, 410753.991 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009194, E01009197, E01009198, E01009331, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>32724</td>\n      <td>E01033648</td>\n      <td>Birmingham 084F</td>\n      <td>Birmingham 084F</td>\n      <td>408315</td>\n      <td>283740</td>\n      <td>-1.87907</td>\n      <td>52.45157</td>\n      <td>ed410ea7-fc12-42bd-8604-4a54fab04b9f</td>\n      <td>POLYGON ((408199.966 283979.204, 408378.884 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009376, E01009377, E01009383, E01009384, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>32725</td>\n      <td>E01033649</td>\n      <td>Birmingham 058F</td>\n      <td>Birmingham 058F</td>\n      <td>410530</td>\n      <td>287142</td>\n      <td>-1.84637</td>\n      <td>52.48211</td>\n      <td>a8880f7b-a92b-43da-bf8d-b673ed85c526</td>\n      <td>POLYGON ((410728.297 287314.945, 410665.117 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009194, E01009195, E01009197, E01033647]</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>32726</td>\n      <td>E01033650</td>\n      <td>Birmingham 077F</td>\n      <td>Birmingham 077F</td>\n      <td>409357</td>\n      <td>284898</td>\n      <td>-1.86370</td>\n      <td>52.46196</td>\n      <td>2868f08d-b3bd-4e47-b985-ce8484e582f3</td>\n      <td>POLYGON ((409575.733 284753.232, 409442.619 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009339, E01009363, E01009368, E01009371, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows × 16 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Making a dictionary of the existing allocations\n\nFirst, let's make ourselves a dictionary. In this dictionary, the keys will be the centre/dispatcher, and the values will be a list of all LSOAs that currently belong to that dispatcher.\n\n::: {#e719ff0f .cell execution_count=7}\n``` {.python .cell-code}\n# Get a list of the unique dispatchers\ndispatchers = bham_region['centre_dispatcher'].unique()\ndispatchers.sort()\n\ndispatcher_starting_allocation_dict = {}\n\nfor dispatcher in dispatchers:\n    dispatcher_allocation = bham_region[bham_region[\"centre_dispatcher\"] == dispatcher]\n\n    dispatcher_starting_allocation_dict[dispatcher] = dispatcher_allocation[\"LSOA11CD\"].unique()\n```\n:::\n\n\nLet's look at what that looks like for one of the dispatchers. Using this, we can access a full list of their LSOAs whenever we need it.\n\n::: {#8a9d2fa6 .cell execution_count=8}\n``` {.python .cell-code}\ndispatcher_starting_allocation_dict['Centre 2-3']\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray(['E01032279', 'E01032280', 'E01032281', 'E01032282', 'E01032283',\n       'E01032284', 'E01032285', 'E01032286', 'E01032287', 'E01032288',\n       'E01032289', 'E01032290', 'E01032292', 'E01032294', 'E01032295',\n       'E01032296', 'E01032297', 'E01032298', 'E01032299', 'E01032300',\n       'E01032301', 'E01032302', 'E01032303', 'E01032304', 'E01032305',\n       'E01032306', 'E01032307', 'E01032308', 'E01032309', 'E01032310',\n       'E01032311', 'E01032312', 'E01032313', 'E01032314', 'E01032315',\n       'E01032316', 'E01032317', 'E01032318', 'E01032319', 'E01032320',\n       'E01032321', 'E01032322', 'E01032323', 'E01032324', 'E01032325',\n       'E01032326', 'E01032327', 'E01032328', 'E01032329', 'E01032330',\n       'E01032331', 'E01032332', 'E01032333', 'E01032334', 'E01032335',\n       'E01032336', 'E01032337', 'E01032338', 'E01032339', 'E01032345',\n       'E01032346', 'E01032354', 'E01032355', 'E01032357', 'E01032358',\n       'E01032359', 'E01032360', 'E01032361', 'E01032362', 'E01032363',\n       'E01032364', 'E01032365', 'E01032366', 'E01032367', 'E01032368',\n       'E01032369', 'E01032370', 'E01032371', 'E01032386', 'E01032387',\n       'E01032388', 'E01032389', 'E01032390', 'E01032392', 'E01032393',\n       'E01032394', 'E01032395', 'E01032399', 'E01032400', 'E01032401',\n       'E01032402', 'E01032403', 'E01032404', 'E01032410', 'E01032411',\n       'E01032414', 'E01032416', 'E01032417', 'E01033246', 'E01033247',\n       'E01033248', 'E01033249'], dtype=object)\n```\n:::\n:::\n\n\n::: callout-note\nTo start with, let's build up our random walk algorithm step-by-step. At the end of this section, we'll turn it into a reusable functions with some parameters to make it easier to use. After that, we'll work on building a reusable function to help us quickly evaluate each solution we generate.\n:::\n\n### Generating starting allocations\n\nThe first step will be to generate an initial starting point for each dispatcher.\n\nThere are a couple of different approaches we could take here - and maybe we'll give our eventual algorithm the option to pick from several options.\n\n-   *Option 1* - Use our new dictionary to select a random starting LSOA for each of our dispatchers from within their existing territories.\n-   *Option 2* - Start with the most central region of the existing regions for each dispatcher.\n-   *Option 3* - Provide each dispatcher with an entirely random starting point, regardless of the historical boundaries.\n\n*Option 1*\n\nWe could use our new dictionary to select a random starting LSOA for each of our dispatchers from within their existing territories. This will give us plenty of randomness - but we may find ourselves with walks that start very near the edge of our original patch, giving us very different boundaries to what existed before.\n\n::: {#d5827537 .cell execution_count=9}\n``` {.python .cell-code}\nimport random\n\nrandom_solution_starting_dict = {}\n\nfor key, value in dispatcher_starting_allocation_dict.items():\n\n    random_solution_starting_dict[key] = random.choice(value)\n\nrandom_solution_starting_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n{'Centre 1-1': 'E01014196',\n 'Centre 1-2': 'E01032900',\n 'Centre 1-3': 'E01010288',\n 'Centre 1-4': 'E01010517',\n 'Centre 1-5': 'E01009820',\n 'Centre 1-6': 'E01009422',\n 'Centre 1-7': 'E01031019',\n 'Centre 2-1': 'E01032173',\n 'Centre 2-2': 'E01032465',\n 'Centre 2-3': 'E01032294',\n 'Centre 2-4': 'E01032194',\n 'Centre 2-5': 'E01033251'}\n```\n:::\n:::\n\n\nLet's turn this into a reusable function, then visualise its functioning.\n\n::: {#81b93000 .cell execution_count=10}\n``` {.python .cell-code}\ndef create_random_starting_dict(input_dictionary):\n    random_solution_starting_dict = {}\n\n    for key, value in dispatcher_starting_allocation_dict.items():\n\n        random_solution_starting_dict[key] = random.choice(value)\n\n    return random_solution_starting_dict\n\ncreate_random_starting_dict(dispatcher_starting_allocation_dict)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n{'Centre 1-1': 'E01014106',\n 'Centre 1-2': 'E01029515',\n 'Centre 1-3': 'E01029664',\n 'Centre 1-4': 'E01010491',\n 'Centre 1-5': 'E01009991',\n 'Centre 1-6': 'E01009164',\n 'Centre 1-7': 'E01010160',\n 'Centre 2-1': 'E01032176',\n 'Centre 2-2': 'E01032442',\n 'Centre 2-3': 'E01032368',\n 'Centre 2-4': 'E01032179',\n 'Centre 2-5': 'E01032242'}\n```\n:::\n:::\n\n\nNow, let's generate some solutions and plot them.\n\nWe'll also be using a dataframe from the previous chapter - the code for this can be found in the expander if you want to revisit this.\n\n::: {.callout-tip collapse=\"true\"}\n# Click here to see the code for generating our dispatch boundaries dataframe\n\n::: {#db011bdf .cell execution_count=11}\n``` {.python .cell-code}\n# Group by the specified column\ngrouped_dispatcher_gdf = bham_region.groupby(\"centre_dispatcher\")\n\n# Create a new GeoDataFrame for the boundaries of each group\nboundary_list = []\n\nfor group_name, group in grouped_dispatcher_gdf:\n    # Combine the polygons in each group into one geometry\n    combined_geometry = group.unary_union\n\n    # Get the boundary of the combined geometry\n    boundary = combined_geometry.boundary\n\n    # Add the boundary geometry and the group name to the list\n    boundary_list.append({'group': group_name, 'boundary': boundary})\n\n# Create a GeoDataFrame from the list of boundaries\ngrouped_dispatcher_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)\n\ngrouped_dispatcher_gdf_boundary.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>group</th>\n      <th>boundary</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 1-1</td>\n      <td>MULTILINESTRING ((368935.969 274516.594, 36824...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 1-2</td>\n      <td>LINESTRING (412258.535 300984.197, 411756.668 ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Centre 1-3</td>\n      <td>LINESTRING (381775.908 282326.500, 380577.001 ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Centre 1-4</td>\n      <td>LINESTRING (388885.341 295185.385, 388630.406 ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Centre 1-5</td>\n      <td>LINESTRING (388258.095 285110.427, 388666.258 ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nSome of the regions are quite small, so it may be hard to see them all!\n\n::: {#fa065adc .cell execution_count=12}\n``` {.python .cell-code}\n# First, let's plot the outline of our entire region\nax = bham_region.plot(\n    figsize=(10,7),\n    edgecolor='black',\n    linewidth=0.5,\n    color=\"white\"\n    )\n\n# Let's use our new function to generate a series of random starting patches\nsol = create_random_starting_dict(dispatcher_starting_allocation_dict)\n\n# We can filter our existing dataframe of allocations to just the starting patches\nrandom_solution_start = bham_region[bham_region['LSOA11CD'].isin(sol.values())]\n\n# Finally, we plot those on the same plot, colouring by centre-dispatcher combo\nrandom_solution_start.plot(\n    ax=ax,\n    column=\"centre_dispatcher\",\n    legend=True\n)\n\n# Let's also visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"green\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_varying_evaluating_simple_files/figure-html/cell-13-output-1.png){width=579 height=559}\n:::\n:::\n\n\n*Option 2*\n\nAnother alternative is to start with the most central region of the existing regions for each dispatcher.\n\n::: {#41e3587c .cell execution_count=13}\n``` {.python .cell-code}\nfrom shapely.geometry import Point\n\ndef find_most_central_polygon(gdf):\n    \"\"\"\n    Finds the most central polygon in a GeoDataFrame based on centroid proximity to the mean centroid.\n    \"\"\"\n    # Compute centroids of individual polygons\n    gdf[\"centroid\"] = gdf.geometry.centroid\n\n    # Calculate the mean centroid (central point)\n    mean_centroid = gdf.geometry.unary_union.centroid\n\n    # Compute distances from each centroid to the mean centroid\n    gdf[\"distance_to_mean\"] = gdf[\"centroid\"].distance(mean_centroid)\n\n    # Find the polygon with the minimum distance\n    central_polygon = gdf.loc[gdf[\"distance_to_mean\"].idxmin()]\n\n    return central_polygon\n\ndef get_central_polygon_per_group(gdf, grouping_col):\n    return gdf.groupby(grouping_col, group_keys=False).apply(find_most_central_polygon).drop(columns=[\"centroid\", \"distance_to_mean\"])\n\nmost_central = get_central_polygon_per_group(bham_region, \"centre_dispatcher\")\nmost_central\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FID</th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>BNG_E</th>\n      <th>BNG_N</th>\n      <th>LONG</th>\n      <th>LAT</th>\n      <th>GlobalID</th>\n      <th>geometry</th>\n      <th>region</th>\n      <th>neighbors</th>\n      <th>Region</th>\n      <th>Centre</th>\n      <th>Dispatcher</th>\n      <th>centre_dispatcher</th>\n    </tr>\n    <tr>\n      <th>centre_dispatcher</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Centre 1-1</th>\n      <td>28095</td>\n      <td>E01028832</td>\n      <td>Shropshire 033A</td>\n      <td>Shropshire 033A</td>\n      <td>372082</td>\n      <td>293080</td>\n      <td>-2.41300</td>\n      <td>52.53487</td>\n      <td>945b5cd8-45bd-4f3a-8834-88082caa2473</td>\n      <td>POLYGON ((372799.246 293568.354, 372202.351 29...</td>\n      <td>Shropshire</td>\n      <td>[E01028828, E01028830, E01028833, E01028834, E...</td>\n      <td>Shropshire</td>\n      <td>Centre 1</td>\n      <td>1</td>\n      <td>Centre 1-1</td>\n    </tr>\n    <tr>\n      <th>Centre 1-2</th>\n      <td>28764</td>\n      <td>E01029518</td>\n      <td>Lichfield 007D</td>\n      <td>Lichfield 007D</td>\n      <td>411232</td>\n      <td>307750</td>\n      <td>-1.83534</td>\n      <td>52.66736</td>\n      <td>421455c3-c4b7-4505-880d-8412aa14c957</td>\n      <td>POLYGON ((412402.657 308666.999, 412311.329 30...</td>\n      <td>Lichfield</td>\n      <td>[E01029488, E01029512, E01029519, E01029520, E...</td>\n      <td>Lichfield</td>\n      <td>Centre 1</td>\n      <td>2</td>\n      <td>Centre 1-2</td>\n    </tr>\n    <tr>\n      <th>Centre 1-3</th>\n      <td>28875</td>\n      <td>E01029631</td>\n      <td>South Staffordshire 009E</td>\n      <td>South Staffordshire 009E</td>\n      <td>388142</td>\n      <td>301842</td>\n      <td>-2.17656</td>\n      <td>52.61423</td>\n      <td>6d0e4c4c-bf69-4f68-a086-46d1a80854d9</td>\n      <td>POLYGON ((387776.111 302749.666, 388831.796 30...</td>\n      <td>South Staffordshire</td>\n      <td>[E01010544, E01010546, E01029613, E01029615, E...</td>\n      <td>South Staffordshire</td>\n      <td>Centre 1</td>\n      <td>3</td>\n      <td>Centre 1-3</td>\n    </tr>\n    <tr>\n      <th>Centre 1-4</th>\n      <td>10215</td>\n      <td>E01010521</td>\n      <td>Wolverhampton 020F</td>\n      <td>Wolverhampton 020F</td>\n      <td>391688</td>\n      <td>299252</td>\n      <td>-2.12412</td>\n      <td>52.59101</td>\n      <td>5966f7f1-af15-4226-9d1e-6316101606b5</td>\n      <td>POLYGON ((391805.204 300349.956, 392207.285 29...</td>\n      <td>Wolverhampton</td>\n      <td>[E01010426, E01010443, E01010463, E01010464, E...</td>\n      <td>Wolverhampton</td>\n      <td>Centre 1</td>\n      <td>4</td>\n      <td>Centre 1-4</td>\n    </tr>\n    <tr>\n      <th>Centre 1-5</th>\n      <td>9743</td>\n      <td>E01010043</td>\n      <td>Sandwell 025B</td>\n      <td>Sandwell 025B</td>\n      <td>395995</td>\n      <td>288750</td>\n      <td>-2.06041</td>\n      <td>52.49665</td>\n      <td>3be670e2-fde7-4251-ad24-56335b4c30df</td>\n      <td>POLYGON ((396648.514 288801.684, 396670.147 28...</td>\n      <td>Sandwell</td>\n      <td>[E01009843, E01009871, E01009888, E01009890, E...</td>\n      <td>Sandwell</td>\n      <td>Centre 1</td>\n      <td>5</td>\n      <td>Centre 1-5</td>\n    </tr>\n    <tr>\n      <th>Centre 1-6</th>\n      <td>8940</td>\n      <td>E01009204</td>\n      <td>Birmingham 052E</td>\n      <td>Birmingham 052E</td>\n      <td>408607</td>\n      <td>287498</td>\n      <td>-1.87467</td>\n      <td>52.48535</td>\n      <td>e1aaf4f1-f7a4-4e98-9d74-855033a27584</td>\n      <td>POLYGON ((409131.178 287204.736, 408353.160 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009199, E01009201, E01009203, E01033561, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>Centre 1-7</th>\n      <td>9809</td>\n      <td>E01010109</td>\n      <td>Solihull 009A</td>\n      <td>Solihull 009A</td>\n      <td>418665</td>\n      <td>283710</td>\n      <td>-1.72677</td>\n      <td>52.45104</td>\n      <td>d03080c8-368a-46af-9fed-b27cc051518e</td>\n      <td>POLYGON ((419807.904 285425.582, 419899.498 28...</td>\n      <td>Solihull</td>\n      <td>[E01009318, E01009320, E01010108, E01010110, E...</td>\n      <td>Solihull</td>\n      <td>Centre 1</td>\n      <td>7</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>Centre 2-1</th>\n      <td>31345</td>\n      <td>E01032149</td>\n      <td>Bromsgrove 006D</td>\n      <td>Bromsgrove 006D</td>\n      <td>399455</td>\n      <td>274007</td>\n      <td>-2.00941</td>\n      <td>52.36413</td>\n      <td>3b13e41d-e470-47c0-9830-cd654e36a32e</td>\n      <td>POLYGON ((399816.607 273656.656, 400092.197 27...</td>\n      <td>Bromsgrove</td>\n      <td>[E01032143, E01032144, E01032148, E01032150, E...</td>\n      <td>Bromsgrove</td>\n      <td>Centre 2</td>\n      <td>1</td>\n      <td>Centre 2-1</td>\n    </tr>\n    <tr>\n      <th>Centre 2-2</th>\n      <td>31667</td>\n      <td>E01032477</td>\n      <td>Wyre Forest 008D</td>\n      <td>Wyre Forest 008D</td>\n      <td>381330</td>\n      <td>275610</td>\n      <td>-2.27568</td>\n      <td>52.37821</td>\n      <td>4f0cf516-7c4b-4b61-a4da-da4423304f43</td>\n      <td>POLYGON ((381780.507 275809.361, 381793.089 27...</td>\n      <td>Wyre Forest</td>\n      <td>[E01032451, E01032470, E01032471, E01032476, E...</td>\n      <td>Wyre Forest</td>\n      <td>Centre 2</td>\n      <td>2</td>\n      <td>Centre 2-2</td>\n    </tr>\n    <tr>\n      <th>Centre 2-3</th>\n      <td>31535</td>\n      <td>E01032345</td>\n      <td>Wychavon 007A</td>\n      <td>Wychavon 007A</td>\n      <td>393387</td>\n      <td>259105</td>\n      <td>-2.09823</td>\n      <td>52.23011</td>\n      <td>b7f03ca0-aac0-4e29-b86c-95dd4a796fce</td>\n      <td>POLYGON ((396864.091 258452.893, 396188.712 25...</td>\n      <td>Wychavon</td>\n      <td>[E01032346, E01032360, E01032361, E01032362, E...</td>\n      <td>Wychavon</td>\n      <td>Centre 2</td>\n      <td>3</td>\n      <td>Centre 2-3</td>\n    </tr>\n    <tr>\n      <th>Centre 2-4</th>\n      <td>31391</td>\n      <td>E01032199</td>\n      <td>Malvern Hills 002C</td>\n      <td>Malvern Hills 002C</td>\n      <td>376434</td>\n      <td>260160</td>\n      <td>-2.34652</td>\n      <td>52.23913</td>\n      <td>c4525de8-e8d8-4d8b-9610-d887d58dbabb</td>\n      <td>POLYGON ((378353.003 262294.903, 378414.904 26...</td>\n      <td>Malvern Hills</td>\n      <td>[E01014001, E01032179, E01032181, E01032182, E...</td>\n      <td>Malvern Hills</td>\n      <td>Centre 2</td>\n      <td>4</td>\n      <td>Centre 2-4</td>\n    </tr>\n    <tr>\n      <th>Centre 2-5</th>\n      <td>30398</td>\n      <td>E01031187</td>\n      <td>Stratford-on-Avon 007A</td>\n      <td>Stratford-on-Avon 007A</td>\n      <td>414464</td>\n      <td>258742</td>\n      <td>-1.78965</td>\n      <td>52.22670</td>\n      <td>679c1798-8095-4712-a9b9-c495cca9dadd</td>\n      <td>POLYGON ((416799.690 260453.800, 416633.500 25...</td>\n      <td>Stratford-on-Avon</td>\n      <td>[E01031188, E01031195, E01031204, E01031208, E...</td>\n      <td>Stratford-on-Avon</td>\n      <td>Centre 2</td>\n      <td>5</td>\n      <td>Centre 2-5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's plot this.\n\n::: {#09757791 .cell execution_count=14}\n``` {.python .cell-code}\n# First, let's plot the outline of our entire region\nax = bham_region.plot(\n    figsize=(10,7),\n    edgecolor='black',\n    linewidth=0.5,\n    color=\"white\"\n    )\n\n# Plot those on the same plot, colouring by centre-dispatcher combo\nmost_central.plot(\n    ax=ax,\n    column=\"centre_dispatcher\",\n    legend=True\n)\n\n# Let's also visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"green\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_varying_evaluating_simple_files/figure-html/cell-15-output-1.png){width=579 height=559}\n:::\n:::\n\n\nYou can see that in some regions the most central point can still be on a boundary, even\n\n### Generating our new regions\n\nAs a recap, what we want to do now is introduce a number of 'players' who will play a territory-grabbing game. Our 'players' - the dispatchers - will each have a single turn, pass control to the next dispatcher, and so on.\n\nOn each turn, they will be presented with a long list of the regions that share a boundary with any of their existing territories. They will then choose a territory at random from that list.\n\nHowever, this doesn't mean their territory will expand on every turn.\n\n-   The territory that they choose could be one of their existing territories (as we are checking for a boundary with *any* of their existing territories on a per-territory basis - not the outer boundary of their entire territory)\n-   There will also be a random chance introduced that they just don't take a go\n-   They may also try to take a territory that is already owned by a different dispatcher, in which case they will not gain anything on the turn - though we could always add in an option like them 'battling' for the territory\n\nSo let's start coding this!\n\nFirst, let's work on the logic for selecting a territory from their existing list. We'll just do this with a single dispatcher for now.\n\nWe'll filter down to this and remind ourselves what the available data on neighbouring territory looks like.\n\n::: {#e06ae7a2 .cell execution_count=15}\n``` {.python .cell-code}\n# We'll start with dispatcher 5 from centre 2, and we'll use the most central point of their existing territory\n\ndispatcher = \"Centre 2-5\"\n\nstarting_point = most_central[most_central[\"centre_dispatcher\"] == dispatcher]\n\nstarting_point['neighbors']\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\ncentre_dispatcher\nCentre 2-5    [E01031188, E01031195, E01031204, E01031208, E...\nName: neighbors, dtype: object\n```\n:::\n:::\n\n\nLet's now pick a random neighbour, and work out a way to store the new allocations so we can ensure we know who owns what territory, and we don't end up with a situation where two dispatchers own the same territory.\n\n::: {#e3a7b487 .cell execution_count=16}\n``` {.python .cell-code}\nowned_territory_dict = {}\n\nowned_territory_dict[dispatcher] = [starting_point['LSOA11CD'].values[0]]\n\nowned_territory_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n{'Centre 2-5': ['E01031187']}\n```\n:::\n:::\n\n\n::: {#18fd7507 .cell execution_count=17}\n``` {.python .cell-code}\nselected_territory = random.choice(starting_point['neighbors'].values[0])\n\nselected_territory\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'E01031188'\n```\n:::\n:::\n\n\n::: {#770f9283 .cell execution_count=18}\n``` {.python .cell-code}\nowned_territory_dict[dispatcher].append(selected_territory)\n\nowned_territory_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n{'Centre 2-5': ['E01031187', 'E01031188']}\n```\n:::\n:::\n\n\nFantastic! We now have a simple way to get and store this.\n\nLet's have a go at giving another dispatcher a turn to grab territory.\n\n::: {#be1a1a61 .cell execution_count=19}\n``` {.python .cell-code}\ndispatcher = \"Centre 1-1\"\n\nstarting_point = most_central[most_central[\"centre_dispatcher\"] == dispatcher]\n\n# This time we add to the existing dict rather than setting it up anew\nowned_territory_dict[dispatcher] = [starting_point['LSOA11CD'].values[0]]\n\n# Now we do our random selection\nselected_territory = random.choice(starting_point['neighbors'].values[0])\n\nowned_territory_dict[dispatcher].append(selected_territory)\n\nowned_territory_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n{'Centre 2-5': ['E01031187', 'E01031188'],\n 'Centre 1-1': ['E01028832', 'E01028834']}\n```\n:::\n:::\n\n\nThis is a good step, and for now we're unlikely to run into the issue of different dispatchers owning the same territory - though it's not impossible! So let's add in another dispatcher, but this time we'll check first that it's not owned by anyone.\n\nFirst, let's pull back the full list of owned territories from our dict.\n\n::: {#5df8e9fa .cell execution_count=20}\n``` {.python .cell-code}\nlist(owned_territory_dict.values())\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[['E01031187', 'E01031188'], ['E01028832', 'E01028834']]\n```\n:::\n:::\n\n\nWe'll need to convert this into a single list. We could use a for loop, or a list comprehension.\n\n::: {#3708b641 .cell execution_count=21}\n``` {.python .cell-code}\nterritory_list = [element for sub_list in list(owned_territory_dict.values()) for element in sub_list]\n\n# By using set, then list on the result of that, we get a list of unique values\nterritory_list = list(set(territory_list))\n\nterritory_list\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n['E01028832', 'E01031188', 'E01028834', 'E01031187']\n```\n:::\n:::\n\n\nNow we can use this in our checks.\n\n::: {#87fa54e5 .cell execution_count=22}\n``` {.python .cell-code}\ndispatcher = \"Centre 1-5\"\n\nstarting_point = most_central[most_central[\"centre_dispatcher\"] == dispatcher]\n\nowned_territory_dict[dispatcher] = [starting_point['LSOA11CD'].values[0]]\n\nselected_territory = random.choice(starting_point['neighbors'].values[0])\n\n# Only add the territory if it's not already in the list of owned territory\nif selected_territory not in territory_list:\n    owned_territory_dict[dispatcher].append(selected_territory)\n\nowned_territory_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n{'Centre 2-5': ['E01031187', 'E01031188'],\n 'Centre 1-1': ['E01028832', 'E01028834'],\n 'Centre 1-5': ['E01010043', 'E01009890']}\n```\n:::\n:::\n\n\n### Writing the function\n\nThat's most of the key elements of our function written now - so let's actually turn it into a function that will continue to run until all of the territory has been allocated.\n\nFor clarity and ease of use, we'll set up our defaults to relate to our current objects - but for a more reusable function, it may be better to avoid defaults but be very clear in the docstring what is expected as an input, and add in some error handling to manage cases that don't match.\n\n::: {#bd13de72 .cell execution_count=23}\n``` {.python .cell-code}\ndef generate_random_territory_allocation(\n    gdf=bham_region,\n    territory_unit_column=\"LSOA11CD\",\n    player_list=bham_region[\"centre_dispatcher\"].unique(),\n    player_column=\"centre_dispatcher\",\n    starting_territories=most_central,\n    neighbor_column='neighbors',\n    skipgo_chance=0.03,\n    return_df=True\n    ):\n\n    # Initialise the territory list as the starting territories\n    owned_territory_list = list(starting_territories[territory_unit_column].unique())\n\n    # Set up the starting territory for each individual and have each player have their first go\n    for player in player_list:\n        starting_point = starting_territories[starting_territories[player_column] == player]\n\n        owned_territory_dict[player] = [starting_point[territory_unit_column].values[0]]\n\n        selected_territory = random.choice(starting_point['neighbors'].values[0])\n\n        # Only add the territory if it's not already in the list of owned territory\n        if selected_territory not in owned_territory_list:\n            owned_territory_dict[player].append(selected_territory)\n            # As we're now going to be iterating and checking throughout, we can just\n            # maintain the owned territory list as we go along, which is a bit easier and\n            # more efficient than generating it from the territory dict each time\n            owned_territory_list.append(selected_territory)\n\n    # Keep going through the following process until all territory has been allocated\n    while len(owned_territory_list) < len(gdf[territory_unit_column].unique()):\n        # Go around all individuals\n        for player in player_list:\n            if random.random() > skipgo_chance:\n                # Select a random existing territory from the list of owned territories\n                chosen_owned_territory = random.choice(owned_territory_dict[player])\n                # Then find the neighbours\n                neighbors = gdf[gdf[territory_unit_column] == chosen_owned_territory][neighbor_column].values[0]\n                # Choose a random neighbour and update the list of owned territories...\n                selected_territory = random.choice(neighbors)\n\n                #... if not already owned\n                if selected_territory not in owned_territory_list:\n                    owned_territory_dict[player].append(selected_territory)\n                    owned_territory_list.append(selected_territory)\n\n\n    if return_df:\n        owned_territory_df = pd.DataFrame(\n            [(key, value) for key, values in owned_territory_dict.items() for value in values],\n            columns=[f\"{player_column}_NEW\", territory_unit_column])\n        return pd.merge(gdf, owned_territory_df, on=territory_unit_column, how=\"left\")\n    else:\n        return owned_territory_dict\n```\n:::\n\n\nLet's try our new function out and see what it returns.\n\n::: {#6019d020 .cell execution_count=24}\n``` {.python .cell-code}\nrandom_allocation_test = generate_random_territory_allocation()\n\nrandom_allocation_test\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FID</th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>BNG_E</th>\n      <th>BNG_N</th>\n      <th>LONG</th>\n      <th>LAT</th>\n      <th>GlobalID</th>\n      <th>geometry</th>\n      <th>region</th>\n      <th>neighbors</th>\n      <th>Region</th>\n      <th>Centre</th>\n      <th>Dispatcher</th>\n      <th>centre_dispatcher</th>\n      <th>centre_dispatcher_NEW</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8649</td>\n      <td>E01008881</td>\n      <td>Birmingham 067A</td>\n      <td>Birmingham 067A</td>\n      <td>412690</td>\n      <td>285438</td>\n      <td>-1.81463</td>\n      <td>52.46675</td>\n      <td>f79cd8fb-0cf2-4c84-b07c-55bffcf379bb</td>\n      <td>POLYGON ((413040.413 285809.794, 413145.440 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008882, E01008883, E01008885, E01008886, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8650</td>\n      <td>E01008882</td>\n      <td>Birmingham 066A</td>\n      <td>Birmingham 066A</td>\n      <td>411772</td>\n      <td>285390</td>\n      <td>-1.82814</td>\n      <td>52.46634</td>\n      <td>e7835311-f105-4c92-acae-ecd5255ce534</td>\n      <td>POLYGON ((412233.657 285480.231, 412255.373 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008881, E01008883, E01008884, E01008898, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8651</td>\n      <td>E01008883</td>\n      <td>Birmingham 078A</td>\n      <td>Birmingham 078A</td>\n      <td>412121</td>\n      <td>285001</td>\n      <td>-1.82302</td>\n      <td>52.46283</td>\n      <td>29dbcbc2-4a29-4bb1-addb-42b37d91c647</td>\n      <td>POLYGON ((412775.838 285204.808, 412575.845 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008881, E01008882, E01008884, E01008886, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8652</td>\n      <td>E01008884</td>\n      <td>Birmingham 078B</td>\n      <td>Birmingham 078B</td>\n      <td>411241</td>\n      <td>284712</td>\n      <td>-1.83598</td>\n      <td>52.46025</td>\n      <td>df5a2350-a102-4ecc-b028-5a0bbeded198</td>\n      <td>POLYGON ((411803.096 284902.674, 411563.054 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008882, E01008883, E01008887, E01008889, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8653</td>\n      <td>E01008885</td>\n      <td>Birmingham 076A</td>\n      <td>Birmingham 076A</td>\n      <td>413207</td>\n      <td>284818</td>\n      <td>-1.80704</td>\n      <td>52.46116</td>\n      <td>13a855fc-fa09-42a5-a05e-947fcd141ce4</td>\n      <td>POLYGON ((413417.353 284803.764, 413034.282 28...</td>\n      <td>Birmingham</td>\n      <td>[E01008881, E01008886, E01008888, E01009521]</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2006</th>\n      <td>32722</td>\n      <td>E01033646</td>\n      <td>Birmingham 031I</td>\n      <td>Birmingham 031I</td>\n      <td>410257</td>\n      <td>291057</td>\n      <td>-1.85027</td>\n      <td>52.51731</td>\n      <td>c7a17445-f800-41bc-86fb-cbeb9cde5d3f</td>\n      <td>POLYGON ((410651.278 291571.301, 410562.002 29...</td>\n      <td>Birmingham</td>\n      <td>[E01009000, E01009007, E01009013, E01009401, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>32723</td>\n      <td>E01033647</td>\n      <td>Birmingham 058E</td>\n      <td>Birmingham 058E</td>\n      <td>410473</td>\n      <td>286828</td>\n      <td>-1.84722</td>\n      <td>52.47929</td>\n      <td>7d745c12-8e35-404d-b96d-f2b3c3e92896</td>\n      <td>POLYGON ((410665.117 286998.178, 410753.991 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009194, E01009197, E01009198, E01009331, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>32724</td>\n      <td>E01033648</td>\n      <td>Birmingham 084F</td>\n      <td>Birmingham 084F</td>\n      <td>408315</td>\n      <td>283740</td>\n      <td>-1.87907</td>\n      <td>52.45157</td>\n      <td>ed410ea7-fc12-42bd-8604-4a54fab04b9f</td>\n      <td>POLYGON ((408199.966 283979.204, 408378.884 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009376, E01009377, E01009383, E01009384, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>32725</td>\n      <td>E01033649</td>\n      <td>Birmingham 058F</td>\n      <td>Birmingham 058F</td>\n      <td>410530</td>\n      <td>287142</td>\n      <td>-1.84637</td>\n      <td>52.48211</td>\n      <td>a8880f7b-a92b-43da-bf8d-b673ed85c526</td>\n      <td>POLYGON ((410728.297 287314.945, 410665.117 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009194, E01009195, E01009197, E01033647]</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>32726</td>\n      <td>E01033650</td>\n      <td>Birmingham 077F</td>\n      <td>Birmingham 077F</td>\n      <td>409357</td>\n      <td>284898</td>\n      <td>-1.86370</td>\n      <td>52.46196</td>\n      <td>2868f08d-b3bd-4e47-b985-ce8484e582f3</td>\n      <td>POLYGON ((409575.733 284753.232, 409442.619 28...</td>\n      <td>Birmingham</td>\n      <td>[E01009339, E01009363, E01009368, E01009371, E...</td>\n      <td>Birmingham</td>\n      <td>Centre 1</td>\n      <td>6</td>\n      <td>Centre 1-6</td>\n      <td>Centre 1-6</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows × 17 columns</p>\n</div>\n```\n:::\n:::\n\n\nLet's see how much this differs from the original allocation.\n\n::: {#b7ddc597 .cell execution_count=25}\n``` {.python .cell-code}\n# Plot the new boundaries using colours\nax = random_allocation_test.plot(\n    column=\"centre_dispatcher_NEW\"\n)\n\n# Visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"black\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_varying_evaluating_simple_files/figure-html/cell-26-output-1.png){width=444 height=411}\n:::\n:::\n\n\n### Comparing a new solution to the current allocation\n\nFor now, we're going to judge a solution on a single criteria - the average absolute difference in demand across our regions per dispatcher.\n\nThis is calculated by calculating the difference in total demand experiences by one dispatcher from the average across all dispatchers. We then take the absolute value - i.e. if the difference is negative (the dispatcher received fewer calls than the average), we will turn it into a postive. Finally, we take the average across these values.\n\nWe'll create a function to do this.\n\n::: {#7d61dea6 .cell execution_count=26}\n``` {.python .cell-code}\ndef evaluate_solution(gdf, allocation_column='centre_dispatcher_NEW', demand_column=\"demand\"):\n    grouped_by_dispatcher = gdf.groupby(allocation_column)[[demand_column]].sum()\n    mean_demand = grouped_by_dispatcher['demand'].mean()\n\n    grouped_by_dispatcher['difference_from_mean'] = (grouped_by_dispatcher['demand'] - mean_demand).astype('int')\n\n    return abs(grouped_by_dispatcher['difference_from_mean']).mean().round(1)\n```\n:::\n\n\nAnd now let's try this out on our original and new solutions\n\n::: {#67bb35c6 .cell execution_count=27}\n``` {.python .cell-code}\ndemand = pd.read_csv(\"demand_pop_bham.csv\")\n\nrandom_allocation_test = random_allocation_test.merge(demand, on=\"LSOA11CD\")\n\noriginal_result = evaluate_solution(random_allocation_test, allocation_column='centre_dispatcher')\nnew_result = evaluate_solution(random_allocation_test, allocation_column='centre_dispatcher_NEW')\n\nprint(f\"Original Allocation: {original_result}\")\nprint(f\"Random Solution 1: {new_result}\")\n\nif original_result > new_result:\n    print(\"The randomly generated solution gives a more even allocation of events than the original dispatcher allocations\")\nelse:\n    print(\"The randomly generated solution is worse than the original dispatcher allocations\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal Allocation: 20934.4\nRandom Solution 1: 7460.1\nThe randomly generated solution gives a more even allocation of events than the original dispatcher allocations\n```\n:::\n:::\n\n\n## Trying this out for more solutions\n\nLet's now run this for 20 different solutions and store the results.\n\n::: {#1329fff7 .cell execution_count=28}\n``` {.python .cell-code}\ndef evaluate_solution_dict(solution_dict, gdf, allocation_column='centre_dispatcher', demand_column=\"demand\", territory_unit_column=\"LSOA11CD\"):\n\n    owned_territory_df = pd.DataFrame(\n            [(key, value) for key, values in solution_dict.items() for value in values],\n            columns=[f\"{allocation_column}_NEW\", territory_unit_column])\n    gdf = pd.merge(gdf, owned_territory_df, on=territory_unit_column, how=\"left\")\n\n    grouped_by_dispatcher = gdf.groupby(f\"{allocation_column}_NEW\")[[demand_column]].sum()\n    mean_demand = grouped_by_dispatcher['demand'].mean()\n\n    grouped_by_dispatcher['difference_from_mean'] = (grouped_by_dispatcher['demand'] - mean_demand).astype('int')\n\n    return abs(grouped_by_dispatcher['difference_from_mean']).mean().round(1)\n```\n:::\n\n\n::: {#d9200d93 .cell execution_count=29}\n``` {.python .cell-code}\n# Ensure our dataframe has the demand column\nimport copy\n\nbham_region = bham_region.merge(demand, on=\"LSOA11CD\")\n\nsolutions = []\n\nfor i in range(20):\n    allocations = generate_random_territory_allocation(return_df=False)\n    allocation_evaluation = evaluate_solution_dict(solution_dict=allocations, gdf=bham_region)\n    solutions.append({\n        'solution': i+1,\n        # We can't just pass the dictionary here due to the way python handles dictionaries\n        # We need to explicitly take a copy of the dictionary\n        'allocations': copy.deepcopy(allocations),\n        'result': allocation_evaluation\n    })\n\nsolution_df = pd.DataFrame(solutions)\nsolution_df['rank'] = solution_df['result'].rank(method='max')\n\nsolution_df.to_pickle('solutions_example.pkl')\n\nsolution_df.sort_values('rank', ascending=True)\n```\n:::\n\n\n::: {#dcf1c574 .cell execution_count=30}\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>solution</th>\n      <th>allocations</th>\n      <th>result</th>\n      <th>rank</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>14735.8</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>12226.2</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>12418.8</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031188', 'E01...</td>\n      <td>12567.1</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>12399.0</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>9842.8</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>10869.2</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>12088.3</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031208', 'E01...</td>\n      <td>11218.6</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>9651.1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>11043.4</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031188', 'E01...</td>\n      <td>13632.6</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>13954.4</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>13443.9</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031208', 'E01...</td>\n      <td>10811.3</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031188', 'E01...</td>\n      <td>12831.8</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031208', 'E01...</td>\n      <td>13103.8</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>11401.2</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031213', 'E01...</td>\n      <td>13196.2</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>13126.5</td>\n      <td>15.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "boundary_problems_varying_evaluating_simple_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}