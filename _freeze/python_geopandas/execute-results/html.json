{
  "hash": "0114ed262b9ffb9ce05596efa9f59101",
  "result": {
    "engine": "knitr",
    "markdown": "# Working With Travel Time Data in Python - the geopandas package\n\n\n::: {.cell}\n\n:::\n\n<style>\na.glossary {\n  color: #8A1E1E;\n  text-decoration: underline;\n  cursor: help;\n  position: relative;\n}\n\n/* only needed for popup = \"click\" */\n/* popup-definition */\na.glossary .def {\n  display: none;\n  position: absolute;\n  z-index: 1;\n  width: 200px;\n  bottom: 100%;\n  left: 50%;\n  margin-left: -100px;\n  background-color: #333;\n  color: white;\n  padding: 5px;\n  border-radius: 6px;\n}\n/* show on click */\na.glossary:active .def {\n  display: inline-block;\n}\n/* triangle arrow */\na.glossary:active .def::after {\n  content: ' ';\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #333 transparent transparent transparent;\n}\n</style>\n\n\n\nPandas is a popular library for working with <a class='glossary' title='Placeholder'>tabular</a> data in Python.\n\nFlat files like csvs or imported data from relational databases (e.g. SQL data warehouses) can be manipulated with pandas to add\n\nA full introduction to pandas is outside of the scope of this book. However, a range of good tutorials exist.\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n#### Click here for links to tutorials on data manipulation with pandas\n\nPLACEHOLDER\n\n:::\n\nHowever, standard pandas dataframes do not work well with key geographic data types. This is where the [geopandas](https://geopandas.org/en/stable/index.html) library comes in.\n\nPandas takes multiple **series** of data and joins these together to make a **DataFrame**.\n\n![](assets/2024-06-18-23-46-28.png)\n\nGeopandas takes the Series object of pandas and expands it to be able to deal with point, line or polygon data.\n\n![](assets/2024-06-18-23-46-52.png)\n\nIt adds in an ability to read various geographic data formats too, such as ESRI shapefiles, geopackages and geojson.\n\nThe magic of geopandas starts to become apparent when you need to filter and aggregate\n\nYou can even visualise geographic data that's stored in a geopandas geodataframe with a single command: `.plot()`!\n\nIf you're familiar with pandas, the good news is that working with geopandas will feel almost the same!\n\n::: {.callout-warning}\n#### A warning about geopandas\nGeopandas is known for compatability issues with other packages.\n\nIf you install it into your **base python environment**, you may begin to experience odd behaviour or have issues [TODO: expand this section and get references]\n\n\n:::\n\n\n## The geometry column\n\nEvery Geopandas dataframe has a ‘geometry’ column (even if it’s not called that).\n\nVarious geopandas methods will then automatically apply to that geometry column without you having to specify that.\n\nFor example, the .plot() method of geopandas will plot the line, point or polygon data stored in the geometry column.\n\n:::{.callout-note}\n#### A reminder - types of data\n\n![](assets/2024-06-18-23-47-48.png)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}