{
  "hash": "9b0f2a8add05f391e18e7ed1ddb642db",
  "result": {
    "engine": "jupyter",
    "markdown": "# Using code to solve facility location problems\n\nRight - now we know the combinations we want to test and how long it takes to get to each clinic location, we’ll need some sort of demand figures.\n\n## Demand data\n\nChances are your demand isn’t spread evenly across your potential service user catchment area.\n\n- Maybe certain LSOAs have more people of childbearing age, so maternity and paediatric services will get more demand from those areas\n- Maybe certain LSOAs have an older population, so stroke services are more centred around there\n- Maybe other LSOAs have a higher incidence of obesity, so you might expect more demand for type 2 diabetes services and retinopathy clinics\n\nYour demand data can be formatted quite simply!\n\nYou just want to make sure that you’re using the same level of location data as in your travel matrix (e.g. they need to both use LSOA, or both use postcode sectors - not a mixture)\n\n![](assets/2024-06-24-19-17-30.png)\n\n:::{.callout-warning}\nYou might use historic demand figures as your starting point.\n\nBut always consider…\n\n- If you seem to have areas with no historic demand, is this actually a pattern, or is it just that the historic numbers are small and there’s an element of chance?\n- Is there some preexisting bias or issue with access that you might be perpetuating by using the historic figures?\n\nHow can you deal with these issues?\n\nIf you’re using historic data, can you bring in more years?\n\nAlternatively, you could explore what happens when you just weight demand by the number of people in each LSOA.\n\nIf your service only covers a certain age range, you can find LSOA-level figures estimating the proportion of the population in that age group.\n\n![](assets/2024-06-24-19-18-13.png)\n\nYou might also just make predictions of demand based off something else.\n- Number of people in a target age demographic or of a particular gender in your LSOAs, multiplied by some factor\n    - (e.g. 20% of women aged 18-34)\n\nJust always consider whether what you’re doing is\n\n- appropriate\n- sensible\n- transparent\n- justifiable\n\nMake it clear what data you have used and why!\n\nMake the limitations of your conclusions explicit.\n:::\n\n## Evaluating the weighted average travel time\n\nRight! We’ve got everything we need - except a way to evaluate the weighted average travel time…\n\nCast your mind back many many slides - when we present our options, we want to give more weight to the travel times from areas that have higher demand.\n\n![](assets/2024-06-24-19-19-04.png)\n\nLet’s write some code to do this.\n\nIt’s something we’re going to want to reuse quite a lot - so we can turn it into a class with…\n\n**Attributes**\n\n- our travel dataframe\n- our demand dataframe\n\n**Methods**\n\n- Evaluate a solution\n    - Limit the travel dataframe to a subset of candidate locations\n    - Work out the smallest value per location (the ‘minimum cost’)\n    - Return a dataframe with demand and min cost per region\n- Return the weighted average for the solution\n- Return the unweighted average for the solution\n- Return the maximum travel time for any locations in the solution\n\n:::{.callout-info}\nThe FacilityLocationObjective code is modified from the Metapy library created by Tom Monks\n\n[https://github.com/health-data-science-OR/healthcare-logistics/tree/master/optimisation/metapy](https://github.com/health-data-science-OR/healthcare-logistics/tree/master/optimisation/metapy)\n:::\n\n#### The __init__ method\n\n::: {#97a39e70 .cell execution_count=1}\n``` {.python .cell-code}\nclass FacilityLocationObjective:\n    def __init__(self, demand, travel_matrix, merge_col, demand_col):\n        '''\n        Store the demand and travel times\n\n        Args:\n            demand: pd.DataFrame:\n\n            travel_matrix: pd.DataFrame:\n        '''\n        self.demand = demand.set_index(merge_col)\n        self.travel_matrix = travel_matrix.set_index(merge_col)\n        self.demand_col = demand_col\n```\n:::\n\n\n**demand** is our dataframe containing demand sources (e.g. LSOAs) as rows and the demand (e.g. yearly patients coming from that LSOA) as the single column\n\n**merge_col** is the name of the column that is consistent between our demand and travel dataframes\n\n**travel_matrix** is the dataframe with demand sources as rows and potential service locations as columns, with the travel cost (time) as the values in the cells\n\n**demand_col** is a string referring to the column that contains the demand value in the demand dataframe\n\n#### The evaluate_solution method\n\nThis method, given a list of sites in the form of their column indices (e.g. [1, 4, 5] for sites 2, 5 and 6), will return a dataframe with the demand and minimum travel time per row for this potential solution.\n\n::: {#59e9bd4e .cell execution_count=2}\n``` {.python .cell-code}\n    def evaluate_solution(self, site_list):\n        '''\n        Args:\n            site_list: list: column indices of solution to evaluate\n                            (to apply to travel matrix)\n\n        Returns:\n            Pandas dataframe to pass to evaluation functions\n\n        '''\n\n        active_facilities = self.travel_matrix.iloc[:, site_list].copy()\n\n        # Assume travel to closest facility\n        # Need to drop the column that contains\n        active_facilities['min_cost'] = active_facilities.min(axis=1)\n\n\n        # Merge demand and travel times into a single DataFrame\n        problem = self.demand.merge(active_facilities,\n                                    left_index=True, right_index=True,\n                                    how='inner')\n\n        return problem.reset_index()\n```\n:::\n\n\n#### The generate_solution_metrics method\n\nThis method, given a list of sites in the form of their column indices (e.g. [1, 4, 5] for sites 2, 5 and 6)\n- Runs the evaluate_solution method\n- Returns a range of metrics relating to the\n\n::: {#f5a6dd22 .cell execution_count=3}\n``` {.python .cell-code}\n    def generate_solution_metrics(self, site_list):\n        '''\n        Calculates the weighted average travel time for selected sites\n\n        Args:\n            site_list: list or np.array: A list of site IDs as a list or array (e.g. [0, 3, 4])\n            merge_col: string: The column name to use for merging the data.\n            n_patients_or_referrals_col: string: The column name to use for the number of patients or referrals.\n\n        Returns:\n            A tuple containing the problem and the maximum travel time.\n        '''\n        problem = self.evaluate_solution(site_list)\n\n        # Return weighted average\n        weighted_average = np.average(problem['min_cost'], weights=problem[self.demand_col])\n        unweighted_average = np.average(problem['min_cost'])\n        max_travel = np.max(problem['min_cost'])\n\n        return {\n            'site_indices': site_list,\n            'site_names': \", \".join(self.travel_matrix.columns[site_list].tolist()),\n            'weighted_average': weighted_average,\n            'unweighted_average': unweighted_average,\n            'max': max_travel,\n            'problem_df': problem\n        }\n```\n:::\n\n\n:::{.callout-tip collapse=\"True\"}\n### Click here to view the whole class\n\n::: {#60b49ca5 .cell execution_count=4}\n``` {.python .cell-code}\n# Tweaked WeightedAverageObjective from Metapy package\n# https://github.com/health-data-science-OR/healthcare-logistics/tree/master/optimisation/metapy\n# Credit: Tom Monks\n\nclass FacilityLocationObjective:\n    '''\n    Encapsulates logic for calculation of\n    metrics in a simple facility location problem\n\n    Demand and travel matrices must have a common column\n\n    demand: pd.dataframe:  Two column dataframe. One column should be labels for the\n    demand locations (e.g. LSOA identifiers, postcodes). Second column should contain\n    demand figures of some kind (e.g. number of historical cases)\n    If demand assumed to be equal, all values in this column could be 1.\n\n    travel_matrix: pd.dataframe: dataframe with columns representing sites\n    and rows representing locations demand will come from.\n    One column should be labels for the demand locations (e.g. LSOA identifiers, postcodes).\n    All other values will be either distance or time in float form.\n    No additional columns of information must be included or they will be used as part of the\n    calculation of the lowest-cost solution, which may lead to incorrect results.\n    '''\n    def __init__(self, demand, travel_matrix, merge_col, demand_col):\n        '''\n        Store the demand and travel times\n\n        Args:\n            demand: pd.DataFrame:\n\n            travel_matrix: pd.DataFrame:\n        '''\n        self.demand = demand.set_index(merge_col)\n        self.travel_matrix = travel_matrix.set_index(merge_col)\n        self.demand_col = demand_col\n\n\n    def evaluate_solution(self, site_list):\n        '''\n        Calculates the\n\n        Args:\n            site_list: list: column indices of solution to evaluate\n                            (to apply to travel matrix)\n\n        Returns:\n            Pandas dataframe to pass to evaluation functions\n\n        '''\n\n        active_facilities = self.travel_matrix.iloc[:, site_list].copy()\n\n        # Assume travel to closest facility\n        # Need to drop the column that contains\n        active_facilities['min_cost'] = active_facilities.min(axis=1)\n\n\n        # Merge demand and travel times into a single DataFrame\n        problem = self.demand.merge(active_facilities,\n                                    left_index=True, right_index=True,\n                                    how='inner')\n\n        return problem.reset_index()\n\n\n    def generate_solution_metrics(self, site_list):\n        '''\n        Calculates the weighted average travel time for selected sites\n\n        Args:\n            site_list: list or np.array: A list of site IDs as a list or array (e.g. [0, 3, 4])\n            merge_col: string: The column name to use for merging the data.\n            n_patients_or_referrals_col: string: The column name to use for the number of patients or referrals.\n\n        Returns:\n            A tuple containing the problem and the maximum travel time.\n        '''\n        problem = self.evaluate_solution(site_list)\n\n        # Return weighted average\n        weighted_average = np.average(problem['min_cost'], weights=problem[self.demand_col])\n        unweighted_average = np.average(problem['min_cost'])\n        max_travel = np.max(problem['min_cost'])\n\n        return {\n            'site_indices': site_list,\n            'site_names': \", \".join(self.travel_matrix.columns[site_list].tolist()),\n            'weighted_average': weighted_average,\n            'unweighted_average': unweighted_average,\n            'max': max_travel,\n            'problem_df': problem\n        }\n```\n:::\n\n\n### Setting up an instance of this class\n\nLet's first import the packages we will need throughout this section.\n\n::: {#cb2b470b .cell execution_count=5}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas\nimport contextily as cx\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nWe need to\n- import a dataset of demand\n- import (or create) a geodataframe of site locations\n- and import (or create) a travel matrix for this combination of sites and demand sources\n\n::: {#ee9a3e89 .cell execution_count=6}\n``` {.python .cell-code}\nbrighton_demand = pd.read_csv(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/brighton_demand.csv\").drop(columns=[\"Unnamed: 0\"])\nbrighton_demand.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LSOA</th>\n      <th>demand</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Brighton and Hove 027E</td>\n      <td>3627</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Brighton and Hove 027F</td>\n      <td>2323</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Brighton and Hove 027A</td>\n      <td>2596</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Brighton and Hove 029E</td>\n      <td>3132</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Brighton and Hove 029D</td>\n      <td>2883</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#168a5e0b .cell execution_count=7}\n``` {.python .cell-code}\nbrighton_sites = geopandas.read_file(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/brighton_sites.geojson\")\nbrighton_sites.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>site</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Site 1</td>\n      <td>POINT (-0.19544 50.84511)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Site 2</td>\n      <td>POINT (-0.13365 50.84435)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Site 3</td>\n      <td>POINT (-0.10763 50.83347)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Site 4</td>\n      <td>POINT (-0.17652 50.83075)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Site 5</td>\n      <td>POINT (-0.11961 50.86597)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6ac91521 .cell execution_count=8}\n``` {.python .cell-code}\nbrighton_travel = pd.read_csv(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/brighton_travel_matrix_driving.csv\").drop(columns=[\"Unnamed: 0\"])\nbrighton_travel.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LSOA</th>\n      <th>Site 1</th>\n      <th>Site 2</th>\n      <th>Site 3</th>\n      <th>Site 4</th>\n      <th>Site 5</th>\n      <th>Site 6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Brighton and Hove 027E</td>\n      <td>773.93</td>\n      <td>527.69</td>\n      <td>444.29</td>\n      <td>491.85</td>\n      <td>607.54</td>\n      <td>554.91</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Brighton and Hove 027F</td>\n      <td>757.39</td>\n      <td>499.11</td>\n      <td>517.57</td>\n      <td>561.07</td>\n      <td>578.97</td>\n      <td>538.37</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Brighton and Hove 027A</td>\n      <td>763.24</td>\n      <td>601.38</td>\n      <td>517.98</td>\n      <td>410.40</td>\n      <td>681.23</td>\n      <td>557.35</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Brighton and Hove 029E</td>\n      <td>743.62</td>\n      <td>651.72</td>\n      <td>660.36</td>\n      <td>379.72</td>\n      <td>731.58</td>\n      <td>557.58</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Brighton and Hove 029D</td>\n      <td>665.85</td>\n      <td>664.65</td>\n      <td>658.20</td>\n      <td>313.00</td>\n      <td>744.50</td>\n      <td>570.51</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFinally, we bring in our LSOA boundaries for plotting later.\n\n::: {#770373bd .cell execution_count=9}\n``` {.python .cell-code}\nlsoa_boundaries = geopandas.read_file(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson\")\nlsoa_boundaries.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>FID</th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>BNG_E</th>\n      <th>BNG_N</th>\n      <th>LONG</th>\n      <th>LAT</th>\n      <th>GlobalID</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>E01000001</td>\n      <td>City of London 001A</td>\n      <td>City of London 001A</td>\n      <td>532123</td>\n      <td>181632</td>\n      <td>-0.097140</td>\n      <td>51.51816</td>\n      <td>a758442e-7679-45d0-95a8-ed4c968ecdaa</td>\n      <td>POLYGON ((532282.629 181906.496, 532248.250 18...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>E01000002</td>\n      <td>City of London 001B</td>\n      <td>City of London 001B</td>\n      <td>532480</td>\n      <td>181715</td>\n      <td>-0.091970</td>\n      <td>51.51882</td>\n      <td>861dbb53-dfaf-4f57-be96-4527e2ec511f</td>\n      <td>POLYGON ((532746.814 181786.892, 532248.250 18...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>E01000003</td>\n      <td>City of London 001C</td>\n      <td>City of London 001C</td>\n      <td>532239</td>\n      <td>182033</td>\n      <td>-0.095320</td>\n      <td>51.52174</td>\n      <td>9f765b55-2061-484a-862b-fa0325991616</td>\n      <td>POLYGON ((532293.068 182068.422, 532419.592 18...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>E01000005</td>\n      <td>City of London 001E</td>\n      <td>City of London 001E</td>\n      <td>533581</td>\n      <td>181283</td>\n      <td>-0.076270</td>\n      <td>51.51468</td>\n      <td>a55c4c31-ef1c-42fc-bfa9-07c8f2025928</td>\n      <td>POLYGON ((533604.245 181418.129, 533743.689 18...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>E01000006</td>\n      <td>Barking and Dagenham 016A</td>\n      <td>Barking and Dagenham 016A</td>\n      <td>544994</td>\n      <td>184274</td>\n      <td>0.089317</td>\n      <td>51.53875</td>\n      <td>9cdabaa8-d9bd-4a94-bb3b-98a933ceedad</td>\n      <td>POLYGON ((545271.918 184183.948, 545296.314 18...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe will then pass the travel and demand datasets into our `FacilityLocationObjective`; the site df will be used afterwards.\n\n::: {#fefff821 .cell execution_count=10}\n``` {.python .cell-code}\nlocation_problem_brighton = FacilityLocationObjective(\n    demand=brighton_demand,\n    travel_matrix=brighton_travel,\n    merge_col=\"LSOA\",\n    demand_col=\"demand\"\n    )\n```\n:::\n\n\n![](assets/2024-06-24-19-27-49.png)\n\n### Outputs\n\n#### evaluate_solution\n\nThis is the output of the evaluate_solution method.\n\n![](assets/2024-06-24-19-29-00.png)\n\nAnd now we can easily pass in a range of solutions - including with different numbers of sites.\n\nNote the column names changing to reflect the site indices we are passing in.\n\n![](assets/2024-06-24-19-29-31.png)\n\nNow we bring in our code from an earlier chapter to calculate every possible combination of a certain number of facilities.\n\n::: {#ca4f4a0b .cell execution_count=11}\n``` {.python .cell-code}\nfrom itertools import combinations\nimport numpy as np\n\ndef all_combinations(n_facilities, p):\n    facility = np.arange(n_facilities, dtype=np.uint8)\n    return [np.array(a) for a in combinations(facility, p)]\n```\n:::\n\n\nWe could even loop through this to find every combination with every possible number of facilities…\n\n::: {#a3b0d89c .cell execution_count=12}\n``` {.python .cell-code}\npossible_combinations_brighton = all_combinations(\n    len(location_problem_brighton.travel_matrix.columns),\n    4\n    )\n\npossible_combinations_brighton\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n[array([0, 1, 2, 3], dtype=uint8),\n array([0, 1, 2, 4], dtype=uint8),\n array([0, 1, 2, 5], dtype=uint8),\n array([0, 1, 3, 4], dtype=uint8),\n array([0, 1, 3, 5], dtype=uint8),\n array([0, 1, 4, 5], dtype=uint8),\n array([0, 2, 3, 4], dtype=uint8),\n array([0, 2, 3, 5], dtype=uint8),\n array([0, 2, 4, 5], dtype=uint8),\n array([0, 3, 4, 5], dtype=uint8),\n array([1, 2, 3, 4], dtype=uint8),\n array([1, 2, 3, 5], dtype=uint8),\n array([1, 2, 4, 5], dtype=uint8),\n array([1, 3, 4, 5], dtype=uint8),\n array([2, 3, 4, 5], dtype=uint8)]\n```\n:::\n:::\n\n\n### Obtaining solution metrics in a loop\n\nNow we can loop through every possible combination and save the outputs.\n\n::: {#128c3587 .cell execution_count=13}\n``` {.python .cell-code}\noutputs = []\n\nfor possible_solution in possible_combinations_brighton:\n    outputs.append(\n        location_problem_brighton.generate_solution_metrics(\n        possible_solution\n    )\n)\n```\n:::\n\n\nAnd easily turn our list of dictionaries into a dataframe!\n\n::: {#07658814 .cell execution_count=14}\n``` {.python .cell-code}\npd.DataFrame(outputs)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>site_indices</th>\n      <th>site_names</th>\n      <th>weighted_average</th>\n      <th>unweighted_average</th>\n      <th>max</th>\n      <th>problem_df</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>[0, 1, 2, 3]</td>\n      <td>Site 1, Site 2, Site 3, Site 4</td>\n      <td>313.257086</td>\n      <td>312.565758</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>[0, 1, 2, 4]</td>\n      <td>Site 1, Site 2, Site 3, Site 5</td>\n      <td>374.295378</td>\n      <td>370.452061</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>[0, 1, 2, 5]</td>\n      <td>Site 1, Site 2, Site 3, Site 6</td>\n      <td>368.551505</td>\n      <td>355.460000</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>[0, 1, 3, 4]</td>\n      <td>Site 1, Site 2, Site 4, Site 5</td>\n      <td>397.907659</td>\n      <td>385.938061</td>\n      <td>1302.58</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>[0, 1, 3, 5]</td>\n      <td>Site 1, Site 2, Site 4, Site 6</td>\n      <td>410.033802</td>\n      <td>388.522909</td>\n      <td>1371.46</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>[0, 1, 4, 5]</td>\n      <td>Site 1, Site 2, Site 5, Site 6</td>\n      <td>460.215392</td>\n      <td>436.115273</td>\n      <td>1302.58</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>[0, 2, 3, 4]</td>\n      <td>Site 1, Site 3, Site 4, Site 5</td>\n      <td>304.810704</td>\n      <td>306.939576</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 1   ...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>[0, 2, 3, 5]</td>\n      <td>Site 1, Site 3, Site 4, Site 6</td>\n      <td>313.630625</td>\n      <td>311.418303</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 1   ...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>[0, 2, 4, 5]</td>\n      <td>Site 1, Site 3, Site 5, Site 6</td>\n      <td>363.242023</td>\n      <td>354.221818</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 1   ...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>[0, 3, 4, 5]</td>\n      <td>Site 1, Site 4, Site 5, Site 6</td>\n      <td>414.657901</td>\n      <td>393.878606</td>\n      <td>1302.58</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>[1, 2, 3, 4]</td>\n      <td>Site 2, Site 3, Site 4, Site 5</td>\n      <td>316.865395</td>\n      <td>319.753939</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 2   ...</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>[1, 2, 3, 5]</td>\n      <td>Site 2, Site 3, Site 4, Site 6</td>\n      <td>311.756166</td>\n      <td>304.151576</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 2   ...</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>[1, 2, 4, 5]</td>\n      <td>Site 2, Site 3, Site 5, Site 6</td>\n      <td>379.697853</td>\n      <td>370.415455</td>\n      <td>1001.33</td>\n      <td>LSOA  demand  Site 2   ...</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>[1, 3, 4, 5]</td>\n      <td>Site 2, Site 4, Site 5, Site 6</td>\n      <td>399.681921</td>\n      <td>382.101333</td>\n      <td>1302.58</td>\n      <td>LSOA  demand  Site 2  S...</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>[2, 3, 4, 5]</td>\n      <td>Site 3, Site 4, Site 5, Site 6</td>\n      <td>306.446684</td>\n      <td>302.913394</td>\n      <td>1001.33</td>\n      <td>LSOA  demand   Site 3  ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThen it’s easy to find the best combinations and tidy up the output table.\n\n::: {#11cf50e2 .cell execution_count=15}\n``` {.python .cell-code}\npd.DataFrame(outputs).sort_values('weighted_average').round(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>site_indices</th>\n      <th>site_names</th>\n      <th>weighted_average</th>\n      <th>unweighted_average</th>\n      <th>max</th>\n      <th>problem_df</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>[0, 2, 3, 4]</td>\n      <td>Site 1, Site 3, Site 4, Site 5</td>\n      <td>304.8</td>\n      <td>306.9</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 1   ...</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>[2, 3, 4, 5]</td>\n      <td>Site 3, Site 4, Site 5, Site 6</td>\n      <td>306.4</td>\n      <td>302.9</td>\n      <td>1001.3</td>\n      <td>LSOA  demand   Site 3  ...</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>[1, 2, 3, 5]</td>\n      <td>Site 2, Site 3, Site 4, Site 6</td>\n      <td>311.8</td>\n      <td>304.2</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 2   ...</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>[0, 1, 2, 3]</td>\n      <td>Site 1, Site 2, Site 3, Site 4</td>\n      <td>313.3</td>\n      <td>312.6</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>[0, 2, 3, 5]</td>\n      <td>Site 1, Site 3, Site 4, Site 6</td>\n      <td>313.6</td>\n      <td>311.4</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 1   ...</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>[1, 2, 3, 4]</td>\n      <td>Site 2, Site 3, Site 4, Site 5</td>\n      <td>316.9</td>\n      <td>319.8</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 2   ...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>[0, 2, 4, 5]</td>\n      <td>Site 1, Site 3, Site 5, Site 6</td>\n      <td>363.2</td>\n      <td>354.2</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 1   ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>[0, 1, 2, 5]</td>\n      <td>Site 1, Site 2, Site 3, Site 6</td>\n      <td>368.6</td>\n      <td>355.5</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>[0, 1, 2, 4]</td>\n      <td>Site 1, Site 2, Site 3, Site 5</td>\n      <td>374.3</td>\n      <td>370.5</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>[1, 2, 4, 5]</td>\n      <td>Site 2, Site 3, Site 5, Site 6</td>\n      <td>379.7</td>\n      <td>370.4</td>\n      <td>1001.3</td>\n      <td>LSOA  demand  Site 2   ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>[0, 1, 3, 4]</td>\n      <td>Site 1, Site 2, Site 4, Site 5</td>\n      <td>397.9</td>\n      <td>385.9</td>\n      <td>1302.6</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>[1, 3, 4, 5]</td>\n      <td>Site 2, Site 4, Site 5, Site 6</td>\n      <td>399.7</td>\n      <td>382.1</td>\n      <td>1302.6</td>\n      <td>LSOA  demand  Site 2  S...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>[0, 1, 3, 5]</td>\n      <td>Site 1, Site 2, Site 4, Site 6</td>\n      <td>410.0</td>\n      <td>388.5</td>\n      <td>1371.5</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>[0, 3, 4, 5]</td>\n      <td>Site 1, Site 4, Site 5, Site 6</td>\n      <td>414.7</td>\n      <td>393.9</td>\n      <td>1302.6</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>[0, 1, 4, 5]</td>\n      <td>Site 1, Site 2, Site 5, Site 6</td>\n      <td>460.2</td>\n      <td>436.1</td>\n      <td>1302.6</td>\n      <td>LSOA  demand  Site 1  S...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd, since we stored the combinations in our dataframe too, we can easily pull this out by chaining together a few steps.\n\n::: {#24280328 .cell execution_count=16}\n``` {.python .cell-code}\npd.DataFrame(outputs).sort_values('weighted_average').head(1)['site_names'].values\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray(['Site 1, Site 3, Site 4, Site 5'], dtype=object)\n```\n:::\n:::\n\n\n### Plotting the best solution\n\nWe can now put this all together with the map plotting skills we’ve learned over the last few sessions.\n\nWhen plotting our sites as well, we can ensure we are only plotting the sites included in our solution - see the highlighted sections of the code below.\n\n![](assets/2024-06-24-22-00-36.png)\n\n:::{.callout-info}\nLet's explore what the output of the first line of code is:\n\n::: {#9dde8da8 .cell execution_count=17}\n``` {.python .cell-code}\nbest_solution = pd.DataFrame(outputs).sort_values('weighted_average').head(1)\nbest_solution_df = best_solution['problem_df'].values[0]\n\nbest_solution_df\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LSOA</th>\n      <th>demand</th>\n      <th>Site 1</th>\n      <th>Site 3</th>\n      <th>Site 4</th>\n      <th>Site 5</th>\n      <th>min_cost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Brighton and Hove 027E</td>\n      <td>3627</td>\n      <td>773.93</td>\n      <td>444.29</td>\n      <td>491.85</td>\n      <td>607.54</td>\n      <td>444.29</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Brighton and Hove 027F</td>\n      <td>2323</td>\n      <td>757.39</td>\n      <td>517.57</td>\n      <td>561.07</td>\n      <td>578.97</td>\n      <td>517.57</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Brighton and Hove 027A</td>\n      <td>2596</td>\n      <td>763.24</td>\n      <td>517.98</td>\n      <td>410.40</td>\n      <td>681.23</td>\n      <td>410.40</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Brighton and Hove 029E</td>\n      <td>3132</td>\n      <td>743.62</td>\n      <td>660.36</td>\n      <td>379.72</td>\n      <td>731.58</td>\n      <td>379.72</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Brighton and Hove 029D</td>\n      <td>2883</td>\n      <td>665.85</td>\n      <td>658.20</td>\n      <td>313.00</td>\n      <td>744.50</td>\n      <td>313.00</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>Brighton and Hove 012A</td>\n      <td>2497</td>\n      <td>446.54</td>\n      <td>1108.11</td>\n      <td>519.16</td>\n      <td>626.02</td>\n      <td>446.54</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Brighton and Hove 005C</td>\n      <td>2570</td>\n      <td>469.80</td>\n      <td>1008.24</td>\n      <td>569.40</td>\n      <td>526.15</td>\n      <td>469.80</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>Brighton and Hove 012B</td>\n      <td>2051</td>\n      <td>464.53</td>\n      <td>1132.60</td>\n      <td>537.15</td>\n      <td>650.51</td>\n      <td>464.53</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>Brighton and Hove 005A</td>\n      <td>1164</td>\n      <td>567.49</td>\n      <td>1105.93</td>\n      <td>664.11</td>\n      <td>623.84</td>\n      <td>567.49</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>Brighton and Hove 005B</td>\n      <td>1097</td>\n      <td>495.50</td>\n      <td>1033.94</td>\n      <td>595.10</td>\n      <td>551.85</td>\n      <td>495.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>165 rows × 7 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis line then ensures we’re just pulling out the site indices for the best sites, and filtering our site dataframe to just those.\n\n::: {#e078c053 .cell execution_count=18}\n``` {.python .cell-code}\nbrighton_sites_bng = brighton_sites.to_crs('EPSG:27700').iloc[best_solution[\"site_indices\"].values[0]]\n\nbrighton_sites_bng\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>site</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Site 1</td>\n      <td>POINT (527142.275 106616.053)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Site 3</td>\n      <td>POINT (533356.778 105476.782)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Site 4</td>\n      <td>POINT (528513.424 105052.430)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Site 5</td>\n      <td>POINT (532421.163 109069.196)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nNow let's do the plotting.\n\n::: {#b2a07cd5 .cell execution_count=19}\n``` {.python .cell-code}\nbest_solution_df = pd.DataFrame(outputs).sort_values('weighted_average').head(1)['problem_df'].values[0]\n\nnearest_site_travel_brighton_gdf = pd.merge(\n    lsoa_boundaries,\n    best_solution_df,\n    right_on = \"LSOA\",\n    left_on = \"LSOA11NM\"\n)\n\nnearest_site_travel_brighton_gdf[\"min_cost_minutes\"] = nearest_site_travel_brighton_gdf[\"min_cost\"] / 60\n\nax = nearest_site_travel_brighton_gdf.plot(\n    \"min_cost_minutes\",\n    legend=True,\n    cmap=\"Blues\",\n    alpha=0.7,\n    edgecolor=\"black\",\n    linewidth=0.5,\n    figsize=(12,6)\n    )\n\nbrighton_sites_bng = brighton_sites.to_crs('EPSG:27700').iloc[best_solution[\"site_indices\"].values[0]]\n\nhospital_points = brighton_sites_bng.plot(ax=ax, color='magenta', markersize=60)\n\ncx.add_basemap(ax, crs=nearest_site_travel_brighton_gdf.crs.to_string(), zoom=14)\n\nfor x, y, label in zip(brighton_sites_bng.geometry.x,\n                      brighton_sites_bng.geometry.y,\n                      brighton_sites_bng.site):\n    ax.annotate(label, xy=(x,y), xytext=(10,3), textcoords=\"offset points\", bbox=dict(facecolor='white'))\n\nax.axis('off')\n\nplt.title(\"Travel Time (driving - minutes) for best sites in Brighton\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nText(0.5, 1.0, 'Travel Time (driving - minutes) for best sites in Brighton')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](fl_problems_coding_files/figure-html/cell-20-output-2.png){width=822 height=483}\n:::\n:::\n\n\n### Plotting all solutions\n\nAnd then it doesn’t take much effort to create a map showing weighted average travel times for every possible solution!\n\nThe key thing is that we just iterate through our dataframe of all solutions - pulling one row out at a time.\n\nIf we order them by weighted average first, the map in the top left is the best solution.\n\nThen it’s just our usual plot code - making sure to specify the axis we are plotting on to.\n\nAnother benefit of saving all these different things is that we can then easily add the weighted average travel time to the title of each plot!\n\n::: {#2df6a0a3 .cell execution_count=20}\n``` {.python .cell-code}\nfig, axs = plt.subplots(3, 5, figsize=(30, 15))\n\nfor i, ax in enumerate(fig.axes):\n\n    solution = pd.DataFrame(outputs).sort_values('weighted_average').iloc[[i]]\n    solution_df = solution['problem_df'].values[0]\n\n    nearest_site_travel_brighton_gdf = pd.merge(\n        lsoa_boundaries,\n        solution_df,\n        right_on = \"LSOA\",\n        left_on = \"LSOA11NM\"\n    )\n\n    nearest_site_travel_brighton_gdf[\"min_cost_minutes\"] = nearest_site_travel_brighton_gdf[\"min_cost\"] / 60\n\n    ax = nearest_site_travel_brighton_gdf.plot(\n        \"min_cost_minutes\",\n        legend=True,\n        cmap=\"Blues\",\n        alpha=0.7,\n        edgecolor=\"black\",\n        linewidth=0.5,\n        figsize=(12,6),\n        ax=ax\n        )\n\n    brighton_sites_bng = brighton_sites.to_crs('EPSG:27700').iloc[solution[\"site_indices\"].values[0]]\n\n    hospital_points = brighton_sites_bng.plot(ax=ax, color='magenta', markersize=60)\n\n    for x, y, label in zip(brighton_sites_bng.geometry.x,\n                        brighton_sites_bng.geometry.y,\n                        brighton_sites_bng.site):\n        ax.annotate(label, xy=(x,y), xytext=(10,3), textcoords=\"offset points\", bbox=dict(facecolor='white'))\n\n    ax.axis('off')\n\n    weighted_travel_time_solution = solution[\"weighted_average\"].values[0]\n    weighted_travel_time_solution_minutes = (weighted_travel_time_solution / 60).round(2)\n\n    ax.set_title(f\"Weighted Average:\\n{weighted_travel_time_solution_minutes} minutes\")\n```\n\n::: {.cell-output .cell-output-display}\n![](fl_problems_coding_files/figure-html/cell-21-output-1.png){width=2249 height=1128}\n:::\n:::\n\n\n### Other ways to display the output\n\nConsider other ways to display the outputs too.\n\n::: {#57ece239 .cell execution_count=21}\n``` {.python .cell-code}\nimport plotly.express as px\n\noutputs_df = pd.DataFrame(outputs)\noutputs_df['weighted_average_minutes'] = (outputs_df['weighted_average']/60).round(2)\n\npx.bar(\n    data_frame=outputs_df.sort_values(\"weighted_average_minutes\", ascending=False),\n    y=\"site_names\",\n    x=\"weighted_average_minutes\",\n    title=\"Possible Site Combinations\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"54f39341-c872-43b7-8211-197d64c5ed89\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"54f39341-c872-43b7-8211-197d64c5ed89\")) {                    Plotly.newPlot(                        \"54f39341-c872-43b7-8211-197d64c5ed89\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"weighted_average_minutes=%{x}\\u003cbr\\u003esite_names=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"h\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[7.67,6.91,6.83,6.66,6.63,6.33,6.24,6.14,6.05,5.28,5.23,5.22,5.2,5.11,5.08],\"xaxis\":\"x\",\"y\":[\"Site 1, Site 2, Site 5, Site 6\",\"Site 1, Site 4, Site 5, Site 6\",\"Site 1, Site 2, Site 4, Site 6\",\"Site 2, Site 4, Site 5, Site 6\",\"Site 1, Site 2, Site 4, Site 5\",\"Site 2, Site 3, Site 5, Site 6\",\"Site 1, Site 2, Site 3, Site 5\",\"Site 1, Site 2, Site 3, Site 6\",\"Site 1, Site 3, Site 5, Site 6\",\"Site 2, Site 3, Site 4, Site 5\",\"Site 1, Site 3, Site 4, Site 6\",\"Site 1, Site 2, Site 3, Site 4\",\"Site 2, Site 3, Site 4, Site 6\",\"Site 3, Site 4, Site 5, Site 6\",\"Site 1, Site 3, Site 4, Site 5\"],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"weighted_average_minutes\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"site_names\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Possible Site Combinations\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('54f39341-c872-43b7-8211-197d64c5ed89');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n## Full Code Example\n\nFinally, here is a full copyable code example for this section.\n\n::: {#4b6ebcd2 .cell execution_count=22}\n``` {.python .cell-code}\nfrom itertools import combinations\nimport numpy as np\nimport pandas as pd\nimport geopandas\nimport contextily as cx\nimport matplotlib.pyplot as plt\n\n# Tweaked WeightedAverageObjective from Metapy package\n# https://github.com/health-data-science-OR/healthcare-logistics/tree/master/optimisation/metapy\n# Credit: Tom Monks\n\nclass FacilityLocationObjective:\n    '''\n    Encapsulates logic for calculation of\n    metrics in a simple facility location problem\n\n    Demand and travel matrices must have a common column\n\n    demand: pd.dataframe:  Two column dataframe. One column should be labels for the\n    demand locations (e.g. LSOA identifiers, postcodes). Second column should contain\n    demand figures of some kind (e.g. number of historical cases)\n    If demand assumed to be equal, all values in this column could be 1.\n\n    travel_matrix: pd.dataframe: dataframe with columns representing sites\n    and rows representing locations demand will come from.\n    One column should be labels for the demand locations (e.g. LSOA identifiers, postcodes).\n    All other values will be either distance or time in float form.\n    No additional columns of information must be included or they will be used as part of the\n    calculation of the lowest-cost solution, which may lead to incorrect results.\n    '''\n    def __init__(self, demand, travel_matrix, merge_col, demand_col):\n        '''\n        Store the demand and travel times\n\n        Args:\n            demand: pd.DataFrame:\n\n            travel_matrix: pd.DataFrame:\n        '''\n        self.demand = demand.set_index(merge_col)\n        self.travel_matrix = travel_matrix.set_index(merge_col)\n        self.demand_col = demand_col\n\n\n    def evaluate_solution(self, site_list):\n        '''\n        Calculates the\n\n        Args:\n            site_list: list: column indices of solution to evaluate\n                            (to apply to travel matrix)\n\n        Returns:\n            Pandas dataframe to pass to evaluation functions\n\n        '''\n\n        active_facilities = self.travel_matrix.iloc[:, site_list].copy()\n\n        # Assume travel to closest facility\n        # Need to drop the column that contains\n        active_facilities['min_cost'] = active_facilities.min(axis=1)\n\n\n        # Merge demand and travel times into a single DataFrame\n        problem = self.demand.merge(active_facilities,\n                                    left_index=True, right_index=True,\n                                    how='inner')\n\n        return problem.reset_index()\n\n\n    def generate_solution_metrics(self, site_list):\n        '''\n        Calculates the weighted average travel time for selected sites\n\n        Args:\n            site_list: list or np.array: A list of site IDs as a list or array (e.g. [0, 3, 4])\n            merge_col: string: The column name to use for merging the data.\n            n_patients_or_referrals_col: string: The column name to use for the number of patients or referrals.\n\n        Returns:\n            A tuple containing the problem and the maximum travel time.\n        '''\n        problem = self.evaluate_solution(site_list)\n\n        # Return weighted average\n        weighted_average = np.average(problem['min_cost'], weights=problem[self.demand_col])\n        unweighted_average = np.average(problem['min_cost'])\n        max_travel = np.max(problem['min_cost'])\n\n        return {\n            'site_indices': site_list,\n            'site_names': \", \".join(self.travel_matrix.columns[site_list].tolist()),\n            'weighted_average': weighted_average,\n            'unweighted_average': unweighted_average,\n            'max': max_travel,\n            'problem_df': problem\n        }\n\ndef all_combinations(n_facilities, p):\n    facility = np.arange(n_facilities, dtype=np.uint8)\n    return [np.array(a) for a in combinations(facility, p)]\n\nbrighton_demand = pd.read_csv(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/brighton_demand.csv\").drop(columns=[\"Unnamed: 0\"])\n\nbrighton_sites = geopandas.read_file(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/brighton_sites.geojson\")\n\nbrighton_travel = pd.read_csv(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/brighton_travel_matrix_driving.csv\").drop(columns=[\"Unnamed: 0\"])\n\nlsoa_boundaries = geopandas.read_file(\"https://raw.githubusercontent.com/hsma-programme/h6_3d_facility_location_problems/main/h6_3d_facility_location_problems/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson\")\n\nlocation_problem_brighton = FacilityLocationObjective(\n    demand=brighton_demand,\n    travel_matrix=brighton_travel,\n    merge_col=\"LSOA\",\n    demand_col=\"demand\"\n    )\n\npossible_combinations_brighton = all_combinations(\n    len(location_problem_brighton.travel_matrix.columns),\n    4\n    )\n\noutputs = []\n\nfor possible_solution in possible_combinations_brighton:\n    outputs.append(\n        location_problem_brighton.generate_solution_metrics(\n        possible_solution\n    )\n)\n\nbest_solution = pd.DataFrame(outputs).sort_values('weighted_average').head(1)\nbest_solution_df = best_solution['problem_df'].values[0]\n\nfig, axs = plt.subplots(3, 5, figsize=(30, 15))\n\nfor i, ax in enumerate(fig.axes):\n\n    solution = pd.DataFrame(outputs).sort_values('weighted_average').iloc[[i]]\n    solution_df = solution['problem_df'].values[0]\n\n    nearest_site_travel_brighton_gdf = pd.merge(\n        lsoa_boundaries,\n        solution_df,\n        right_on = \"LSOA\",\n        left_on = \"LSOA11NM\"\n    )\n\n    nearest_site_travel_brighton_gdf[\"min_cost_minutes\"] = nearest_site_travel_brighton_gdf[\"min_cost\"] / 60\n\n    ax = nearest_site_travel_brighton_gdf.plot(\n        \"min_cost_minutes\",\n        legend=True,\n        cmap=\"Blues\",\n        alpha=0.7,\n        edgecolor=\"black\",\n        linewidth=0.5,\n        figsize=(12,6),\n        ax=ax\n        )\n\n    brighton_sites_bng = brighton_sites.to_crs('EPSG:27700').iloc[solution[\"site_indices\"].values[0]]\n\n    hospital_points = brighton_sites_bng.plot(ax=ax, color='magenta', markersize=60)\n\n    for x, y, label in zip(brighton_sites_bng.geometry.x,\n                        brighton_sites_bng.geometry.y,\n                        brighton_sites_bng.site):\n        ax.annotate(label, xy=(x,y), xytext=(10,3), textcoords=\"offset points\", bbox=dict(facecolor='white'))\n\n    ax.axis('off')\n\n    weighted_travel_time_solution = solution[\"weighted_average\"].values[0]\n    weighted_travel_time_solution_minutes = (weighted_travel_time_solution / 60).round(2)\n\n    ax.set_title(f\"Weighted Average:\\n{weighted_travel_time_solution_minutes} minutes\")\n```\n\n::: {.cell-output .cell-output-display}\n![](fl_problems_coding_files/figure-html/cell-23-output-1.png){width=2249 height=1128}\n:::\n:::\n\n\n",
    "supporting": [
      "fl_problems_coding_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}