{
  "hash": "9763f00c5adf866ad555ad842b66f812",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - pyodide\n---\n\n\n\n# Static Maps with Matplotlib\n\n\n::: {.cell}\n\n:::\n\n<style>\na.glossary {\n  color: #8A1E1E;\n  text-decoration: underline;\n  cursor: help;\n  position: relative;\n}\n\n/* only needed for popup = \"click\" */\n/* popup-definition */\na.glossary .def {\n  display: none;\n  position: absolute;\n  z-index: 1;\n  width: 200px;\n  bottom: 100%;\n  left: 50%;\n  margin-left: -100px;\n  background-color: #333;\n  color: white;\n  padding: 5px;\n  border-radius: 6px;\n}\n/* show on click */\na.glossary:active .def {\n  display: inline-block;\n}\n/* triangle arrow */\na.glossary:active .def::after {\n  content: ' ';\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #333 transparent transparent transparent;\n}\n</style>\n\n\nFor all of the code on this page, we need to first import geopandas.\n\nWe will also load in matplotlib so we can modify the default plots that are created by geopandas, and pandas so we can import and manipulate tabular data files.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport geopandas\nimport matplotlib.pyplot as plt\nimport pandas as pd\n```\n:::\n\n\n## Simple plots with the geopandas plot method\n\n### Choropleths\n\nGeopandas has a great built-in method for quickly plotting your data.\n\nJust call .plot() on your dataframe!\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlsoa_2011_crime_figures_df = geopandas.read_file(\"https://github.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/raw/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/lsoa_2011_sw5forces_crime_figures.gpkg\")\n\nlsoa_2011_crime_figures_df.plot()\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Point data\n\nThe `.plot` method works for point data too.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsw_5forces_stop_and_search_df = pd.read_csv(\"https://github.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/raw/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/sw_5forces_stop_and_search.csv\")\n\nsw_5forces_stop_and_search_gdf = geopandas.GeoDataFrame(\n    sw_5forces_stop_and_search_df, # Our pandas dataframe\n    geometry = geopandas.points_from_xy(\n        sw_5forces_stop_and_search_df['Longitude'], # Our 'x' column (horizontal position of points)\n        sw_5forces_stop_and_search_df['Latitude'] # Our 'y' column (vertical position of points)\n        ),\n    crs = 'EPSG:4326' # the coordinate reference system of the data - use EPSG:4326 if you are unsure\n    )\n\nsw_5forces_stop_and_search_gdf.plot()\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n:::\n\n\n## Colouring maps by a column\n\n### Choropleths\n\nYou can also pass a column name to colour the plot by the values in that column…\n\nLet's see what columns we can choose from.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlsoa_2011_crime_figures_df.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['LSOA11CD', 'LSOA11NM', 'LSOA11NMW', 'Area',\n       'sw_5forces_street_by_lsoa_Anti-social behaviour',\n       'sw_5forces_street_by_lsoa_Bicycle theft',\n       'sw_5forces_street_by_lsoa_Burglary',\n       'sw_5forces_street_by_lsoa_Criminal damage and arson',\n       'sw_5forces_street_by_lsoa_Drugs',\n       'sw_5forces_street_by_lsoa_Other crime',\n       'sw_5forces_street_by_lsoa_Other theft',\n       'sw_5forces_street_by_lsoa_Possession of weapons',\n       'sw_5forces_street_by_lsoa_Public order',\n       'sw_5forces_street_by_lsoa_Robbery',\n       'sw_5forces_street_by_lsoa_Shoplifting',\n       'sw_5forces_street_by_lsoa_Theft from the person',\n       'sw_5forces_street_by_lsoa_Vehicle crime',\n       'sw_5forces_street_by_lsoa_Violence and sexual offences',\n       'sw_5forces_street_by_lsoa_Total number crimes', 'geometry'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n\nLet's plot the 'other crime' counts by LSOA.\n\nThough depending on your dataset, you may struggle to see the impact!\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlsoa_2011_crime_figures_df.plot(column=\"sw_5forces_street_by_lsoa_Other crime\")\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-7-5.png){width=672}\n:::\n:::\n\n\nYou can change the column name to explore different elements of your data.\n\n### Point data\n\nPassing in a column name to the `.plot` method works for point data as well!\n\nNote that we can pass in `column=` before the column name, or we can just pass it in like in the cell below.\n\nAs long as it is the *first* argument we pass in, Geopandas will recognise that it is the column we want to colour our geometry data by.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsw_5forces_stop_and_search_gdf.plot(\"Gender\")\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-8-7.png){width=672}\n:::\n:::\n\n\n\n## Basemaps\nA basemap - a recognisable map behind our points - will help our viewers understand what’s going on.\n\nFirst, we need to import an additional library called contextily.\n\nThe standard alias the documentation recommends is `cx`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport contextily as cx\n```\n:::\n\n\nLet's add our first basemap.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sw_5forces_stop_and_search_gdf.plot()\n\ncx.add_basemap(\n    ax, # the figure we created using our plot method\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(), # we can pull the CRS out of the geodataframe!\n    zoom=8 # zoom level\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-10-9.png){width=672}\n:::\n:::\n\n\n### Zoom level in basemaps\n\nChanging the zoom level will increase the quality of the map - but at the cost of longer load times.\n\n**Zoom level: 4**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sw_5forces_stop_and_search_gdf.plot()\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(),\n    zoom=4 # zoom level\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-11-11.png){width=672}\n:::\n:::\n\n\n\n**Zoom level: 10**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sw_5forces_stop_and_search_gdf.plot()\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(),\n    zoom=10 # zoom level\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-12-13.png){width=672}\n:::\n:::\n\n\n## Coordinate reference systems and plots\n\n:::{.tooltip-hint}\nBut why does the UK look a bit wider than usual?\n\nIt’s because of our old friend the CRS.\n\nWe used EPSG:4326 to import our data.\n\nNow, when we look online, we’ll see lots of recommendations to use the British National Grid - EPSG:27700 - when plotting data concerning the uk.\n\nLet’s first try that by changing our import statement - will this work?\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsw_5forces_stop_and_search_gdf_27700 = geopandas.GeoDataFrame(\n    sw_5forces_stop_and_search_df, # Our pandas dataframe\n    geometry = geopandas.points_from_xy(\n        sw_5forces_stop_and_search_df['Longitude'], # Our 'x' column (horizontal position of points)\n        sw_5forces_stop_and_search_df['Latitude'] # Our 'y' column (vertical position of points)\n        ),\n    crs = 'EPSG:27700'\n    )\n\nsw_5forces_stop_and_search_gdf_27700.plot()\n\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-13-15.png){width=672}\n:::\n:::\n\n\nNow our new map appears a bit… sea-y.\n\nWhich is fine if this is a map of crimes committed by pirates, but I’m pretty sure this isn’t.\n\nThis is because the BNSSG (EPSG:27700) expects coordinates in Northings and Eastings - not Latitude and Longitude!\n\nIf our dataset contains those as columns, we can go ahead and pass those in to the .points_from_xy() column and everything will be fine.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmy_gdf = geopandas.GeoDataFrame(\n    my_df, # Our pandas dataframe\n    geometry = geopandas.points_from_xy(\n        my_df['Eastings'], # Our 'x' column (horizontal position of points)\n        my_df['Northings'] # Our 'y' column (vertical position of points)\n        ),\n    crs = 'EPSG:27700' # British National Grid\n)\n```\n:::\n\n\nInstead, we will need to use the `to_crs()` method.\n:::\n\n### Changing CRS\n\nIf our dataset only has latitude and longitude, but we want it in Northings and Eastings (and the relevant projection too), then we need to transform our dataset.\n\nWe could try and look them up - but the easiest option is to transform our existing geodataframe to use a different CRS.\n\nWe use the .to_crs() method for this.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsw_5forces_stop_and_search_gdf = sw_5forces_stop_and_search_gdf.to_crs(\"EPSG:27700\")\n\nax = sw_5forces_stop_and_search_gdf.plot()\n\ncx.add_basemap(\n    ax, # the figure we created using our plot method\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(), # we can pull the CRS out of the geodataframe!\n    zoom=8 # zoom level\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-15-17.png){width=672}\n:::\n:::\n\n\nThis now looks closer to the printed maps we are used to seeing.\n\n![](assets/2024-06-19-22-55-51.png)\n\n## Legends\n\nRemember that the point colours weren't much use before? Well, we can fix that by asking the plot method for a legend.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sw_5forces_stop_and_search_gdf.plot(column=\"Gender\", legend=True)\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(),\n    zoom=6\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-16-19.png){width=672}\n:::\n:::\n\n\n## Customising your plots with matplotlib\n\nNow, when we use the .plot() method, geopandas is calling on our old friend matplotlib to do the plotting.\n\nThe benefit of this is that we can use lots of standard matplotlib techniques to make our plots shine!\n\n### Turning off axis labels\n\nFirst, let’s turn off the axis labels.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sw_5forces_stop_and_search_gdf.plot(column=\"Gender\", legend=True)\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(),\n    zoom=6\n    )\n\n# Turn off the numbers and axis tick marks around the edge of the map\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(260632.38289470828, 604153.6141031217, 52383.152460906495, 442416.8273138181)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-17-21.png){width=672}\n:::\n:::\n\n\n### Adjusting Map Size\n\nNow, it’s a bit tricky to see much here at the moment.\n\nHow can we make the plot bigger?\n\nWe just pass the ‘figsize’ argument to the original .plot() method.\n\nThis is a ‘tuple’ containing two numbers.\n\nThe horizontal width\n\nThe vertical height\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = sw_5forces_stop_and_search_gdf.plot(\n    column=\"Gender\",\n    legend=True,\n    figsize=(10, 10)\n    )\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf.crs.to_string(),\n    zoom=7\n    )\n\n# Turn off the numbers and axis tick marks around the edge of the map\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(260632.38289470828, 604153.6141031217, 52383.152460906495, 442416.8273138181)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-18-23.png){width=960}\n:::\n:::\n\n\n## Adjusting map extent\n\nIf we look really really closely, it looks like some areas of this map might not be purple…\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = lsoa_2011_crime_figures_df.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-19-25.png){width=672}\n:::\n:::\n\n\n### Zooming\n\nBy using the matplotlib methods for setting the x and y axis limits, we can zoom our map in to a particular region.\n\nIt’s helpful to start off with the axis ticks visible so you can work out the range you need to set.\n\nNote that the legend extends beyond what we’re seeing in this section of the map - it’s still based on this dataframe!\n\nIf this was a problem, we would filter the dataframe instead.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = lsoa_2011_crime_figures_df.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True\n    )\n\nax.set_xlim(285000,300000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(285000.0, 300000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\nax.set_ylim(85000,100000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(85000.0, 100000.0)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-20-27.png){width=672}\n:::\n:::\n\n\n### Adjusting map extent (filtering a dataframe by coordinates)\n\nHere, we’ve used the same coordinates but applied it directly to the dataframe.\n\nOur legend and colourschemes are not based on the maximum values in the area of interest - not the whole dataset.\n\nBut notice we’ve lost the surrounding LSOAs that don’t intersect with or exist entirely inside the box we’ve specified!\n\nWe need to use [the `cx` method from Geopandas](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.cx.html). This stands for 'coordinate indexer'.\n\n:::{.callout-warning}\n`.cx` is not related to the `contextily` package - they just unfortunately have the same names!\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 285000,300000\nymin, ymax = 85000,100000\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[xmin:xmax, ymin:ymax]\n\nax = lsoa_2011_crime_figures_df_exeter.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-21-29.png){width=672}\n:::\n:::\n\n\n:::{.callout-tip}\n\nWe could pass our limits in directly to the cx method instead - it's just a bit easier to keep track of them externally.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[285000:300000, 85000:100000]\n\nax = lsoa_2011_crime_figures_df_exeter.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-22-31.png){width=672}\n:::\n:::\n\n\n:::\n\n## Opacity (transparency)\n\nIt would be quite useful to have some context on our map of exactly where this subset is.\n\nBut if we just overlay it, it’s not that helpful.\n\n(Notice that I’ve turned the zoom value right up - because we’re looking at a smaller area now, this doesn’t impact the load time so much)\n\n### Choropleths\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 290000,295000\nymin, ymax = 91000,95000\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[xmin:xmax, ymin:ymax]\n\nax = lsoa_2011_crime_figures_df_exeter.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True,\n    figsize=(10,7),\n    alpha=0.4 # Add this - max is 1, values closer to 0 are more transparent\n    )\n\ncx.add_basemap(\n    ax,\n    crs=lsoa_2011_crime_figures_df_exeter.crs.to_string(),\n    zoom=13\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-23-33.png){width=960}\n:::\n:::\n\n\n### Point data\n\nThe command is identical for point data.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 300000,350000\nymin, ymax = 100000,150000\nsw_5forces_stop_and_search_gdf_subset = sw_5forces_stop_and_search_gdf.cx[xmin:xmax, ymin:ymax]\n\nax = sw_5forces_stop_and_search_gdf_subset.plot(\n    column=\"Gender\",\n    legend=True,\n    figsize=(10, 7),\n    cmap=\"bwr\", # Set a colourmap here\n    alpha=0.3\n    )\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf_subset.crs.to_string(),\n    zoom=12\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(298650.7467424413, 352424.2217003847, 98242.32626640763, 152376.6682640599)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-24-35.png){width=960}\n:::\n:::\n\n\n## Colourschemes\n\nThe cmap argument allows us to change the colourscheme that will be used for the plot.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 290000,295000\nymin, ymax = 91000,95000\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[xmin:xmax, ymin:ymax]\n\nax = lsoa_2011_crime_figures_df_exeter.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True,\n    figsize=(10,7),\n    cmap=\"Reds\",\n    alpha=0.7\n    )\n\ncx.add_basemap(\n    ax,\n    crs=lsoa_2011_crime_figures_df_exeter.crs.to_string(),\n    zoom=15\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-25-37.png){width=960}\n:::\n:::\n\n\n### Point data\n\nOnce again, this is the same for point data.\n\nWe can see the different categories a lot more clearly now!\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 300000,350000\nymin, ymax = 100000,150000\nsw_5forces_stop_and_search_gdf_subset = sw_5forces_stop_and_search_gdf.cx[xmin:xmax, ymin:ymax]\n\nax = sw_5forces_stop_and_search_gdf_subset.plot(\n    column=\"Gender\",\n    legend=True,\n    figsize=(10, 7),\n    cmap=\"bwr\", # Set a colourmap here\n    alpha=0.3\n    )\n\ncx.add_basemap(\n    ax,\n    crs=sw_5forces_stop_and_search_gdf_subset.crs.to_string(),\n    zoom=12\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(298650.7467424413, 352424.2217003847, 98242.32626640763, 152376.6682640599)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-26-39.png){width=960}\n:::\n:::\n\n\n### Finding colourscheme parameters\n\nA full list of colourmaps can be found in the matplotlib documentation:\n\nhttps://matplotlib.org/stable/users/explain/colors/colormaps.html\n\n![](assets/2024-06-19-23-05-54.png)\n\nQualitative colourmaps are good for categories.\n\n## Showing polygon boundaries\n\nWe can set the edgecolor argument in the .plot() method to make the boundaries of each LSOA more distinct in this plot.\n\nYou can also pass the linewidth parameter to adjust this further.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 290000,295000\nymin, ymax = 91000,95000\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[xmin:xmax, ymin:ymax]\n\nax = lsoa_2011_crime_figures_df_exeter.plot(\n    column=\"sw_5forces_street_by_lsoa_Total number crimes\",\n    legend=True,\n    figsize=(10,7),\n    edgecolor='black', # Let's add an edgecolour while we're at it!\n    cmap=\"Reds\",\n    linewidth=2,\n    alpha=0.7\n    )\n\ncx.add_basemap(\n    ax,\n    crs=lsoa_2011_crime_figures_df_exeter.crs.to_string(),\n    zoom=15\n    )\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-27-41.png){width=960}\n:::\n:::\n\n\n## Point sizes\n\nWe can also adjust the size of different points.\n\nHere is a map with the default point size set.\n\nWe're going to first load in a new dataset.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngp_list = pd.read_csv(\"https://github.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/raw/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/gp_surgery_locations_plus_patient_list_size.csv\")\n\ngp_list_gdf = geopandas.GeoDataFrame(\n    gp_list, # Our pandas dataframe\n    geometry = geopandas.points_from_xy(\n        gp_list['result_eastings'], # Our 'x' column (horizontal position of points)\n        gp_list['result_northings'] # Our 'y' column (vertical position of points)\n        ),\n    crs = 'EPSG:27700'\n    )\n```\n:::\n\n\n### Adjusting all markers to the same size\n\nWe can adjust the `markersize` parameter to adjust how big each marker is.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = gp_list_gdf.plot(\n    figsize=(11, 8),\n    markersize=5,\n    alpha=0.5\n    )\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf.crs.to_string(),\n    zoom=6\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-29-43.png){width=1056}\n:::\n:::\n\n\n### Adjusting point sizes by a value in a dataframe\n\nWe can also pass in a column to have marker sizes that relate to a particular value.\n\nYou may need to divide or multiply the values in that column so that the marker sizes are reasonable for your map.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = gp_list_gdf.plot(\n    figsize=(11, 8),\n    markersize=gp_list_gdf['Total List Size']/1000,\n    alpha=0.5\n    )\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf.crs.to_string(),\n    zoom=6\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-30-45.png){width=1056}\n:::\n:::\n\n\n:::{.callout-warning}\n\nIf we didn't adjust the markersizes by a factor here, our map would be unusable!\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = gp_list_gdf.plot(\n    figsize=(11, 8),\n    markersize=gp_list_gdf['Total List Size'],\n    alpha=0.5\n    )\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf.crs.to_string(),\n    zoom=6\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-31-47.png){width=1056}\n:::\n:::\n\n:::\n\n### Adding a title\n\nIt’s easy to add a title to the plot as well.\n\nWe could use a format string with this to adjust it based on another value (e.g. titles for different regions in a for loop, or including an average or summary value per map)\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 80000,350000\nymin, ymax = 0,150000\ngp_list_gdf_sw = gp_list_gdf.cx[xmin:xmax, ymin:ymax]\n\nax = gp_list_gdf_sw.plot(\n    figsize=(11, 8),\n    markersize=gp_list_gdf_sw['Total List Size']/500,\n    alpha=0.8\n    )\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf_sw.crs.to_string(),\n    zoom=9\n    )\n\n# Add a title to our map\nplt.title(\"GP Practices in the South West\\nMarker Size Reflects Total Practice List Size\")\n\nax.axis('off')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(77832.45, 362546.55, 3326.8999999999996, 156339.1)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-32-49.png){width=1056}\n:::\n:::\n\n\n:::{.callout-tip}\nIn matplotlib plots, use the special character\n\n\\n\n\nto put a line break in your title.\n\n:::\n\n## Point Labels\n\nLabels are a little more complex - we need to use a for loop to iterate through each row in our dataframe and look at the position and text.\n\n### Basic labels\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 285000,298000\nymin, ymax = 62000,69000\ngp_list_gdf_torbay = gp_list_gdf.cx[xmin:xmax, ymin:ymax]\n\nax = gp_list_gdf_torbay.plot(\n    figsize=(11, 8),\n    markersize=gp_list_gdf_torbay['Total List Size']/100,\n    alpha=0.8\n    )\n\nfor x, y, label in zip(gp_list_gdf_torbay.geometry.x, gp_list_gdf_torbay.geometry.y, gp_list_gdf_torbay.name):\n    ax.annotate(label, xy=(x, y), xytext=(-3, -3), textcoords=\"offset points\")\n\nax.set_xlim(xmin, xmax)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(285000.0, 298000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\nax.set_ylim(ymin, ymax)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(62000.0, 69000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf_torbay.crs.to_string(),\n    zoom=14\n    )\n\nplt.title(\"GP Practices in Torbay\")\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-33-51.png){width=1056}\n:::\n:::\n\n\n### Wrapping labels to reduce overlap\n\nThe textwrap library can help us to make better labels.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport textwrap\n```\n:::\n\n\n\nThe textwrap.fill method wraps the labels at the number of characters (letters/spaces/numbers etc) that we specify - here, 15.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 285000,298000\nymin, ymax = 62000,69000\ngp_list_gdf_torbay = gp_list_gdf.cx[xmin:xmax, ymin:ymax]\n\nax = gp_list_gdf_torbay.plot(\n    figsize=(11, 8),\n    markersize=gp_list_gdf_torbay['Total List Size']/100,\n    alpha=0.8\n    )\n\nfor x, y, label in zip(gp_list_gdf_torbay.geometry.x, gp_list_gdf_torbay.geometry.y, gp_list_gdf_torbay.name):\n    wrapped_label = textwrap.fill(label,15).title()\n    ax.annotate(wrapped_label, xy=(x, y), xytext=(-3, -3), textcoords=\"offset points\")\n\nax.set_xlim(xmin, xmax)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(285000.0, 298000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\nax.set_ylim(ymin, ymax)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(62000.0, 69000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf_torbay.crs.to_string(),\n    zoom=14\n    )\n\nplt.title(\"GP Practices in Torbay\")\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-35-53.png){width=1056}\n:::\n:::\n\n\n### Intelligent placement of labels\n\nWe can take this even further with the adjustText library to automatically place labels that don’t overlap each other\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom adjustText import adjust_text\n```\n:::\n\n\nNote that we are importing a single function from the adjustText library with the code above.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 285000,298000\nymin, ymax = 62000,69000\ngp_list_gdf_torbay = gp_list_gdf.cx[xmin:xmax, ymin:ymax]\n\nax = gp_list_gdf_torbay.plot(\n    figsize=(14, 9),\n    markersize=gp_list_gdf_torbay['Total List Size']/100,\n    alpha=0.8\n    )\n\ntexts = []\n\nfor x, y, label in zip(gp_list_gdf_torbay.geometry.x, gp_list_gdf_torbay.geometry.y, gp_list_gdf_torbay.name):\n    wrapped_label = textwrap.fill(label,15).title()\n    texts.append(plt.text(x, y, wrapped_label))\n\n# Add a title to our map\nplt.title(\"GP Practices in Torbay\")\n\nax.set_xlim(xmin, xmax)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(285000.0, 298000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\nax.set_ylim(ymin, ymax)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(62000.0, 69000.0)\n```\n\n\n:::\n\n```{.python .cell-code}\n\ncx.add_basemap(\n    ax,\n    crs=gp_list_gdf_torbay.crs.to_string(),\n    zoom=13\n    )\n\nadjust_text(\n    texts,\n    force_explode=(0.05,0.05),\n    arrowprops=dict(arrowstyle=\"-\", color='k', lw=1),\n    time_lim=5\n    )\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-37-55.png){width=1344}\n:::\n:::\n\n\nIt won’t always be perfect - but it can be an improvement over not using this adjustment.\n\nYou can tweak various parameters within your `adjust_text` function call to change the outcome.\n\n- `force_explode` affects the force with which points will be pushed away from their origin\n- `time_lim` changes how long it will spend trying to avoid overlap\n\nMore parameters can be found in the documentation for the `adjustText` library.\n\n## Subplots\n\nSubplots are a powerful way to map multiple columns at once.\n\nIf you haven't already, make sure you import matplotlib with the following code.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nFirst, we set up empty subplots using this standard line of matplotlib code.\n\nWe set the number of rows, the number of columns, and the overall figure size.,\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, axs = plt.subplots(2, 3, figsize=(20, 15))\n```\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-39-57.png){width=1920}\n:::\n:::\n\n\n![](assets/2024-06-19-23-28-08.png)\n\nHow can we choose what we loop over?\n\nThe first round through will look like this\n\n![](assets/2024-06-19-23-28-41.png)\n\nThe second time like this\n\n![](assets/2024-06-19-23-29-03.png)\n\nand so on.\n\n### Code to create subplots for a series of columns in a dataframe\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, xmax = 290000,295000\nymin, ymax = 91000,95000\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df.cx[xmin:xmax, ymin:ymax]\n\nlsoa_2011_crime_figures_df_exeter = lsoa_2011_crime_figures_df_exeter.rename(columns=\n    {\n        'sw_5forces_street_by_lsoa_Anti-social behaviour': 'Anti-social behaviour',\n        'sw_5forces_street_by_lsoa_Bicycle theft': 'Bicycle theft',\n        'sw_5forces_street_by_lsoa_Burglary': 'Burglary',\n        'sw_5forces_street_by_lsoa_Criminal damage and arson': 'Criminal damage and arson',\n        'sw_5forces_street_by_lsoa_Drugs': 'Drugs',\n        'sw_5forces_street_by_lsoa_Total number crimes': 'Total number crimes'\n    }\n)\n\ncols = ['Anti-social behaviour', 'Bicycle theft', 'Burglary', 'Criminal damage and arson',\n        'Drugs', 'Total number crimes']\n\nfig, axs = plt.subplots(2, 3, figsize=(20, 15))\n\nfor i, ax in enumerate(fig.axes):\n    lsoa_2011_crime_figures_df_exeter.plot(cols[i], cmap=\"RdYlGn_r\", legend=True, ax=ax)\n\n    ax.axis('off')\n\n    ax.title.set_text(cols[i])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Axes: >\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n<Axes: >\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n<Axes: >\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n<Axes: >\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n<Axes: >\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n<Axes: >\n(288890.8320499536, 297274.4809500022, 89238.48039968988, 97217.69560001476)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](python_geopandas_matplotlib_files/figure-html/unnamed-chunk-40-59.png){width=1920}\n:::\n:::\n\n\n## Saving maps\n\nWhen you’re done working on your map, you can save this to an image file (e.g. jpg, png)\n\nYou could even do this in a loop and use the column name to determine the filename…\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.savefig(\"bike_theft_plot.jpg\")\n```\n:::\n",
    "supporting": [
      "python_geopandas_matplotlib_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}