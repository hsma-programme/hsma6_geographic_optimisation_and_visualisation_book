{
  "hash": "9ee6327f9ee9d4e05735a31802255cf4",
  "result": {
    "engine": "jupyter",
    "markdown": "# Reading files with Geopandas\n\nBefore doing anything else, we need to import the geopandas package!\n\nThe geopandas team don't recommend using an alias (i.e. we're not going to shorten the way we refer to geopandas).\n\n::: {#16e3f151 .cell execution_count=1}\n``` {.python .cell-code}\nimport geopandas\n```\n:::\n\n\n## Importing geojsons, geopackages or shape files\n\nWhen working with prepackaged geographic data types, they will usually be stored in the GeoJSON format, the geopackage (gpkg) format, or as a .shp file.\n\n:::{.callout-warning}\nShapefiles are a little more complex as they are a number of files with different extensions that all need to be distributed together - even though it's only the file with the extension '.shp' that we read in.\n\nGeojson and geopackages are often easier to distribute and download!\n:::\n\n### Files stored locally\n\nYou can refer to a range of geographic data file types stored locally.\n\n::: {#c6d1bb4c .cell execution_count=2}\n``` {.python .cell-code}\ncountries_gdf = geopandas.read_file(\"package.gpkg\")\n```\n:::\n\n\n### Files stored on the web\n\nYou can also directly refer to files stored on the web.\n\n::: {#c9f96b50 .cell execution_count=3}\n``` {.python .cell-code}\ndf = geopandas.read_file(\"http://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_land.geojson\")\n```\n:::\n\n\n### Zipped files\n\nYou can also directly refer to files stored as zip files by prefixing the file path with zip:///.\n\n::: {#04e288e3 .cell execution_count=4}\n``` {.python .cell-code}\nstates = geopandas.read_file(\"zip:///Users/name/Downloads/cb_2017_us_state_500k.zip\")\n```\n:::\n\n\nYou can read more about file imports in the geopandas documentation, which is embedded below.\n\n\n```{=html}\n<iframe width=\"780\" height=\"500\" src=\"https://geopandas.org/en/stable/docs/user_guide/io.html\" title=\"IO in geopandas\"></iframe>\n```\n\n\n# Exploring geopandas dataframes\n\nOnce you’ve read it in, it looks a lot like a pandas dataframe!\n\nEven better, you can do all of your normal pandas commands with it - like ‘head’ to view the first 5 rows.\n\n::: {#626f3721 .cell execution_count=5}\n``` {.python .cell-code}\nimport geopandas\n\ncrime_figures = geopandas.read_file(\"https://github.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/raw/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/lsoa_2011_sw5forces_crime_figures.gpkg\")\n\ncrime_figures.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LSOA11CD</th>\n      <th>LSOA11NM</th>\n      <th>LSOA11NMW</th>\n      <th>Area</th>\n      <th>sw_5forces_street_by_lsoa_Anti-social behaviour</th>\n      <th>sw_5forces_street_by_lsoa_Bicycle theft</th>\n      <th>sw_5forces_street_by_lsoa_Burglary</th>\n      <th>sw_5forces_street_by_lsoa_Criminal damage and arson</th>\n      <th>sw_5forces_street_by_lsoa_Drugs</th>\n      <th>sw_5forces_street_by_lsoa_Other crime</th>\n      <th>sw_5forces_street_by_lsoa_Other theft</th>\n      <th>sw_5forces_street_by_lsoa_Possession of weapons</th>\n      <th>sw_5forces_street_by_lsoa_Public order</th>\n      <th>sw_5forces_street_by_lsoa_Robbery</th>\n      <th>sw_5forces_street_by_lsoa_Shoplifting</th>\n      <th>sw_5forces_street_by_lsoa_Theft from the person</th>\n      <th>sw_5forces_street_by_lsoa_Vehicle crime</th>\n      <th>sw_5forces_street_by_lsoa_Violence and sexual offences</th>\n      <th>sw_5forces_street_by_lsoa_Total number crimes</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E01014370</td>\n      <td>Bath and North East Somerset 007A</td>\n      <td>Bath and North East Somerset 007A</td>\n      <td>374339</td>\n      <td>1476</td>\n      <td>75</td>\n      <td>172</td>\n      <td>181</td>\n      <td>45</td>\n      <td>21</td>\n      <td>445</td>\n      <td>12</td>\n      <td>541</td>\n      <td>34</td>\n      <td>975</td>\n      <td>107</td>\n      <td>34</td>\n      <td>917</td>\n      <td>5035</td>\n      <td>MULTIPOLYGON (((375207.458 165659.881, 375312....</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E01014371</td>\n      <td>Bath and North East Somerset 007B</td>\n      <td>Bath and North East Somerset 007B</td>\n      <td>410758</td>\n      <td>742</td>\n      <td>69</td>\n      <td>57</td>\n      <td>85</td>\n      <td>19</td>\n      <td>18</td>\n      <td>176</td>\n      <td>8</td>\n      <td>288</td>\n      <td>14</td>\n      <td>314</td>\n      <td>44</td>\n      <td>22</td>\n      <td>455</td>\n      <td>2311</td>\n      <td>MULTIPOLYGON (((375613.903 165217.218, 375635....</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E01014372</td>\n      <td>Bath and North East Somerset 007C</td>\n      <td>Bath and North East Somerset 007C</td>\n      <td>164486</td>\n      <td>270</td>\n      <td>15</td>\n      <td>60</td>\n      <td>68</td>\n      <td>13</td>\n      <td>7</td>\n      <td>98</td>\n      <td>1</td>\n      <td>129</td>\n      <td>12</td>\n      <td>8</td>\n      <td>15</td>\n      <td>14</td>\n      <td>330</td>\n      <td>1040</td>\n      <td>MULTIPOLYGON (((375273.457 165743.254, 375335....</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>E01014373</td>\n      <td>Bath and North East Somerset 010A</td>\n      <td>Bath and North East Somerset 010A</td>\n      <td>1060797</td>\n      <td>57</td>\n      <td>3</td>\n      <td>15</td>\n      <td>27</td>\n      <td>3</td>\n      <td>1</td>\n      <td>8</td>\n      <td>0</td>\n      <td>24</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>15</td>\n      <td>55</td>\n      <td>211</td>\n      <td>MULTIPOLYGON (((377835.224 168339.576, 377910....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>E01014374</td>\n      <td>Bath and North East Somerset 010B</td>\n      <td>Bath and North East Somerset 010B</td>\n      <td>4972916</td>\n      <td>28</td>\n      <td>0</td>\n      <td>21</td>\n      <td>10</td>\n      <td>1</td>\n      <td>1</td>\n      <td>10</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>24</td>\n      <td>108</td>\n      <td>MULTIPOLYGON (((378721.671 167591.617, 378472....</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhen we check the type of the dataframe, we will see that it has come through as a GeoDataFrame\n\n::: {#cb87b8ac .cell execution_count=6}\n``` {.python .cell-code}\ntype(crime_figures)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ngeopandas.geodataframe.GeoDataFrame\n```\n:::\n:::\n\n\n## Turning existing data into a GeoDataFrame\n\nHowever - a lot of the time you may be extracting data from your data warehouse and turning this into a geodataframe.\n\nLet’s go back to our crime dataset from the QGIS section.\n\n::: {#2017b9ff .cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\n\nsw_5forces_stop_and_search_df = pd.read_csv(\"https://raw.githubusercontent.com/hsma-programme/h6_3b_advanced_qgis_mapping_python/main/h6_3b_advanced_qgis_and_mapping_in_python/example_code/sw_5forces_stop_and_search.csv\")\n\n# view the first row\nsw_5forces_stop_and_search_df.head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Type</th>\n      <th>Date</th>\n      <th>Part of a policing operation</th>\n      <th>Policing operation</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Gender</th>\n      <th>Age range</th>\n      <th>Self-defined ethnicity</th>\n      <th>Officer-defined ethnicity</th>\n      <th>Legislation</th>\n      <th>Object of search</th>\n      <th>Outcome</th>\n      <th>Outcome linked to object of search</th>\n      <th>Removal of more than just outer clothing</th>\n      <th>Unnamed: 15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Person search</td>\n      <td>2019-06-01T00:02:00+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>51.496817</td>\n      <td>-2.580971</td>\n      <td>Male</td>\n      <td>25-34</td>\n      <td>White - English/Welsh/Scottish/Northern Irish/...</td>\n      <td>White</td>\n      <td>Police and Criminal Evidence Act 1984 (section 1)</td>\n      <td>Articles for use in criminal damage</td>\n      <td>Arrest</td>\n      <td>False</td>\n      <td>False</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere we’ve imported it as a csv - but if we’d extracted data from a database and saved it as pandas dataframe, the following steps would be the same!\n\nSo let's just check the type first.\n\n::: {#90a592ed .cell execution_count=8}\n``` {.python .cell-code}\ntype(sw_5forces_stop_and_search_df)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nFirst, we need to know what the columns that identify the geometry are.\n\nIn this case, they are ‘Latitude’ and ‘Longitude’\n\nWe can now construct a geopandas geodataframe from this .csv file.\n\n::: {#16b28a17 .cell execution_count=9}\n``` {.python .cell-code}\nsw_5forces_stop_and_search_gdf = geopandas.GeoDataFrame(\n    sw_5forces_stop_and_search_df, # Our pandas dataframe\n    geometry = geopandas.points_from_xy(\n        sw_5forces_stop_and_search_df['Longitude'], # Our 'x' column (horizontal position of points)\n        sw_5forces_stop_and_search_df['Latitude'] # Our 'y' column (vertical position of points)\n        ),\n    crs = 'EPSG:4326' # the coordinate reference system of the data - use EPSG:4326 if you are unsure\n    )\n```\n:::\n\n\nLet's view this new object.\n\n::: {#2cfe41c8 .cell execution_count=10}\n``` {.python .cell-code}\nsw_5forces_stop_and_search_gdf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Type</th>\n      <th>Date</th>\n      <th>Part of a policing operation</th>\n      <th>Policing operation</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>Gender</th>\n      <th>Age range</th>\n      <th>Self-defined ethnicity</th>\n      <th>Officer-defined ethnicity</th>\n      <th>Legislation</th>\n      <th>Object of search</th>\n      <th>Outcome</th>\n      <th>Outcome linked to object of search</th>\n      <th>Removal of more than just outer clothing</th>\n      <th>Unnamed: 15</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Person search</td>\n      <td>2019-06-01T00:02:00+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>51.496817</td>\n      <td>-2.580971</td>\n      <td>Male</td>\n      <td>25-34</td>\n      <td>White - English/Welsh/Scottish/Northern Irish/...</td>\n      <td>White</td>\n      <td>Police and Criminal Evidence Act 1984 (section 1)</td>\n      <td>Articles for use in criminal damage</td>\n      <td>Arrest</td>\n      <td>False</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>POINT (-2.58097 51.49682)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Person search</td>\n      <td>2019-06-01T01:15:00+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>51.454085</td>\n      <td>-2.599742</td>\n      <td>Male</td>\n      <td>25-34</td>\n      <td>Other ethnic group - Not stated</td>\n      <td>White</td>\n      <td>Misuse of Drugs Act 1971 (section 23)</td>\n      <td>Controlled drugs</td>\n      <td>A no further action disposal</td>\n      <td>True</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>POINT (-2.59974 51.45408)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Person search</td>\n      <td>2019-06-01T01:27:00+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>50.983714</td>\n      <td>-3.219592</td>\n      <td>Male</td>\n      <td>25-34</td>\n      <td>White - English/Welsh/Scottish/Northern Irish/...</td>\n      <td>White</td>\n      <td>Misuse of Drugs Act 1971 (section 23)</td>\n      <td>Controlled drugs</td>\n      <td>A no further action disposal</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>POINT (-3.21959 50.98371)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Person search</td>\n      <td>2019-06-01T01:27:00+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>50.983714</td>\n      <td>-3.219592</td>\n      <td>Male</td>\n      <td>over 34</td>\n      <td>White - English/Welsh/Scottish/Northern Irish/...</td>\n      <td>White</td>\n      <td>Misuse of Drugs Act 1971 (section 23)</td>\n      <td>Controlled drugs</td>\n      <td>A no further action disposal</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>POINT (-3.21959 50.98371)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Person search</td>\n      <td>2019-06-01T01:27:00+00:00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>50.983714</td>\n      <td>-3.219592</td>\n      <td>Male</td>\n      <td>over 34</td>\n      <td>White - English/Welsh/Scottish/Northern Irish/...</td>\n      <td>White</td>\n      <td>Misuse of Drugs Act 1971 (section 23)</td>\n      <td>Controlled drugs</td>\n      <td>A no further action disposal</td>\n      <td>NaN</td>\n      <td>False</td>\n      <td>NaN</td>\n      <td>POINT (-3.21959 50.98371)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd let's view the type of object it is.\n\n::: {#cbe2db05 .cell execution_count=11}\n``` {.python .cell-code}\ntype(sw_5forces_stop_and_search_gdf)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\ngeopandas.geodataframe.GeoDataFrame\n```\n:::\n:::\n\n\n## Joining area data to boundary data\n\nWe can also combine pandas dataframes with geopandas dataframes.\n\nWhen might we want to do this?\n\nImagine we have a dataset of patients who are using a particular type of service.\n\nWe can use pandas to count the number of patients per LSOA.\n\nHowever - the LSOA code alone isn’t going to allow us to plot this dataset - it doesn’t contain the geometry.\n\nInstead, we\n\n- import a shapefile, geoJSON or geopackage of boundaries\n- join it to our pandas dataframe using a common column (like LSOA code)\n\nIf we join our dataframe to our geodataframe, the result will be a geodataframe - so you can make use of all the useful features of geodataframes.\n\n::: {#b906f911 .cell execution_count=12}\n``` {.python .cell-code}\nmy_lsoa_boundary_gdf = geopandas.read_file(\"lsoa_boundaries.gpkg\")\n\nmy_count_df = pd.read_csv(“counts_by_lsoa.csv”)\n```\n:::\n\n\nLet’s imagine the geodataframe has a column called ‘LSOA11CD’\n\nThe count dataframe has a column called ‘LSOA’\n\n::: {#e4a49a97 .cell execution_count=13}\n``` {.python .cell-code}\nmy_final_df = pd.merge(\n\tleft=my_lsoa_boundary_gdf,\n    right=my_count_df,\n    left_on=”LSOA11CD”\n    right_on=”LSOA”\n    how=”right”\n)\n```\n:::\n\n\n:::{.callout-warning}\n\nWe need to be careful about the order we join things in to ensure we end up with the right type of object at the end.\n\n> “The stand-alone merge function will work if the GeoDataFrame is in the left argument; if a DataFrame is in the left argument and a GeoDataFrame is in the right position, the result will no longer be a GeoDataFrame.” - https://geopandas.org/en/v0.8.0/mergingdata.html\"\n\nThis would result in a geodataframe:\n\n::: {#7e2da13f .cell execution_count=14}\n``` {.python .cell-code}\nmy_final_df = pd.merge(\n\tleft=my_lsoa_boundary_gdf,\n    right=my_count_df,\n    left_on=”LSOA11CD”\n    right_on=”LSOA”\n    how=”right”\n    )\n```\n:::\n\n\nBut this would not.\n\n::: {#78b2312f .cell execution_count=15}\n``` {.python .cell-code}\nmy_final_df = pd.merge(\n    left=my_count_df,\n    left=my_lsoa_boundary_gdf,\n    left_on=”LSOA”\n    right_on=”LSOA11CD”\n    how=\"left\"\n)\n```\n:::\n\n\n:::\n\n\n:::{.callout-tip}\n#### The 'how' argument\n\nThe ‘how’ argument\n\nIf you set how = ‘left’, all of the rows from the geodataframe will be kept, even if there is no value in your dataframe of counts\n\nIf you set how = ‘right’, all of the rows from the counts dataframe will be kept, even if there is no value in your geodataframe\nCheck you have no missing values in the ‘geometry’ column after this!\n\nIf you set how = ‘full’, all of the rows from both dataframes will be kept - so you may end up with empty geometry in some cases and/or empty counts in others\n:::\n\n",
    "supporting": [
      "python_geopandas_reading_files_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}