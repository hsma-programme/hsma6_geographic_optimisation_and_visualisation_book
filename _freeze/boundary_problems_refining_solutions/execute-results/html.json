{
  "hash": "01b1dfda749e7d7f3f0eead2690f1fad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"(WIP) Boundary Problems - Refining Solutions\"\nformat: html\n---\n\n### Evolving a solution\n\nThe sheer number of possible solutions makes this a tricky problem to solve!\n\nWe could keep generating a very large number of random solutions, and this may work to eventually find a near-optimal solution, but could be extremely time-consuming and resource-intensive, requiring many hours of compute power.\n\nInstead, let's try taking some inspiration from the natural world and **evolving** our solutions until they are as good as can be.\n\n:::{.callout-tip}\nThis is a big part of the field of operational research, with certain algorithms like NSGA-II being well-known and defined, and implemented in libraries that you can reuse. However, you can also create your own genetic algorithms or modify approaches like NSGA-II, as done in [Allen et al. and their work on hyperacute stroke unit modelling](https://github.com/MichaelAllen1966/stroke_unit_location/blob/master/bmj_open_paper/bmj_open_stroke_unit_location_paper_supplementary_material-1.pdf).\n:::\n\n:::{.callout-note}\nDue to the requirements for solutions to follow certain rules, evolving our solutions is somewhat more complex than in the case of our location allocation problem, where any combination of centres was theoretically 'valid'. In that instance, we could randomly permute or mix solutions with no concerns surrounding what the output looked like beyond not being an exact duplicate of an already-evaluated solution. Here, with a need to generate a solution that conforms to rules like the dispatcher's patch being continuous and all regions being allocated to one (and only one) dispatcher.\n:::\n\nSo what will the process look like in this case?\n\n- We will generate a new random solution using our function from the previous section\n- We will evaluate that solution\n    - While we will initially be evaluating this solution against a single metric, the same approach could be applied when scoring against multiple metrics\n- If this solution is worse than the current status quo, we will generate a new random solution (and keep doing so until we find a solution that performs 'better' than the current status quo)\n- If this solution is better than the current status quo, we will then start to evolve this solution\n    - for each 'player' (in this case, our dispatchers), we will randomly add or remove a small number of their regions and allocate it to one of the other players for whom it would be valid territory (i.e. they share a boundary with the territory in question)\n        - we will generate many of these variants per round\n        - we will then assess the performance of each of these solutions\n        - several of the best solutions (a parameter we will be able to vary) will be retained at this point, going on to form a new population of solutions we can continue to loop through, tweak, and recheck the performance of\n            - rather than the 'child' solutions replacing the 'parents', we will keep both at each stage, evaluating them all on their merits rather than always assuming the 'child' strategies will be better\n            - note that general recommendations are that ùù∫ - the population size - should be at least 10 times larger than Œº - the number of solutions we keep in each generation\n            - it's also recommended that ùù∫ / Œº should leave no remainder\n    - we will continue this process until there has been no improvement for several rounds of attempts\n        - the number of rounds for which there is no improvement will be a parameter we can vary\n- We will then store the performance of this solution, then start with a new random solution and repeat this for a certain number of solutions or period of time\n\n:::{.callout-tip}\nAs the minor variation and evaluation of solutions is much quicker than generating brand new solutions with the method we developed in the previous chapter, we should see much faster movement towards a 'good' solution. This approach should therefore be more efficient than if we were to use the same amount of computational time generating and evaluating random solutions (though there is a small chance we land on a great solution at random!).\n\nHowever, it should also be remembered that there is something to be said for a simple approach...\n\n> ‚ÄúExperience shows that if the stakeholders (users of the model) can easily understand the methods used, they are more likely to trust the solution and use the model more confidently in the decision making processes‚Äù - Meskarian R, Penn ML, Williams S, Monks T (2017)[^trustquote]\n\n:::\n\n[^trustquote]: Meskarian R, Penn ML, Williams S, Monks T (2017) A facility location model for analysis of current and future demand for sexual health services. PLoS ONE 12(8): e0183942. https://doi.org/10.1371/journal.pone.0183942\n\n\n## Local and Global Optima\n\n![](assets/2025-02-11-10-35-43.png)[^imglocaloptima]\n\n[^imglocaloptima]: A genetic algorithm for calculating minimum distance between convex and concave bodies - Scientific Figure on ResearchGate. Available from: https://www.researchgate.net/figure/Local-versus-global-optimum_fig1_228563694 [accessed 9 Apr, 2024]\n\nEvolutionary algorithms can have the issue of getting stuck in local optima - where they reach a 'good' solution and small tweaks in any direction lead to worse scores. However, outside of the 'sight' of the algorithm, there may be a better overall solution that exists.\n\nWhile there are a range of ways this issue can be tackled, here we'll mainly be approaching it by working with several different random starting positions.\n\n## Loading Previous Solutions\n\nTo start with, let's load our random solutions from the last chapter back in.\n\n:::{.callout-warning}\nPickle is a convenient file format for storing dataframes and reloading them with important information like column types retained. This is important in situations like this where one of our columns is a more complex datatype that may not transfer well into a csv.\n\nHowever, pickle is not particularly secure and you should only unpickle files from sources you trust as there is a risk of malicious code being injected and then executing on unpickling. Alternative formats such as [Feather](https://arrow.apache.org/docs/python/feather.html) and [Parquet](https://arrow.apache.org/docs/python/parquet.html) are generally regarded as more secure.\n:::\n\n::: {#8601abb5 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ninitial_solution_df = pd.read_pickle('solutions_example.pkl')\n\ninitial_solution_df.to_csv('solutions_example.csv')\n```\n:::\n\n\nLet's write a quick function to pull out the allocations from our solutions file, and turn that back into a dataframe we can work with.\n\n::: {#899971b7 .cell execution_count=2}\n``` {.python .cell-code}\ndef extract_allocation_df_from_solution_df(df, solution_rank, allocation_col_name, territory_col_name):\n    row_of_interest = df[df['rank'] == solution_rank]\n    owned_territory_dict = row_of_interest['allocations'].values[0]\n\n    owned_territory_df = pd.DataFrame(\n            [(key, value) for key, values in owned_territory_dict.items() for value in values],\n            columns=[allocation_col_name, territory_col_name])\n    return owned_territory_df\n```\n:::\n\n\nLet's now try this out to pull back and visualise our best solution.\n\n::: {#955fb5be .cell execution_count=3}\n``` {.python .cell-code}\nbest_solution = extract_allocation_df_from_solution_df(\n    initial_solution_df,\n    solution_rank=1,\n    allocation_col_name=\"centre_dispatcher_NEW\",\n    territory_col_name=\"LSOA11CD\"\n    )\n\nbest_solution\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>centre_dispatcher_NEW</th>\n      <th>LSOA11CD</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 2-5</td>\n      <td>E01031187</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 2-5</td>\n      <td>E01031195</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Centre 2-5</td>\n      <td>E01031217</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Centre 2-5</td>\n      <td>E01031204</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Centre 2-5</td>\n      <td>E01031213</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2006</th>\n      <td>Centre 2-2</td>\n      <td>E01009724</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>Centre 2-2</td>\n      <td>E01009720</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>Centre 2-2</td>\n      <td>E01009723</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>Centre 2-2</td>\n      <td>E01009725</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>Centre 2-2</td>\n      <td>E01009730</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows √ó 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-note collapse=\"true\"}\n### Click here to view code from previous chapters for importing our historical boundary and demand data\n\n::: {#97ccf29c .cell execution_count=4}\n``` {.python .cell-code}\nimport geopandas\n\nlsoa_geojson_path = 'https://github.com/hsma-programme/h6_3c_interactive_plots_travel/raw/main/h6_3c_interactive_plots_travel/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson'\n\nlsoa_boundaries = geopandas.read_file(lsoa_geojson_path)\n\nxmin, xmax = 370000, 420000\nymin, ymax = 250000, 310000\n\nbham_region = lsoa_boundaries.cx[xmin:xmax, ymin:ymax]\n\nbham_region[\"region\"] = bham_region[\"LSOA11NM\"].str[:-5]\n\nboundary_allocations_df = pd.read_csv(\"boundary_allocations.csv\")\n\nbham_region = pd.merge(\n    bham_region,\n    boundary_allocations_df,\n    left_on=\"region\",\n    right_on=\"Region\",\n    how=\"left\"\n)\n\nbham_region[\"centre_dispatcher\"] = bham_region[\"Centre\"].astype(\"str\") + '-' + bham_region[\"Dispatcher\"].astype(\"str\")\n\ndemand = pd.read_csv(\"demand_pop_bham.csv\")\n\nbham_region = bham_region.merge(demand, on=\"LSOA11CD\")\n\n# Create df of original boundaries\ngrouped_dispatcher_gdf = bham_region.groupby(\"centre_dispatcher\")\n\n# Create a new GeoDataFrame for the boundaries of each group\nboundary_list = []\n\nfor group_name, group in grouped_dispatcher_gdf:\n    # Combine the polygons in each group into one geometry\n    combined_geometry = group.unary_union\n\n    # Get the boundary of the combined geometry\n    boundary = combined_geometry.boundary\n\n    # Add the boundary geometry and the group name to the list\n    boundary_list.append({'group': group_name, 'boundary': boundary})\n\n# Create a GeoDataFrame from the list of boundaries\ngrouped_dispatcher_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/sammi/.local/lib/python3.10/site-packages/geopandas/geodataframe.py:1528: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n:::\n\n\n:::\n\n::: {#13d9ebf6 .cell execution_count=5}\n``` {.python .cell-code}\nax=bham_region.merge(best_solution, on=\"LSOA11CD\").plot(column=\"centre_dispatcher_NEW\")\n\n# Visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"black\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_refining_solutions_files/figure-html/cell-6-output-1.png){width=444 height=411}\n:::\n:::\n\n\nAnd let's compare this with our worst-performing solution.\n\n:::{.callout-tip collapse=\"true\"}\n### Click here to see the code\n\n::: {#c31473bc .cell execution_count=6}\n``` {.python .cell-code}\nworst_solution = extract_allocation_df_from_solution_df(\n    initial_solution_df,\n    solution_rank=20,\n    allocation_col_name=\"centre_dispatcher_NEW\",\n    territory_col_name=\"LSOA11CD\"\n    )\n\nax=bham_region.merge(worst_solution, on=\"LSOA11CD\").plot(column=\"centre_dispatcher_NEW\")\n\n# Visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"black\"\n)\n```\n:::\n\n\n:::\n\n::: {#994f259d .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_refining_solutions_files/figure-html/cell-8-output-1.png){width=444 height=411}\n:::\n:::\n\n\n## Writing our evolutionary algorithm\n\n:::{.callout-tip}\nCode coming soon!\n:::\n\n",
    "supporting": [
      "boundary_problems_refining_solutions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}