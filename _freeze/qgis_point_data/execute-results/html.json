{
  "hash": "a57db1631f1f87b243bbeb2968e651e9",
  "result": {
    "engine": "knitr",
    "markdown": "# Visualising Point Data in QGIS {#sec-qgis-point}\n\n::: {.cell}\n\n:::\n\n<style>\na.glossary {\n  color: #8A1E1E;\n  text-decoration: underline;\n  cursor: help;\n  position: relative;\n}\n\n/* only needed for popup = \"click\" */\n/* popup-definition */\na.glossary .def {\n  display: none;\n  position: absolute;\n  z-index: 1;\n  width: 200px;\n  bottom: 100%;\n  left: 50%;\n  margin-left: -100px;\n  background-color: #333;\n  color: white;\n  padding: 5px;\n  border-radius: 6px;\n}\n/* show on click */\na.glossary:active .def {\n  display: inline-block;\n}\n/* triangle arrow */\na.glossary:active .def::after {\n  content: ' ';\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: #333 transparent transparent transparent;\n}\n</style>\n\n\n::: {.callout-note}\n\nIf you would like to follow along, you can download the data file used in this section by right-clicking the link below and choosing 'save link as' to save the csv file to your computer.\n\n-->[Right-click here](https://raw.githubusercontent.com/Bergam0t/hsma6_module_3_geographic_optimisation_visualisation/main/data/chapter_qgis/stats19_collision_2022_minimal.csv?token=GHSAT0AAAAAACK7SKC7XGTYOIHF3QCRPKR4ZOCG7JA)<--\n:::\n\n# Importing point data from a .csv file\nOur data is stored in what’s called a ‘.csv’ file\n\nA csv has columns of data separated by commas, like this:\n\n<span style=\"color:orange;\">accident_index</span>,longitude,<span style=\"color:green;\">latitude</span>,<span style=\"color:yellow;\">date</span>\n\n<span style=\"color:orange;\">A001</span>,-0.198224,<span style=\"color:green;\">51.486454</span>,<span style=\"color:yellow;\">2023/01/01</span>\n\n<span style=\"color:orange;\">A002</span>,0.105042,<span style=\"color:green;\">1.49883</span>,<span style=\"color:yellow;\">2023/01/02</span>\n\n<span style=\"color:orange;\">A002</span>,0.173482,<span style=\"color:green;\">51.451924</span>,<span style=\"color:yellow;\">2023/01/04</span>\n\nWhen we load it into a program like Excel,\nit turns it into a table we can read\n\n![](images/qgis_point_excel.png)\n\nSo we can say that our file is a text file that is split - or ‘delimited’ - by commas\n\nSo we need to tell QGIS that!\n\nSelect ‘Layer’ → ‘Add Layer’ → ‘Add Delimited Text Layer…’\n\n![](images/qgis_delimited_text.png)\n\nClick on the three dots to open up the file browser\n\n![](images/qgis_data_source_manager.png)\n\nNavigate to where your file is located.\n\nIt will automatically show only files that are delimited text. When you reach the file, either\n\nDouble click on the file\nOR\nsingle click on it, then click ‘Open’\n\n## Setting the CRS of our data\n\nNow we need to tell it what columns to use to determine the location of each point\n\nClick on ‘Geometry Definition’\n\n![](images/qgis_point_data_geometry_definition.png)\n\nFirst, check that it has correctly picked up the ‘latitude’ and ‘longitude’ columns from the dataset\n\nIf our columns are named this in our input file, it should do this automatically.\n\n![](images/qgis_point_data_lat_long_def.png)\n\nNow we need to select the correct geometry CRS.\n\nBut how do we know what is correct?\n\n![](images/qgis_point_data_geometry_crs_pick.png)\n\n::: {.callout-tip}\nWhat matters here is the CRS used in the data **originally**.\n\nIf it is different to the **project CRS** - which is explained below - then QGIS will **reproject** the data you import so it matches up with the project CRS.\n\nIf you are unsure what CRS has been used for your data, there are a few you can try, starting at the top of this list:\n- EPSG:4326 - WGS 84\n- EPSG:3857 - WGS 84/Pseudo-Mercator\n- EPSG:32630 - WGS 84 / UTN zone 30N\n\nIt will usually be very obvious if it's wrong, because your data will be in totally the wrong place!\n\nIf it's wrong, then delete the layer by right clicking on it in the layers tab\n\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n\n#### Click here to read more about selecting the right CRS for your project and the data you are importing\n\n*This seems like a bit of a boring topic - but I promise you it will save you some headaches down the line!*\n\n*It doesn't matter if you don't fully understand all of this section right now - but if you import some data that keeps ending up in the wrong place, just think to yourself 'could this be because of the coordinate reference system? - and then come back and read this section again!*\n\nHowever we start our project - whether that's by using the OpenStreetMap basemap or doing something else - then there are a few things to note about the <a class='glossary' title='Placeholder'>coordinate reference system</a> of our QGIS project.\n\nWe can always look at the bottom-right corner of QGIS to see the coordinate reference system being used by our **project**.\n\n![](images/qgis_see_crs.png)\n\nIf we click on that, it will bring up the project properties and open the 'CRS' part of the properties dialog automatically, which will look something like this.\n\n![](images/qgis_crs_project_properties.png)\n\nNow, here I've already imported the OpenStreetMap basemap as shown in the step above.\n\nNote that here what is selected is called **EPSG:3857** - also known as **WGS:84 / Pseudo-Mercator**.\n\nIf we right click on 'OpenStreetMap' in the XYZ tiles and scroll down a bit, we can see that this is the CRS of the OpenStreetMap 'tileset' too.\n\n![](images/qgis_tileset_properties_xyz.png)\n\nIt's important to know what CRS your project is using as when you come to import data from other files, it may not be using the same reference system and the data will have to be <a class='glossary' title='Placeholder'>transformed</a> to ensure that the points or areas end up in the right place at the end!\n\n##### But there's a twist... {.unnumbered}\n\nIf I now create a new project and look at the CRS, we can see it's different!\n\n![](images/qgis_default_crs_new_project.png)\n\nAnd this is due to one of the default settings in QGIS.\n\nIf I go to \"Settings\" --> \"Options\" --> \"CRS and Transforms\" --> \"CRS Handling\", then you will spot some things about how QGIS deals with CRS options by default.\n\n![](images/qgis_crs_option_defaults.png)\n\nWhat we can see is that the project CRS will be based on the CRS of the **first layer added**.\n\nSo if we load in the OpenStreetMap basemap **first** when we create a new project, our projection will be **EPSG:3857** - also known as **WGS:84 / Pseudo-Mercator**.\n\nIf we load in some other data first - which you might decide to do once you've got a few projects under your belt, or you might do if you get started and only realise afterwards that you haven't loaded your basemap in yet - then you might find that your project is not using the CRS you were expecting!\n\nNow - this isn't a **problem** by itself - but it can cause confusion about what CRS you should use when you try and load in additional data!\n\nFor example, here I've loaded in a dataset relating to the United Kingdom. There should be some points on the UK... but where are they?\n\n![](images/qgis_loading_incorrect_crs.png)\n\nWell, the only point I can see is in the sea off the coast of Africa!\n\nIf I zoom a really long way in, it turns out my points did load in - but they're not anywhere near the UK on my basemap.\n\n![](images/qgis_crs_error.png)\n\nSo what went wrong here?\n\nWhen I loaded this data in, I told QGIS to use the project CRS.\n\nBut that's not what QGIS is expecting!\n\nIt wants me to tell it what the CRS is **of the data I am loading in** - it already knows what the project CRS is! It just needs to know what it's loading in so it can work out how to translate between the two.\n:::\n\nOnce you've chosen the correct CRS, click 'add', then click 'close'.\n\n![](images/qgis_point_add_close_delimited.png)\n\n\nOnce you've done this, your map should look something like this:\n\n![](images/qgis_point_simple.png)\n\n:::{.callout-note}\n#### Exercise 1{.unnumbered}\nNow we’ve got a map, let’s take a few minutes to explore some of the patterns we can see.\n\nTry zooming in and moving around.\n\nMaybe explore an area you know, or look at the layout of roads in some of the areas with more or fewer accidents than others.\n\n:::\n\n## Styling points\n\nNow we have the accidents, but there’s so many that it’s hard to tell much.\n\nLet’s try splitting them out by severity.\n\nSelect your imported layer of points - if you're following along with the dataset, this will be called stats19_collision_2022_minimal layer - in the layer panel by clicking it.\n\nClick on ‘Single Symbol’ in the layer styling panel.\n\n![](images/qgis_point_single_symbol.png)\n\nIn the dropdown menu that appears, select ‘Categorized’\n\n![](images/qgis_point_layer_styling_categorised.png)\n\nYour layer styling panel should now look something like the image on the right\n\n![](images/qgis_point_layer_styling_categorised_panel.png)\n\n::: {.callout-tip}\n#### HINT {.unnumbered}\nYour layer styling panel might be too narrow by default, which cuts off some rather important buttons!\n\nHover over the <span style=\"color:pink;\">left edge</span> of the layer styling panel until your cursor changes to this icon: <-->\n\nThen drag it to the left until it takes up about a quarter to a third of the page and shows all the buttons below.\n\n![](images/qgis_layer_styling_too_narrow_default.png)\n:::\n\nNow we want to tell it to categorize by one of the columns in our data.\n\nSelect ‘accident_severity’ from the list.\n\n![](images/qgis_point_select_classify_column.png)\n\nThen click ‘Classify’.\n\n![](images/qgis_point_classify_button.png)\n\nOnce clicked, our points will have different colours (maybe not these exact ones).\n\nYou can see the categories it has created in our layer styling panel.\n\n![](images/qgis_points_accident_severity_classified.png){.lightbox}\n\n### Hiding points\n\nWe can hide some of these points by clicking the checkboxes (ticks) to the left of the symbol colour in the Layer Styling panel.\n\n![](images/qgis_point_show_hide_category.png)\n\n::: {.callout-note}\n#### Exercise 2 {.unnumbered}\nTry changing the selected value and click ‘classify’ again.\nExplore some of the different things we have in the dataset.\n\nWhich work well as things to colour our points by?\n\nExperiment with hiding certain values by unticking them in the layer styling panel.\n\nHint: you will need to click 'yes' when it asks you if existing classes should be deleted before classification, otherwise you will end up with categories in your legend that aren't being used.\n\n![](images/qgis_point_delete_before_classification.png)\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n\n##### Click here to see some example answers to this step {.unnumbered}\n![Accidents at 20mph vs 70mph](images/qgis_accidents_20_70.png)\n\n![Accidents involving 1 vehicle vs Accidents involving more than 5 vehicles](images/qgis_multi_vehicle_accidents.png)\n:::\n\n:::\n\n### Colour and size\nWith the layer selected, look at the layer styling panel.\n\nClick on one of the categorised symbols in the section with the headers 'symbol', 'value' and 'legend', then click on the symbol itself (marked 1. in the image below) to load a new page with options for point colour, opacity and size.\n\n![](images/qgis_layer_styling_point_selected.png)\n\nNext, you can change the colour, size or opacity using the options highlighted in the box marked '2.'\n\nYou can then click the arrow marked '3.' to return to the previous page.\n\n![](images/qgis_point_layer_styling_point_options.png)\n\nYour changes will automatically apply if the small box labelled 'Live update', which is next to the 'Apply' button at the very bottom of the layer styling panel, has a tick in it.\n\n#### Exercise 3 {.unnumbered}\nTry changing the size, colour and opacity of some points to make the important information stand out more for a chosen category of information.\n\nYou can also choose to hide some categories.\n\nThink about the story you want to try to tell with your map.\nWhat important things do you want someone who looks at your map to take away from it? How can you use size, colour and opacity to support this?\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n\n##### Click here to see some example answers to this step {.unnumbered}\n\nHere, for a map where the accidents have been classified by severity, we have\n- Reduced opacity of less severe accidents (so full accident patterns can still be seen - we can still spot areas with more accidents overall - while making them less obvious)\n- Increased size of fatal accidents (so they stand out to the viewer)\n- Changed severe accidents to a colour more traditionally associated with 'bad'\n\n![](images/qgis_point_map_opacity_size_color.png)\n\n:::\n\n:::\n\n### Custom Markers\n\n\n\n## Adding labels to points\n\nIn addition to changing the markers, we can add labels to our points.\n\nNow, simple labels can be a little hard to read, especially if we have a\n\n\n\n## Next Steps\n\nFor looking at individual roads, this approach is quite useful, but often there are so many accidents happening of a given type that it’s really hard to draw any conclusions about the country more widely.\n\nThis is where colouring regions of the map by some sort of count is quite useful - and this is what we will cover in the next chapter.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}