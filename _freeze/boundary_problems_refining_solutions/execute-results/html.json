{
  "hash": "db65fb1e630af010332470f20af694cd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"(WIP) Boundary Problems - Refining Solutions\"\nformat: html\n---\n\n\n\n\n\n\n\n## Evolving a solution\n\nThe sheer number of possible solutions makes this a tricky problem to solve!\n\nWe could keep generating a very large number of random solutions, and this may work to eventually find a near-optimal solution, but could be extremely time-consuming and resource-intensive, requiring many hours of compute power.\n\nInstead, let's try taking some inspiration from the natural world and **evolving** our solutions until they are as good as can be.\n\n:::{.callout-tip}\nThis is a big part of the field of operational research, with certain algorithms like NSGA-II being well-known and defined, and implemented in libraries that you can reuse. However, you can also create your own genetic algorithms or modify approaches like NSGA-II, as done in [Allen et al. and their work on hyperacute stroke unit modelling](https://github.com/MichaelAllen1966/stroke_unit_location/blob/master/bmj_open_paper/bmj_open_stroke_unit_location_paper_supplementary_material-1.pdf).\n:::\n\n:::{.callout-note}\nDue to the requirements for solutions to follow certain rules, evolving our solutions is somewhat more complex than in the case of our location allocation problem, where any combination of centres was theoretically 'valid'. In that instance, we could randomly permute or mix solutions with no concerns surrounding what the output looked like beyond not being an exact duplicate of an already-evaluated solution. Here, with a need to generate a solution that conforms to rules like the dispatcher's patch being continuous and all regions being allocated to one (and only one) dispatcher.\n:::\n\nSo what will the process look like in this case?\n\n- We will generate a new random solution using our function from the previous section\n- We will evaluate that solution\n    - While we will initially be evaluating this solution against a single metric, the same approach could be applied when scoring against multiple metrics\n- If this solution is worse than the current status quo, we will generate a new random solution (and keep doing so until we find a solution that performs 'better' than the current status quo)\n- If this solution is better than the current status quo, we will then start to evolve this solution\n    - for each 'player' (in this case, our dispatchers), we will randomly add or remove a small number of their regions and allocate it to one of the other players for whom it would be valid territory (i.e. they share a boundary with the territory in question)\n        - we will generate many of these variants per round\n        - we will then assess the performance of each of these solutions\n        - several of the best solutions (a parameter we will be able to vary) will be retained at this point, going on to form a new population of solutions we can continue to loop through, tweak, and recheck the performance of\n            - rather than the 'child' solutions replacing the 'parents', we will keep both at each stage, evaluating them all on their merits rather than always assuming the 'child' strategies will be better\n            - note that general recommendations are that ùù∫ - the population size - should be at least 10 times larger than Œº - the number of solutions we keep in each generation\n            - it's also recommended that ùù∫ / Œº should leave no remainder\n    - we will continue this process until there has been no improvement for several rounds of attempts\n        - the number of rounds for which there is no improvement will be a parameter we can vary\n- We will then store the performance of this solution, then start with a new random solution and repeat this for a certain number of solutions or period of time\n\n:::{.callout-tip}\nAs the minor variation and evaluation of solutions is much quicker than generating brand new solutions with the method we developed in the previous chapter, we should see much faster movement towards a 'good' solution. This approach should therefore be more efficient than if we were to use the same amount of computational time generating and evaluating random solutions (though there is a small chance we land on a great solution at random!).\n\nHowever, it should also be remembered that there is something to be said for a simple approach...\n\n> ‚ÄúExperience shows that if the stakeholders (users of the model) can easily understand the methods used, they are more likely to trust the solution and use the model more confidently in the decision making processes‚Äù - Meskarian R, Penn ML, Williams S, Monks T (2017)[^trustquote]\n\n:::\n\n[^trustquote]: Meskarian R, Penn ML, Williams S, Monks T (2017) A facility location model for analysis of current and future demand for sexual health services. PLoS ONE 12(8): e0183942. https://doi.org/10.1371/journal.pone.0183942\n\n\n## Local and Global Optima\n\n![](assets/2025-02-11-10-35-43.png)[^imglocaloptima]\n\n[^imglocaloptima]: A genetic algorithm for calculating minimum distance between convex and concave bodies - Scientific Figure on ResearchGate. Available from: https://www.researchgate.net/figure/Local-versus-global-optimum_fig1_228563694 [accessed 9 Apr, 2024]\n\nEvolutionary algorithms can have the issue of getting stuck in local optima - where they reach a 'good' solution and small tweaks in any direction lead to worse scores. However, outside of the 'sight' of the algorithm, there may be a better overall solution that exists.\n\nWhile there are a range of ways this issue can be tackled, here we'll mainly be approaching it by working with several different random starting positions.\n\n## Loading Previous Solutions\n\nTo start with, let's load our random solutions from the last chapter back in.\n\n:::{.callout-warning}\nPickle is a convenient file format for storing dataframes and reloading them with important information like column types retained. This is important in situations like this where one of our columns is a more complex datatype that may not transfer well into a csv.\n\nHowever, pickle is not particularly secure and you should only unpickle files from sources you trust as there is a risk of malicious code being injected and then executing on unpickling. Alternative formats such as [Feather](https://arrow.apache.org/docs/python/feather.html) and [Parquet](https://arrow.apache.org/docs/python/parquet.html) are generally regarded as more secure.\n:::\n\n::: {#read-solutions-example .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ninitial_solution_df = pd.read_pickle('solutions_example.pkl')\n\ninitial_solution_df.to_csv('solutions_example.csv')\n```\n:::\n\n\nLet's write a quick function to pull out the allocations from our solutions file, and turn that back into a dataframe we can work with.\n\n::: {#define-extract-allocations-df-function .cell execution_count=2}\n``` {.python .cell-code}\ndef extract_allocation_df_from_solution_df(df, solution_rank, allocation_col_name, territory_col_name):\n    row_of_interest = df[df['rank'] == solution_rank]\n    owned_territory_dict = row_of_interest['allocations'].values[0]\n\n    owned_territory_df = pd.DataFrame(\n            [(key, value) for key, values in owned_territory_dict.items() for value in values],\n            columns=[allocation_col_name, territory_col_name])\n    return owned_territory_df\n```\n:::\n\n\nLet's now try this out to pull back and visualise our best solution.\n\n::: {#cell-extract-best-solution .cell execution_count=3}\n``` {.python .cell-code}\nbest_solution = extract_allocation_df_from_solution_df(\n    initial_solution_df,\n    solution_rank=1,\n    allocation_col_name=\"centre_dispatcher_NEW\",\n    territory_col_name=\"LSOA11CD\"\n    )\n\nbest_solution\n```\n\n::: {#extract-best-solution .cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>centre_dispatcher_NEW</th>\n      <th>LSOA11CD</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 2-5</td>\n      <td>E01031187</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 2-5</td>\n      <td>E01031195</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Centre 2-5</td>\n      <td>E01031217</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Centre 2-5</td>\n      <td>E01031204</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Centre 2-5</td>\n      <td>E01031213</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2006</th>\n      <td>Centre 2-2</td>\n      <td>E01009724</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>Centre 2-2</td>\n      <td>E01009720</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>Centre 2-2</td>\n      <td>E01009723</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>Centre 2-2</td>\n      <td>E01009725</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>Centre 2-2</td>\n      <td>E01009730</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows √ó 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-note collapse=\"true\"}\n### Click here to view code from previous chapters for importing our historical boundary and demand data\n\n::: {#import-historical-boundaries-demand-repeat-earlier-chapter .cell execution_count=4}\n``` {.python .cell-code}\nimport geopandas\n\nlsoa_geojson_path = 'https://github.com/hsma-programme/h6_3c_interactive_plots_travel/raw/main/h6_3c_interactive_plots_travel/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson'\n\nlsoa_boundaries = geopandas.read_file(lsoa_geojson_path)\n\nxmin, xmax = 370000, 420000\nymin, ymax = 250000, 310000\n\nbham_region = lsoa_boundaries.cx[xmin:xmax, ymin:ymax]\n\nbham_region[\"region\"] = bham_region[\"LSOA11NM\"].str[:-5]\n\nboundary_allocations_df = pd.read_csv(\"boundary_allocations.csv\")\n\nbham_region = pd.merge(\n    bham_region,\n    boundary_allocations_df,\n    left_on=\"region\",\n    right_on=\"Region\",\n    how=\"left\"\n)\n\nbham_region[\"centre_dispatcher\"] = bham_region[\"Centre\"].astype(\"str\") + '-' + bham_region[\"Dispatcher\"].astype(\"str\")\n\ndemand = pd.read_csv(\"demand_pop_bham.csv\")\n\nbham_region = bham_region.merge(demand, on=\"LSOA11CD\")\n\n# Create df of original boundaries\ngrouped_dispatcher_gdf = bham_region.groupby(\"centre_dispatcher\")\n\n# Create a new GeoDataFrame for the boundaries of each group\nboundary_list = []\n\nfor group_name, group in grouped_dispatcher_gdf:\n    # Combine the polygons in each group into one geometry\n    combined_geometry = group.unary_union\n\n    # Get the boundary of the combined geometry\n    boundary = combined_geometry.boundary\n\n    # Add the boundary geometry and the group name to the list\n    boundary_list.append({'group': group_name, 'boundary': boundary})\n\n# Create a GeoDataFrame from the list of boundaries\ngrouped_dispatcher_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/sammi/.local/lib/python3.10/site-packages/geopandas/geodataframe.py:1528: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n```\n:::\n:::\n\n\n:::\n\n::: {#cell-visualise-historical-boundaries-and-best-sol .cell execution_count=5}\n``` {.python .cell-code}\nax=bham_region.merge(best_solution, on=\"LSOA11CD\").plot(column=\"centre_dispatcher_NEW\")\n\n# Visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"black\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_refining_solutions_files/figure-html/visualise-historical-boundaries-and-best-sol-output-1.png){#visualise-historical-boundaries-and-best-sol width=444 height=411}\n:::\n:::\n\n\nAnd let's compare this with our worst-performing solution.\n\n:::{.callout-tip collapse=\"true\"}\n### Click here to see the code\n\n::: {#visualise-worst-performing-solution .cell execution_count=6}\n``` {.python .cell-code}\nworst_solution = extract_allocation_df_from_solution_df(\n    initial_solution_df,\n    solution_rank=20,\n    allocation_col_name=\"centre_dispatcher_NEW\",\n    territory_col_name=\"LSOA11CD\"\n    )\n\nax=bham_region.merge(worst_solution, on=\"LSOA11CD\").plot(column=\"centre_dispatcher_NEW\")\n\n# Visualise the historical boundaries\ngrouped_dispatcher_gdf_boundary.plot(\n    ax=ax,\n    linewidth=2,\n    edgecolor=\"black\"\n)\n```\n:::\n\n\n:::\n\n::: {#cell-plot-worst-performing-solution .cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_refining_solutions_files/figure-html/plot-worst-performing-solution-output-1.png){#plot-worst-performing-solution width=444 height=411}\n:::\n:::\n\n\n## Writing our evolutionary algorithm\n\n:::{.callout-tip collapse=\"true\"}\n### Click here for a reminder of what we are trying to code in our evolutionary algorithm\n\n- If this solution is better than the current status quo, we will then start to evolve this solution\n    - for each 'player' (in this case, our dispatchers), we will randomly add or remove a small number of their regions and allocate it to one of the other players for whom it would be valid territory (i.e. they share a boundary with the territory in question)\n        - we will generate many of these variants per round\n        - we will then assess the performance of each of these solutions\n        - several of the best solutions (a parameter we will be able to vary) will be retained at this point, going on to form a new population of solutions we can continue to loop through, tweak, and recheck the performance of\n            - rather than the 'child' solutions replacing the 'parents', we will keep both at each stage, evaluating them all on their merits rather than always assuming the 'child' strategies will be better\n            - note that general recommendations are that ùù∫ - the population size - should be at least 10 times larger than Œº - the number of solutions we keep in each generation\n            - it's also recommended that ùù∫ / Œº should leave no remainder\n    - we will continue this process until there has been no improvement for several rounds of attempts\n        - the number of rounds for which there is no improvement will be a parameter we can vary\n- We will then store the performance of this solution, then start with a new random solution and repeat this for a certain number of solutions or period of time\n:::\n\n\nWe're also going to reuse our 'add_neighbours_column()' function from before.\n\n:::{.callout-note collapse=\"true\"}\n### Click here to view the add_neighbours_column() function from the previous chapter\n\n::: {#define-add-neighbours-column-function .cell execution_count=8}\n``` {.python .cell-code}\ndef add_neighbors_column(gdf):\n    \"\"\"\n    Adds a column to the GeoDataFrame containing lists of indices of neighboring polygons\n    based on the 'touches' method.\n    \"\"\"\n    gdf = gdf.copy()\n    neighbors = []\n    for idx, geom in gdf.geometry.items():\n        touching = gdf[gdf.geometry.touches(geom)][\"LSOA11CD\"].tolist()\n        neighbors.append(touching)\n\n    gdf[\"neighbors\"] = neighbors\n    return gdf\n\ndef find_border_dispatchers(row, df, allocation_colname='centre_dispatcher_NEW'):\n    current_dispatcher = row[allocation_colname]\n    neighbors = row['neighbors']\n\n    # Get dispatchers of neighboring LSOAs\n    neighboring_dispatchers = {\n        df.loc[df['LSOA11CD'] == neighbor, allocation_colname].values[0]\n        for neighbor in neighbors if not df[df['LSOA11CD'] == neighbor].empty\n    }\n\n    # Filter to only different dispatchers\n    border_dispatchers = list(neighboring_dispatchers - {current_dispatcher})\n\n    return border_dispatchers if border_dispatchers else []\n```\n:::\n\n\n:::\n\n::: {#define-permutation-functions .cell execution_count=9}\n``` {.python .cell-code}\nimport random\nimport networkx as nx\nfrom shapely.geometry import MultiPolygon\nfrom shapely.ops import unary_union\n\ndef is_solution_continuous(solution_gdf, allocation_col):\n    \"\"\"\n    Checks if all dispatcher-assigned regions are contiguous.\n    \"\"\"\n\n    # Dissolve regions by dispatcher\n    dispatcher_groups = solution_gdf.dissolve(by=allocation_col)\n\n    for geom in dispatcher_groups.geometry:\n        # If the region is a single Polygon, it's already contiguous\n        if not isinstance(geom, MultiPolygon):\n            continue  # No need to check further\n\n        # Build a connectivity graph\n        G = nx.Graph()\n        parts = list(geom.geoms)  # Extract individual polygons\n\n        # Add polygons as nodes\n        for i in range(len(parts)):\n            G.add_node(i)\n\n        # Connect nodes if polygons overlap or touch\n        for i in range(len(parts)):\n            for j in range(i + 1, len(parts)):\n                if parts[i].intersects(parts[j]):  # Stronger than .touches()\n                    G.add_edge(i, j)\n\n        # Check if all polygons form one connected component\n        if nx.number_connected_components(G) > 1:\n            return False  # Found disconnected parts\n\n    return True\n\ndef is_continuous_after_swap(solution_gdf, lsoa,\n                             current_dispatcher,\n                             proposed_dispatcher,\n                             allocation_col):\n    \"\"\"\n    Checks if assigning 'lsoa' to 'new_dispatcher' maintains contiguous regions.\n    This version avoids making a full DataFrame copy.\n    \"\"\"\n    # Temporarily assign new dispatcher\n    solution_gdf.loc[solution_gdf[\"LSOA11CD\"] == lsoa, allocation_col] = proposed_dispatcher\n\n    # Check continuity\n    is_valid = is_solution_continuous(solution_gdf, allocation_col)\n\n    # Revert change immediately (avoiding full copy overhead)\n    solution_gdf.loc[solution_gdf[\"LSOA11CD\"] == lsoa, allocation_col] = current_dispatcher\n\n    return is_valid\n    #return True\n\ndef assign_new_dispatcher(row,\n                          solution_gdf,\n                          border_colname,\n                          permutation_chance_per_border,\n                          new_allocation_colname\n                          ):\n        \"\"\"\n        Attempts to assign a new dispatcher while keeping the solution continuous.\n        \"\"\"\n\n        # If no bordering dispatchers, keep the original\n        if not row[border_colname]:\n            #print(f'No borders in {row[\"LSOA11CD\"]}')\n            return row[new_allocation_colname]\n\n        # If some bordering dispatchers, then randomly sample whether we will try to permute it\n        elif random.uniform(0.0, 1.0) < permutation_chance_per_border:\n\n            # Randomly select from border dispatchers\n            current_dispatcher = row[new_allocation_colname]\n            random_dispatcher = random.choice(row[border_colname])\n\n            # Check if assigning this dispatcher keeps the solution contiguous\n            if is_continuous_after_swap(solution_gdf,\n                                        lsoa = row[\"LSOA11CD\"],\n                                        current_dispatcher=current_dispatcher,\n                                        proposed_dispatcher=random_dispatcher,\n                                        allocation_col=new_allocation_colname):\n                #print(f\"*** Swapped {row['LSOA11CD']} to {random_dispatcher} ***\")\n                return random_dispatcher\n            else:\n                #print(f\":( Tried{row['LSOA11CD']} from {current_dispatcher} to {random_dispatcher}\")\n                return row[new_allocation_colname]  # Default to original allocation\n        else:\n            #print(f\"Not trying to permute {row['LSOA11CD']}\")\n            return row[new_allocation_colname]\n```\n:::\n\n\n::: {#define-initial-evolutionary-function .cell execution_count=10}\n``` {.python .cell-code}\nfrom joblib import Parallel, delayed\n\ndef create_evolved_solutions(\n        initial_solution_df, geodataframe,\n        join_col_left, join_col_right,\n        original_allocation_colname='centre_dispatcher',\n        random_solution_allocation_colname='centre_dispatcher_NEW',\n        new_allocation_colname='centre_dispatcher_evolved',\n        border_colname='border_dispatchers',\n        permutation_chance_per_border=0.2,\n        population_size=1\n    ):\n    \"\"\"\n    Generates evolved dispatcher allocations while ensuring that all regions remain contiguous.\n    \"\"\"\n\n    # Merge initial solution with geodataframe to keep it as a geodataframe\n    initial_solution_gdf = geodataframe.merge(initial_solution_df, left_on=join_col_left, right_on=join_col_right)\n\n    # Compute neighbors and border dispatchers\n    initial_solution_gdf = add_neighbors_column(initial_solution_gdf)\n    initial_solution_gdf[border_colname] = initial_solution_gdf.apply(\n        find_border_dispatchers, axis=1, df=initial_solution_gdf\n        )\n\n    # new_allocation_dfs = []\n\n    # Include new_allocation_colname from the start\n    simplified_allocation_df = (\n        initial_solution_gdf[\n            [random_solution_allocation_colname, 'LSOA11CD', border_colname, \"geometry\"]\n            ].copy()\n            )\n\n    simplified_allocation_df[new_allocation_colname] = (\n        simplified_allocation_df[random_solution_allocation_colname]\n        )\n\n    def process_iteration(i, simplified_allocation_df, border_colname,\n                     permutation_chance_per_border, new_allocation_colname):\n\n        # for i in range(population_size):\n        evolved_df = simplified_allocation_df.copy(deep=True)\n\n        # Separate out the cols with and without borders\n        non_borders_df = evolved_df[evolved_df[border_colname].apply(len) == 0]\n        borders_df = evolved_df[evolved_df[border_colname].apply(len) > 0]\n        print(f\"{len(non_borders_df)} regions without borders and {len(borders_df)} with borders\")\n\n        borders_df[new_allocation_colname] = borders_df.apply(\n            lambda row: assign_new_dispatcher(\n                row, borders_df,\n                border_colname,\n                permutation_chance_per_border,\n                new_allocation_colname\n                ), axis=1)\n\n        return pd.concat([non_borders_df, borders_df], ignore_index=True)\n\n        # evolved_df = pd.concat([non_borders_df, borders_df], ignore_index=True)\n\n        #new_allocation_dfs.append(evolved_df.copy(deep=True))\n\n        del evolved_df, non_borders_df, borders_df\n\n    return Parallel(n_jobs=-1, verbose=10)(\n            delayed(process_iteration)(\n                i,\n                simplified_allocation_df,\n                border_colname,\n                permutation_chance_per_border,\n                new_allocation_colname\n            )\n            for i in range(population_size)\n        )\n```\n:::\n\n\n::: {#cell-generate-one-solution .cell execution_count=11}\n``` {.python .cell-code}\nsolution = create_evolved_solutions(\n    best_solution,\n    bham_region,\n    join_col_left=\"LSOA11CD\",\n    join_col_right=\"LSOA11CD\",\n    population_size=1\n)\n\nsolution[0]\n```\n\n::: {#generate-one-solution .cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>centre_dispatcher_NEW</th>\n      <th>LSOA11CD</th>\n      <th>border_dispatchers</th>\n      <th>geometry</th>\n      <th>centre_dispatcher_evolved</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 1-7</td>\n      <td>E01008888</td>\n      <td>[]</td>\n      <td>POLYGON ((413420.692 284795.501, 413826.348 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 1-7</td>\n      <td>E01008891</td>\n      <td>[]</td>\n      <td>POLYGON ((413031.049 284196.638, 413321.825 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Centre 1-7</td>\n      <td>E01008893</td>\n      <td>[]</td>\n      <td>POLYGON ((412949.766 283625.900, 412594.358 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Centre 1-7</td>\n      <td>E01008895</td>\n      <td>[]</td>\n      <td>POLYGON ((413166.349 283295.822, 413132.000 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Centre 1-6</td>\n      <td>E01008896</td>\n      <td>[]</td>\n      <td>POLYGON ((412405.000 286300.615, 412535.675 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2006</th>\n      <td>Centre 1-6</td>\n      <td>E01033562</td>\n      <td>[Centre 2-1, Centre 1-5]</td>\n      <td>POLYGON ((404432.818 284070.885, 404516.073 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>Centre 1-6</td>\n      <td>E01033631</td>\n      <td>[Centre 2-1]</td>\n      <td>POLYGON ((405950.078 285312.998, 405575.210 28...</td>\n      <td>Centre 2-1</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>Centre 2-1</td>\n      <td>E01033634</td>\n      <td>[Centre 1-6]</td>\n      <td>POLYGON ((404873.774 282636.291, 404623.886 28...</td>\n      <td>Centre 2-1</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>Centre 1-6</td>\n      <td>E01033641</td>\n      <td>[Centre 1-7]</td>\n      <td>POLYGON ((410005.374 283902.287, 410505.181 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>Centre 1-6</td>\n      <td>E01033648</td>\n      <td>[Centre 2-5]</td>\n      <td>POLYGON ((408199.966 283979.204, 408378.884 28...</td>\n      <td>Centre 2-5</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows √ó 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Confirming solutions are valid\n\nLet's now visualise this.\n\nWe will first create a df showing the boundaries of our plots in our original solution.\n\n::: {#get-starter-solution-boundaries .cell execution_count=12}\n``` {.python .cell-code}\n# Create df of original boundaries\ngrouped_dispatcher_gdf_starting_solution = bham_region.merge(best_solution, on=\"LSOA11CD\").groupby(\"centre_dispatcher_NEW\")\n\n# Create a new GeoDataFrame for the boundaries of each group\nboundary_list = []\n\nfor group_name, group in grouped_dispatcher_gdf_starting_solution:\n    # Combine the polygons in each group into one geometry\n    combined_geometry = group.unary_union\n\n    # Get the boundary of the combined geometry\n    boundary = combined_geometry.boundary\n\n    # Add the boundary geometry and the group name to the list\n    boundary_list.append({'group': group_name, 'boundary': boundary})\n\n# Create a GeoDataFrame from the list of boundaries\ngrouped_dispatcher_gdf_starting_solution = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)\n```\n:::\n\n\nThen we can plot the solution, comparing it with the boundaries prior to evolution.\n\n::: {#cell-plot-single-solution .cell execution_count=13}\n``` {.python .cell-code}\nax = solution[0].plot(column=\"centre_dispatcher_evolved\", legend=True,\n                      legend_kwds={'bbox_to_anchor': (1.4, 1)})\n\n# Plot historical boundaries\ngrouped_dispatcher_gdf_starting_solution.plot(ax=ax, linewidth=1, edgecolor=\"black\")\n\nax.axis(\"off\")  # Hide axes for better visualization\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_refining_solutions_files/figure-html/plot-single-solution-output-1.png){#plot-single-solution width=505 height=389}\n:::\n:::\n\n\n### Generating multiple solutions at once\n\nLet's try generating more.\n\nWe now see benefits to having a solution with multiple outputs.\n\n::: {#cell-generate-thirty-solutions .cell execution_count=14}\n``` {.python .cell-code}\nsolution = create_evolved_solutions(\n    best_solution,\n    bham_region,\n    join_col_left=\"LSOA11CD\",\n    join_col_right=\"LSOA11CD\",\n    population_size=30\n)\n\nsolution[25]\n```\n\n::: {#generate-thirty-solutions .cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>centre_dispatcher_NEW</th>\n      <th>LSOA11CD</th>\n      <th>border_dispatchers</th>\n      <th>geometry</th>\n      <th>centre_dispatcher_evolved</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Centre 1-7</td>\n      <td>E01008888</td>\n      <td>[]</td>\n      <td>POLYGON ((413420.692 284795.501, 413826.348 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Centre 1-7</td>\n      <td>E01008891</td>\n      <td>[]</td>\n      <td>POLYGON ((413031.049 284196.638, 413321.825 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Centre 1-7</td>\n      <td>E01008893</td>\n      <td>[]</td>\n      <td>POLYGON ((412949.766 283625.900, 412594.358 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Centre 1-7</td>\n      <td>E01008895</td>\n      <td>[]</td>\n      <td>POLYGON ((413166.349 283295.822, 413132.000 28...</td>\n      <td>Centre 1-7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Centre 1-6</td>\n      <td>E01008896</td>\n      <td>[]</td>\n      <td>POLYGON ((412405.000 286300.615, 412535.675 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2006</th>\n      <td>Centre 1-6</td>\n      <td>E01033562</td>\n      <td>[Centre 2-1, Centre 1-5]</td>\n      <td>POLYGON ((404432.818 284070.885, 404516.073 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>Centre 1-6</td>\n      <td>E01033631</td>\n      <td>[Centre 2-1]</td>\n      <td>POLYGON ((405950.078 285312.998, 405575.210 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>Centre 2-1</td>\n      <td>E01033634</td>\n      <td>[Centre 1-6]</td>\n      <td>POLYGON ((404873.774 282636.291, 404623.886 28...</td>\n      <td>Centre 2-1</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>Centre 1-6</td>\n      <td>E01033641</td>\n      <td>[Centre 1-7]</td>\n      <td>POLYGON ((410005.374 283902.287, 410505.181 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>Centre 1-6</td>\n      <td>E01033648</td>\n      <td>[Centre 2-5]</td>\n      <td>POLYGON ((408199.966 283979.204, 408378.884 28...</td>\n      <td>Centre 1-6</td>\n    </tr>\n  </tbody>\n</table>\n<p>2011 rows √ó 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Confirming solutions are distinct\n\nLet's confirm these solutions are distinct!\n\n::: {#check-distinct-solutions .cell execution_count=15}\n``` {.python .cell-code}\ndef remove_duplicate_dataframes(df_list):\n    \"\"\"\n    Removes duplicate dataframes from a list using hashing.\n\n    Args:\n        df_list (list of pd.DataFrame): List of pandas DataFrames.\n\n    Returns:\n        list of pd.DataFrame: List with duplicates removed.\n    \"\"\"\n    seen_hashes = set()\n    unique_dfs = []\n\n    for df in df_list:\n        df_hash = pd.util.hash_pandas_object(df[['LSOA11CD','centre_dispatcher_evolved']], index=True).values.tobytes()  # Ensure a hashable type\n        if df_hash not in seen_hashes:\n            seen_hashes.add(df_hash)\n            unique_dfs.append(df)\n\n    return unique_dfs\n\nprint(f\"There are {len(solution)} solutions generated\")\n\nprint(f\"There are {len(remove_duplicate_dataframes(solution))} unique solutions generated\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 30 solutions generated\nThere are 30 unique solutions generated\n```\n:::\n:::\n\n\n### Plotting Multiple Solutions\n\nNow let's plot 20 of the solutions to confirm they are valid.\n\n::: {#cell-plot-mult-solutions .cell execution_count=16}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(5, 4, figsize=(15, 15))  # Adjust figure size\naxes = axes.flatten()  # Flatten in case of a 2D array of axes\n\nfor i, df in enumerate(solution[:20]):\n    ax = axes[i]\n\n    df.plot(column=\"centre_dispatcher_evolved\",\n                                              ax=ax, legend=False)\n\n    # Plot historical boundaries\n    grouped_dispatcher_gdf_starting_solution.plot(ax=ax, linewidth=0.5, edgecolor=\"black\")\n\n    ax.set_title(f\"Solution {i+1}\")\n    ax.axis(\"off\")  # Hide axes for better visualization\n\n# Hide any unused subplots\nfor j in range(i + 1, len(axes)):\n    fig.delaxes(axes[j])\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](boundary_problems_refining_solutions_files/figure-html/plot-mult-solutions-output-1.png){#plot-mult-solutions width=1281 height=1430}\n:::\n:::\n\n\n:::{.callout-warning}\nMany of thse solutions may perform better against the demand balancing criteria, but suffer from being shapes that are suboptimal in the real world.\n\nWe will explore how we may tackle that in future sections. We may choose to prioritise solutions that perform well on measures of [compactness](https://web.stevenson.edu/mbranson/m4tp/version1/gerrymandering-math-topic-compactness.html), for example. A wide range of compactness metrics exist, such as the Polsby-Popper score and the Reock score, among others.\n\nAdditional options are the indentation score (convex hull comparison) and the area to perimeter ratio to check for regions with long, thin corridors.\n\nWe can also look at measures of connectivity like the edge cut score, which looks at how many border connections would be required to cut off a region's connectivity.\n\n\n:::: {.columns}\n\nFor example, the light blue region on the left here would require very little change to cut it off from itself.\n\n::: {.column width='50%'}\n\n[](assets/2025-03-26-12-31-11.png)\n\n\n:::\n\n::: {.column width='50%'}\n\nThis would be better.\n\n[](assets/2025-03-26-12-33-57.png)\n\n:::\n\n::::\n\nAs we bring in additional metrics like real-world travel times into our scoring in subsequent chapters, we may naturally begin to develop 'better' regions.\n\n:::\n\n### Evaluating the solutions against the demand\n\nLet's initially evaluate our evolved solutions based on our original single metric, which is how well each solution balances demand across the regions (minimizing the difference in demand per region, looking at historical demand data).\n\n:::{.callout-note collapse=\"true\"}\n### Click here to view our 'evaluate_solution()' function from the previous chapter\n\n::: {#define-evaluation-functions .cell execution_count=17}\n``` {.python .cell-code}\ndef evaluate_solution(gdf,\n                      allocation_column='centre_dispatcher_NEW',\n                      demand_column=\"demand\"):\n    grouped_by_dispatcher = gdf.groupby(allocation_column)[[demand_column]].sum()\n    mean_demand = grouped_by_dispatcher['demand'].mean()\n\n    grouped_by_dispatcher['difference_from_mean'] = (grouped_by_dispatcher['demand'] - mean_demand).astype('int')\n\n    return abs(grouped_by_dispatcher['difference_from_mean']).mean().round(1)\n\ndef evaluate_solution_dict(solution_dict, gdf,\n                            allocation_column='centre_dispatcher',\n                            demand_column=\"demand\", territory_unit_column=\"LSOA11CD\"):\n\n    owned_territory_df = pd.DataFrame(\n            [(key, value) for key, values in solution_dict.items() for value in values],\n            columns=[f\"{allocation_column}_NEW\", territory_unit_column])\n    gdf = pd.merge(gdf, owned_territory_df, on=territory_unit_column, how=\"left\")\n\n    grouped_by_dispatcher = gdf.groupby(f\"{allocation_column}_NEW\")[[demand_column]].sum()\n    mean_demand = grouped_by_dispatcher['demand'].mean()\n\n    grouped_by_dispatcher['difference_from_mean'] = (grouped_by_dispatcher['demand'] - mean_demand).astype('int')\n\n    return abs(grouped_by_dispatcher['difference_from_mean']).mean().round(1)\n```\n:::\n\n\n:::\n\n::: {#cell-evaluate-evolved-solutions .cell execution_count=18}\n``` {.python .cell-code}\nimport copy\n\nevaluations_evolved_solutions = []\n\nfor i, sol in enumerate(solution):\n    allocation_evaluation = evaluate_solution(sol.merge(demand, on=\"LSOA11CD\"), allocation_column=\"centre_dispatcher_evolved\")\n\n    evaluations_evolved_solutions.append({\n        'solution': f\"e{i+1}\",\n        # We can't just pass the dictionary here due to the way python handles dictionaries\n        # We need to explicitly take a copy of the dictionary\n        'allocations': copy.deepcopy(sol.groupby('centre_dispatcher_evolved')['LSOA11CD'].apply(list).to_dict()),\n        'result': allocation_evaluation\n    })\n\nevolution_solution_df = pd.DataFrame(evaluations_evolved_solutions)\nevolution_solution_df['rank'] = evolution_solution_df['result'].rank(method='max')\n\nevolution_solution_df.sort_values('rank')\n```\n\n::: {#evaluate-evolved-solutions .cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>solution</th>\n      <th>allocations</th>\n      <th>result</th>\n      <th>rank</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>12</th>\n      <td>e13</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9273.6</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>e16</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9343.4</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>e15</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9452.1</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>e30</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9469.6</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>e28</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9479.9</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>e1</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9499.9</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>e3</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9526.9</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>e24</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9531.9</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>e5</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9536.8</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>e20</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9563.1</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>e21</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9566.4</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>e29</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9568.4</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>e14</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9574.4</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>e7</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9603.9</td>\n      <td>14.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>e10</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9632.8</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>e18</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9665.6</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>e22</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9678.8</td>\n      <td>17.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>e4</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9682.2</td>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>e17</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9687.4</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>e27</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9704.4</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>e12</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9723.1</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>e23</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9738.1</td>\n      <td>22.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>e9</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9738.2</td>\n      <td>23.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>e2</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9738.8</td>\n      <td>24.0</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>e26</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9743.2</td>\n      <td>25.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>e11</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9746.8</td>\n      <td>26.0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>e19</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9871.8</td>\n      <td>27.0</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>e25</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9874.6</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>e8</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9943.9</td>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>e6</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>10037.6</td>\n      <td>30.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's add the original random solutions into our ranking table.\n\n::: {#cell-add-original-solutions-eval-vals .cell execution_count=19}\n``` {.python .cell-code}\ninitial_solution_df['what'] = 'random'\nevolution_solution_df['what'] = 'evolved'\n\nfull_sol_df = pd.concat([initial_solution_df, evolution_solution_df])\nfull_sol_df['rank'] = full_sol_df['result'].rank(method='max')\nfull_sol_df.sort_values('rank')\n```\n\n::: {#add-original-solutions-eval-vals .cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>solution</th>\n      <th>allocations</th>\n      <th>result</th>\n      <th>rank</th>\n      <th>what</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>12</th>\n      <td>e13</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9273.6</td>\n      <td>1.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>e16</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9343.4</td>\n      <td>2.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>e15</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9452.1</td>\n      <td>3.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>e30</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9469.6</td>\n      <td>4.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>e28</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9479.9</td>\n      <td>5.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>e1</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9499.9</td>\n      <td>6.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>e3</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9526.9</td>\n      <td>7.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>e24</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9531.9</td>\n      <td>8.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>e5</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9536.8</td>\n      <td>9.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>e20</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9563.1</td>\n      <td>10.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>e21</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9566.4</td>\n      <td>11.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>e29</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9568.4</td>\n      <td>12.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>e14</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9574.4</td>\n      <td>13.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>e7</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9603.9</td>\n      <td>14.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>e10</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9632.8</td>\n      <td>15.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>9651.1</td>\n      <td>16.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>e18</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9665.6</td>\n      <td>17.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>e22</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9678.8</td>\n      <td>18.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>e4</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9682.2</td>\n      <td>19.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>e17</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9687.4</td>\n      <td>20.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>e27</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9704.4</td>\n      <td>21.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>e12</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9723.1</td>\n      <td>22.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>e23</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9738.1</td>\n      <td>23.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>e9</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9738.2</td>\n      <td>24.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>e2</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9738.8</td>\n      <td>25.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>e26</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9743.2</td>\n      <td>26.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>e11</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9746.8</td>\n      <td>27.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>9842.8</td>\n      <td>28.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>e19</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9871.8</td>\n      <td>29.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>e25</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9874.6</td>\n      <td>30.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>e8</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>9943.9</td>\n      <td>31.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>e6</td>\n      <td>{'Centre 1-1': ['E01009742', 'E01009745', 'E01...</td>\n      <td>10037.6</td>\n      <td>32.0</td>\n      <td>evolved</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>15</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031208', 'E01...</td>\n      <td>10811.3</td>\n      <td>33.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>10869.2</td>\n      <td>34.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>11</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>11043.4</td>\n      <td>35.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031208', 'E01...</td>\n      <td>11218.6</td>\n      <td>36.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>18</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>11401.2</td>\n      <td>37.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>12088.3</td>\n      <td>38.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>12226.2</td>\n      <td>39.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>12399.0</td>\n      <td>40.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>12418.8</td>\n      <td>41.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031188', 'E01...</td>\n      <td>12567.1</td>\n      <td>42.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>16</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031188', 'E01...</td>\n      <td>12831.8</td>\n      <td>43.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>17</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031208', 'E01...</td>\n      <td>13103.8</td>\n      <td>44.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>20</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031195', 'E01...</td>\n      <td>13126.5</td>\n      <td>45.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>19</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031213', 'E01...</td>\n      <td>13196.2</td>\n      <td>46.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>14</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031218', 'E01...</td>\n      <td>13443.9</td>\n      <td>47.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>12</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031188', 'E01...</td>\n      <td>13632.6</td>\n      <td>48.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>13</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>13954.4</td>\n      <td>49.0</td>\n      <td>random</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>{'Centre 2-5': ['E01031187', 'E01031204', 'E01...</td>\n      <td>14735.8</td>\n      <td>50.0</td>\n      <td>random</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-generate-plot-solution-ranking-all .cell execution_count=20}\n``` {.python .cell-code}\nimport plotly.express as px\n\n# Sort by 'result' to ensure correct order\nfull_sol_df = full_sol_df.sort_values(\"result\", ascending=True)\n\n# Convert 'solution' to a string (if it's not already)\nfull_sol_df[\"solution\"] = full_sol_df[\"solution\"].astype(str)\n\n# Create the plot and enforce sorted order\nfig = px.bar(\n    full_sol_df,\n    x=\"solution\",\n    y=\"result\",\n    color=\"what\",\n    category_orders={\"solution\": full_sol_df[\"solution\"].tolist()}  # Enforce order\n)\n\nfig.show()\n```\n\n::: {#generate-plot-solution-ranking-all .cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"86cabf8e-acf4-4f29-8bb8-8f7dac49f488\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"86cabf8e-acf4-4f29-8bb8-8f7dac49f488\")) {                    Plotly.newPlot(                        \"86cabf8e-acf4-4f29-8bb8-8f7dac49f488\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"what=evolved\\u003cbr\\u003esolution=%{x}\\u003cbr\\u003eresult=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"evolved\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"evolved\",\"offsetgroup\":\"evolved\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"e13\",\"e16\",\"e15\",\"e30\",\"e28\",\"e1\",\"e3\",\"e24\",\"e5\",\"e20\",\"e21\",\"e29\",\"e14\",\"e7\",\"e10\",\"e18\",\"e22\",\"e4\",\"e17\",\"e27\",\"e12\",\"e23\",\"e9\",\"e2\",\"e26\",\"e11\",\"e19\",\"e25\",\"e8\",\"e6\"],\"xaxis\":\"x\",\"y\":[9273.6,9343.4,9452.1,9469.6,9479.9,9499.9,9526.9,9531.9,9536.8,9563.1,9566.4,9568.4,9574.4,9603.9,9632.8,9665.6,9678.8,9682.2,9687.4,9704.4,9723.1,9738.1,9738.2,9738.8,9743.2,9746.8,9871.8,9874.6,9943.9,10037.6],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"what=random\\u003cbr\\u003esolution=%{x}\\u003cbr\\u003eresult=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"random\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"random\",\"offsetgroup\":\"random\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"10\",\"6\",\"15\",\"7\",\"11\",\"9\",\"18\",\"8\",\"2\",\"5\",\"3\",\"4\",\"16\",\"17\",\"20\",\"19\",\"14\",\"12\",\"13\",\"1\"],\"xaxis\":\"x\",\"y\":[9651.1,9842.8,10811.3,10869.2,11043.4,11218.6,11401.2,12088.3,12226.2,12399.0,12418.8,12567.1,12831.8,13103.8,13126.5,13196.2,13443.9,13632.6,13954.4,14735.8],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"solution\"},\"categoryorder\":\"array\",\"categoryarray\":[\"e13\",\"e16\",\"e15\",\"e30\",\"e28\",\"e1\",\"e3\",\"e24\",\"e5\",\"e20\",\"e21\",\"e29\",\"e14\",\"e7\",\"e10\",\"10\",\"e18\",\"e22\",\"e4\",\"e17\",\"e27\",\"e12\",\"e23\",\"e9\",\"e2\",\"e26\",\"e11\",\"6\",\"e19\",\"e25\",\"e8\",\"e6\",\"15\",\"7\",\"11\",\"9\",\"18\",\"8\",\"2\",\"5\",\"3\",\"4\",\"16\",\"17\",\"20\",\"19\",\"14\",\"12\",\"13\",\"1\"]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"result\"}},\"legend\":{\"title\":{\"text\":\"what\"},\"tracegroupgap\":0},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('86cabf8e-acf4-4f29-8bb8-8f7dac49f488');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nWe will now take a specified portion of these solutions, evolve them, evaluate them again, and continue.\n\nWe will also start tracking how good the best solution we are achieving is after each evolution.\n\nWe will repeat this 1000 times, plotting the value for our best solution over time to see how much better we can make the solution with sufficient permutations.\n\n:::{.callout-tip}\nComing soon!\n:::\n\nLet's plot what we started with versus our best 10 solutions at the end of the process.\n\nHere is our final start-to-finish code for generating and evaluating the solutions.\n\n:::{.callout-tip}\nComing soon!\n:::\n\n",
    "supporting": [
      "boundary_problems_refining_solutions_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.32.0.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}