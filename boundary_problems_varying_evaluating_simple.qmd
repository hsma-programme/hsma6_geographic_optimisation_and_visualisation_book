---
title: "(WIP) Boundary Problems - Creating and Evaluating Simple Solutions"
format: html
---

## Generating and representing new boundaries

When we come to modifying our existing boundaries, we are going to generate a large set of random new boundaries and test them.

:::{.callout-note}
Remember - in our problem statement, we specified that boundaries in our problem cannot cross through the middle of an LSOA. You would need to apply a different approach if this is not true in your case.
:::

:::{.callout-tip}
If you have a series of pre-selected solutions to try, the code in the following sections can be adapted to use those solutions rather than the randomly-generated solutions.
:::

First, we will define the LSOAs that each LSOA has a continuous boundary with. These will form part of a possible series of solutions. To do this, we'll be using the `.touches` method in geopandas.

In this case, a solution must meet a criteria

- every polygon must be assigned to a dispatcher
- no polygon can be assigned to more than one dispatcher
- dispatcher boundaries must be continuous; regions belonging to a dispatcher cannot be entirely separated from the rest of their dispatch area

At this point, we are not trying to do anything to balance our objectives like equalising the number of calls they are going to; instead, we are simply coming up with possibilities. We'll actually test them out in the next chapter.

### The Process

To create a solution that scales well to any number of dispatchers, we will have the dispatchers start with a single randomly-selected patch from their existing location (though we will also code in an option to always start from a single specified point).

Then, on each 'turn', they will randomly choose another patch from the patches that share a boundary with the first patch. There is a small (adjustable) possibility on each turn that they will not opt to take a turn; this will be part of our strategy to ensure that not every dispatcher ends up with solutions containing exactly the same number

On each subsequent turn, they will randomly select another region that touches any part of their existing region. If the region that is selected is a region that they already have in their 'patch', then

```{python}
#| echo: false
# *GenAI Alert - This code was modified from a suggested approach provided by ChatGPT*
from PIL import Image
import os

def create_gif(input_folder, output_gif, duration=500):
    # Get all PNG files from the folder and sort them
    images = sorted(
        [f for f in os.listdir(input_folder) if f.endswith('.png')],
        key=lambda x: os.path.getmtime(os.path.join(input_folder, x))
    )

    # Open images and convert to a list
    frames = [Image.open(os.path.join(input_folder, img)) for img in images]

    if frames:
        frames[0].save(output_gif, save_all=True, append_images=frames[1:], duration=duration, loop=0)
        print(f"GIF saved as {output_gif}")
    else:
        print("No PNG images found in the folder.")
```

```{python}
#| echo: false
#| eval: false
create_gif("animations/walk_animation_1", "images/walk.gif", duration=500)
```

Here's an example of one of our 'walks' building up. This only shows the first few steps, but eventually it would continue until the whole patch was covered, following the same pattern.

![](images/walk.gif)

This just showed us building up two patches, but more patches could be built with a larger number of 'players'.

```{python}
#| echo: false
#| eval: false
create_gif("animations/walk_animation_2", "images/walk_2.gif", duration=500)
```

![](images/walk_2.gif)

:::{.callout-tip}
Remember - due to the randomness we will introduce, each generated solution will be slightly different.
:::


:::{.callout-tip}
Again, this is not the only way we can start to generate solutions here!

This is one of many approaches you could take.
:::

:::{.callout-note}
When we come to apply a evolutionary or genetic algorithm approach to this problem in a later chapter, we will need to change how we represent our solutions; for now, however, we can just put together lists of LSOAs that will belong to each dispatcher.
:::

Let's write and apply this function to generate a series of randomly generated solutions for our problem, which we will subsequently move on to evaluating.

### Our starting dataframe

To start with, let's load our boundary data back in. Head back to the previous chapter if any of this feels unfamiliar!

```{python}
import pandas as pd
import geopandas

lsoa_geojson_path = 'https://github.com/hsma-programme/h6_3c_interactive_plots_travel/raw/main/h6_3c_interactive_plots_travel/example_code/LSOA_2011_Boundaries_Super_Generalised_Clipped_BSC_EW_V4.geojson'

lsoa_boundaries = geopandas.read_file(lsoa_geojson_path)

xmin, xmax = 370000, 420000
ymin, ymax = 250000, 310000

bham_region = lsoa_boundaries.cx[xmin:xmax, ymin:ymax]

bham_region["region"] = bham_region["LSOA11NM"].str[:-5]

bham_region.plot(
    figsize=(10,7),
    edgecolor='black',
    color="cyan"
    )
```

### Getting the Neighbours

Before we start worrying about the allocations, we first want to generate a column that contains a list of all of the neighbours of a given cell. This will be a lot more efficient than trying to calculate the neighbours from scratch each time we want to pick a new one - and it's not like the neighbours will change.

*GenAI Alert - This code was modified from a suggested approach provided by ChatGPT*

```{python}
def add_neighbors_column(gdf):
    """
    Adds a column to the GeoDataFrame containing lists of indices of neighboring polygons
    based on the 'touches' method.
    """
    gdf = gdf.copy()
    neighbors = []
    for idx, geom in gdf.geometry.items():
        touching = gdf[gdf.geometry.touches(geom)]["LSOA11CD"].tolist()
        neighbors.append(touching)

    gdf["neighbors"] = neighbors
    return gdf

bham_region = add_neighbors_column(bham_region)

bham_region[['LSOA11CD', 'LSOA11NM', 'LSOA11NMW', 'geometry', 'neighbors']].head()
```


```{python}
boundary_allocations_df = pd.read_csv("boundary_allocations.csv")
boundary_allocations_df.head()


bham_region = pd.merge(
    bham_region,
    boundary_allocations_df,
    left_on="region",
    right_on="Region",
    how="left"
)

bham_region["centre_dispatcher"] = bham_region["Centre"].astype("str") + '-' + bham_region["Dispatcher"].astype("str")

bham_region

```

### Making a dictionary of the existing allocations

First, let's make ourselves a dictionary. In this dictionary, the keys will be the centre/dispatcher, and the values will be a list of all LSOAs that currently belong to that dispatcher.

```{python}

# Get a list of the unique dispatchers
dispatchers = bham_region['centre_dispatcher'].unique()
dispatchers.sort()

dispatcher_starting_allocation_dict = {}

for dispatcher in dispatchers:
    dispatcher_allocation = bham_region[bham_region["centre_dispatcher"] == dispatcher]

    dispatcher_starting_allocation_dict[dispatcher] = dispatcher_allocation["LSOA11CD"].unique()
```

Let's look at what that looks like for one of the dispatchers. Using this, we can access a full list of their LSOAs whenever we need it.

```{python}
dispatcher_starting_allocation_dict['Centre 2-3']
```

:::{.callout-note}
To start with, let's build up our random walk algorithm step-by-step. At the end of this section, we'll turn it into a reusable functions with some parameters to make it easier to use. After that, we'll work on building a reusable function to help us quickly evaluate each solution we generate.
:::

### Generating starting allocations

The first step will be to generate an initial starting point for each dispatcher.

There are a couple of different approaches we could take here - and maybe we'll give our eventual algorithm the option to pick from several options.

*Option 1*

We could use our new dictionary to select a random starting LSOA for each of our dispatchers.
This will give us plenty of randomness - but we may find ourselves with walks that start very near the edge of our original patch, giving us very different boundaries to what existed before.

```{python}
import random

random_solution_starting_dict = {}

for key, value in dispatcher_starting_allocation_dict.items():

    random_solution_starting_dict[key] = random.choice(value)

random_solution_starting_dict

```

Let's turn this into a reusable function, then visualise its functioning.

```{python}

def create_random_starting_dict(input_dictionary):
    random_solution_starting_dict = {}

    for key, value in dispatcher_starting_allocation_dict.items():

        random_solution_starting_dict[key] = random.choice(value)

    return random_solution_starting_dict

create_random_starting_dict(dispatcher_starting_allocation_dict)

```

Now, let's generate some solutions and plot them.

We'll also be using a dataframe from the

:::{.callout-tip collapse="true"}
# Click here to see the code for generating our dispatch boundaries dataframe
```{python}
# Group by the specified column
grouped_dispatcher_gdf = bham_region.groupby("centre_dispatcher")

# Create a new GeoDataFrame for the boundaries of each group
boundary_list = []

for group_name, group in grouped_dispatcher_gdf:
    # Combine the polygons in each group into one geometry
    combined_geometry = group.unary_union

    # Get the boundary of the combined geometry
    boundary = combined_geometry.boundary

    # Add the boundary geometry and the group name to the list
    boundary_list.append({'group': group_name, 'boundary': boundary})

# Create a GeoDataFrame from the list of boundaries
grouped_dispatcher_gdf_boundary = geopandas.GeoDataFrame(boundary_list, geometry='boundary', crs=bham_region.crs)

grouped_dispatcher_gdf_boundary.head()
```
:::

Some of the regions are quite small, so it may be hard to see them all!

```{python}

# First, let's plot the outline of our entire region
ax = bham_region.plot(
    figsize=(10,7),
    edgecolor='black',
    linewidth=0.5,
    color="white"
    )

# Let's use our new function to generate a series of random starting patches
sol = create_random_starting_dict(dispatcher_starting_allocation_dict)

# We can filter our existing dataframe of allocations to just the starting patches
random_solution_start = bham_region[bham_region['LSOA11CD'].isin(sol.values())]

# Finally, we plot those on the same plot, colouring by centre-dispatcher combo
random_solution_start.plot(
    ax=ax,
    column="centre_dispatcher",
    legend=True
)

# Let's also visualise the historical boundaries
grouped_dispatcher_gdf_boundary.plot(
    ax=ax,
    linewidth=2,
    edgecolor="green"
)

```


*Option 2*

Another alternative is to start with the most central region of the existing regions for each dispatcher.

```{python}
from shapely.geometry import Point

def find_most_central_polygon(gdf):
    """
    Finds the most central polygon in a GeoDataFrame based on centroid proximity to the mean centroid.
    """
    # Compute centroids of individual polygons
    gdf["centroid"] = gdf.geometry.centroid

    # Calculate the mean centroid (central point)
    mean_centroid = gdf.geometry.unary_union.centroid

    # Compute distances from each centroid to the mean centroid
    gdf["distance_to_mean"] = gdf["centroid"].distance(mean_centroid)

    # Find the polygon with the minimum distance
    central_polygon = gdf.loc[gdf["distance_to_mean"].idxmin()]

    return central_polygon

def get_central_polygon_per_group(gdf, grouping_col):
    return gdf.groupby(grouping_col, group_keys=False).apply(find_most_central_polygon).drop(columns=["centroid", "distance_to_mean"])

most_central = get_central_polygon_per_group(bham_region, "centre_dispatcher")
most_central
```

Let's plot this.

```{python}
# First, let's plot the outline of our entire region
ax = bham_region.plot(
    figsize=(10,7),
    edgecolor='black',
    linewidth=0.5,
    color="white"
    )

# Plot those on the same plot, colouring by centre-dispatcher combo
most_central.plot(
    ax=ax,
    column="centre_dispatcher",
    legend=True
)

# Let's also visualise the historical boundaries
grouped_dispatcher_gdf_boundary.plot(
    ax=ax,
    linewidth=2,
    edgecolor="green"
)

```

You can see that in some regions the most central point can still be on a boundary, even


### Generating our new regions

As a recap, what we want to do now is introduce a number of 'players' who will play a territory-grabbing game. Our 'players' - the dispatchers - will each have a single turn, pass control to the next dispatcher, and so on.

On each turn, they will be presented with a long list of the regions that share a boundary with any of their existing territories. They will then choose a territory at random from that list.

However, this doesn't mean their territory will expand on every turn.

- The territory that they choose could be one of their existing territories (as we are checking for a boundary with *any* of their existing territories on a per-territory basis - not the outer boundary of their entire territory)
- There will also be a random chance introduced that they just don't take a go
- They may also try to take a territory that is already owned by a different dispatcher, in which case they will not gain anything on the turn - though we could always add in an option like them 'battling' for the territory

So let's start coding this!

First, let's work on the logic for selecting a territory from their existing list. We'll just do this with a single dispatcher for now.

We'll filter down to this and remind ourselves what the available data on neighbouring territory looks like.

```{python}

# We'll start with dispatcher 5 from centre 2, and we'll use the most central point of their existing territory

dispatcher = "Centre 2-5"

starting_point = most_central[most_central["centre_dispatcher"] == dispatcher]

starting_point['neighbors']
```

Let's now pick a random neighbour, and work out a way to store the new allocations so we can ensure we know who owns what territory, and we don't end up with a situation where two dispatchers own the same territory.

```{python}
owned_territory_dict = {}

owned_territory_dict[dispatcher] = [starting_point['LSOA11CD'].values[0]]

owned_territory_dict
```

```{python}
selected_territory = random.choice(starting_point['neighbors'].values[0])

selected_territory
```

```{python}
owned_territory_dict[dispatcher].append(selected_territory)

owned_territory_dict
```

Fantastic! We now have a simple way to get and store this.

Let's have a go at giving another dispatcher a turn to grab territory.

```{python}
dispatcher = "Centre 1-1"

starting_point = most_central[most_central["centre_dispatcher"] == dispatcher]

# This time we add to the existing dict rather than setting it up anew
owned_territory_dict[dispatcher] = [starting_point['LSOA11CD'].values[0]]

# Now we do our random selection
selected_territory = random.choice(starting_point['neighbors'].values[0])

owned_territory_dict[dispatcher].append(selected_territory)

owned_territory_dict
```

This is a good step, and for now we're unlikely to run into the issue of different dispatchers owning the same territory - though it's not impossible! So let's add in another dispatcher, but this time we'll check first that it's not owned by anyone.

First, let's pull back the full list of owned territories from our dict.

```{python}
list(owned_territory_dict.values())
```

We'll need to convert this into a single list. We could use a for loop, or a list comprehension.

```{python}
territory_list = [element for sub_list in list(owned_territory_dict.values()) for element in sub_list]

# By using set, then list on the result of that, we get a list of unique values
territory_list = list(set(territory_list))

territory_list
```


Now we can use this in our checks.


```{python}
dispatcher = "Centre 1-5"

starting_point = most_central[most_central["centre_dispatcher"] == dispatcher]

owned_territory_dict[dispatcher] = [starting_point['LSOA11CD'].values[0]]

selected_territory = random.choice(starting_point['neighbors'].values[0])

# Only add the territory if it's not already in the list of owned territory
if selected_territory not in territory_list:
    owned_territory_dict[dispatcher].append(selected_territory)

owned_territory_dict
```


That's most of the key elements of our function written now - so let's actually turn it into a function that will continue to run until all of the territory has been allocated.

*Note - when we get to the end, can we give a list of good solutions, but prioritise the solutions that are most similar to the starting solution?*
