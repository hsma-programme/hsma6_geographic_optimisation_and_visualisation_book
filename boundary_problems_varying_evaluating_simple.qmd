---
title: "(WIP) Boundary Problems - Creating and Evaluating Simple Solutions"
format: html
---

## Generating and representing new boundaries

When we come to modifying our existing boundaries, we are going to generate a large set of random new boundaries and test them.

:::{.callout-note}
Remember - in our problem statement, we specified that boundaries in our problem cannot cross through the middle of an LSOA. You would need to apply a different approach if this is not true in your case.
:::

:::{.callout-tip}
If you have a series of pre-selected solutions to try, the code in the following sections can be adapted to use those solutions rather than the randomly-generated solutions.
:::

First, we will define the LSOAs that each LSOA has a continuous boundary with. These will form part of a possible series of solutions. To do this, we'll be using the `.touches` method in geopandas.

In this case, a solution must meet a criteria

- every polygon must be assigned to a dispatcher
- no polygon can be assigned to more than one dispatcher
- dispatcher boundaries must be continuous; regions belonging to a dispatcher cannot be entirely separated from the rest of their dispatch area

At this point, we are not trying to do anything to balance our objectives like equalising the number of calls they are going to; instead, we are simply coming up with possibilities. We'll actually test them out in the next chapter.

### The Process

To create a solution that scales well to any number of dispatchers, we will have the dispatchers start with a single randomly-selected patch from their existing location.

Then, on each 'turn', they will randomly choose another patch from the patches that share a boundary with the first patch. There is a small (adjustable) possibility on each turn that they will not opt to take a turn; this will be part of our strategy to ensure that not every dispatcher ends up with solutions containing exactly the same number

On each subsequent turn, they will randomly select another region that touches any part of their existing region. If the region that is selected is a region that they already have in their 'patch', then


:::{.callout-tip}
Again, this is not the only way we can start to generate solutions here!

This is one of many approaches you could take.
:::

:::{.callout-note}
When we come to apply a evolutionary or genetic algorithm approach to this problem in a later chapter, we will need to change how we represent our solutions; for now, however, we can just put together lists of LSOAs that will belong to each dispatcher.
:::

Let's write and apply this function to generate a series of randomly generated solutions for our problem, which we will subsequently move on to evaluating.


```{python}


```
